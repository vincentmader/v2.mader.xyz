*.aux
*.fdb_latexmk
*.fls
*.log
*.pyc
*.pyo
*.synctex.gz
.DS_Store
.vim
.wiki
Cargo.lock
__pycache__
dist
node_modules
pkg
target
target

scripts/**/*.txt
todo

[workspace]
    members = [
        "mxyz-chronos",
        "mxyz-client",
        "mxyz-database",
        "mxyz-engine",
        "mxyz-init",
        "mxyz-physics",
        "mxyz-utils",
        "mxyz-server",
    ]

[profile.dev]
    opt-level = 0
    debug = true
    debug-assertions = true
    overflow-checks = true
    panic = 'unwind'
    incremental = true
    codegen-units = 256

[profile.release]
    opt-level = 3  # "s" ?
    debug = false
    debug-assertions = false
    overflow-checks = false
    panic = 'unwind'
    incremental = false
    codegen-units = 16

* mader.xyz

[global]
    template_dir ="mxyz-server/templates"


[package]
    name = "mxyz-chronos"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[dependencies]
    console_error_panic_hook = { version = "0.1.6", optional = true }

[features]
    default = ["console_error_panic_hook"]


mod sleep_cycle;
mod spotify;


mod sleep_cycle;


pub mod data_collection;
pub mod data_preparation;
pub mod data_processing;
pub mod data_visualization;
pub mod utils;


[package]
    name = "mxyz-client"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[lib]
    crate-type = ["cdylib"]

[dependencies]
    console_error_panic_hook = { version = "0.1.6", optional = true }
    getrandom = { version = "0.2", features = ["js"] }
    gloo = "0.2.0"
    js-sys = "0.3.51"
    mxyz-engine = { path="../mxyz-engine" }
    mxyz-utils = { path="../mxyz-utils" }
    rand = "0.8.4"
    wasm-bindgen = { version = "^0.2", features = ["nightly"] }

[dependencies.web-sys]
    version = "0.3.55"
    features = [
        'CanvasRenderingContext2d',
        'CssStyleDeclaration',
        'Document',
        'Element',
        'EventListener',
        'EventTarget',
        'HtmlButtonElement',
        'HtmlCanvasElement',
        'HtmlElement',
        'HtmlOptionElement',
        'HtmlParagraphElement',
        'MouseEvent',
        'Node',
        'Window',
        'console',
    ]

[features]
    default = ["console_error_panic_hook"]


[build]
    target = "wasm32-unknown-unknown"


pub mod simulation;

use wasm_bindgen::prelude::*;


#[wasm_bindgen]
pub struct Client {

}
#[wasm_bindgen]
impl Client {

    pub fn new() -> Self {
        Client {

        }
    }

    pub fn init(&mut self) {
        // utils::dom::set_panic_hook(); // TODO: helpful?
    }

}


// use mxyz_engine::config::EngineConfig;
// use crate::simulation::renderer::config::RendererConfig;


pub struct Config {
    pub sim_id: String,
    // pub engine: EngineConfig,
    // pub renderer: RendererConfig,
    pub is_paused: bool,
    pub nr_of_steps_per_render: usize,
    // TODO time_step: 
}
impl Config {
    pub fn new(
        sim_id: &str,
    ) -> Self {
        Config {
            sim_id: String::from(sim_id),
            // engine: EngineConfig::new(),
            // renderer: RendererConfig::new(),
            is_paused: false,
            nr_of_steps_per_render: 1,
        }
    }
}


use wasm_bindgen::prelude::*;

use mxyz_engine::boundary::object::variant::ObjBoundaryVariant;
use mxyz_engine::integrator::object::variant::ObjIntegratorVariant;
use mxyz_engine::state::object::variant::ObjVariant;
use mxyz_utils::dom::console;
use crate::simulation::Simulation;
use crate::simulation::renderer::object::color_mode::ObjColorMode;
use crate::simulation::renderer::object::tail_variant::ObjTailVariant;


#[wasm_bindgen]
impl Simulation {

    pub fn handle_button_event(&mut self, button_id: &str) {
        console::log(&format!("button-id: {}", button_id));

        let mut rel_button_id = String::from(button_id);
        // get id of field/obj_family that button belongs to
        let mut thing_id: usize = 0;
        if button_id.starts_with("obj-fam_") || button_id.starts_with("field_") {
            // id
            thing_id = button_id.split("_").nth(1).unwrap().parse::<usize>().unwrap();
            // get button_id without obj_family id    TODO make this prettier
            let mut foo = button_id.split("_");
            let count = button_id.split("_").count();
            rel_button_id = String::from("button");
            for idx in 3..count {
                rel_button_id = format!("{}_{}", rel_button_id, foo.nth(idx).unwrap());
            }
        }

        let engine = &mut self.engine;
        let renderer = &mut self.renderer;

        match rel_button_id.as_str() {

            // GENERAL (directly under canvas)

            "button_reset" => {
                engine.reset();
                renderer.reset();
            }, 
            "button_toggle-pause" => {
                engine.config.is_paused = !engine.config.is_paused;
                renderer.config.is_paused = !renderer.config.is_paused;
            },
            "button_toggle-pause-engine" => {
                engine.config.is_paused = !engine.config.is_paused;
            },
            "button_toggle-pause-renderer" => {
                renderer.config.is_paused = !renderer.config.is_paused;
            },
            "button_toggle-display-hud" => {
                renderer.config.is_displaying_hud = !renderer.config.is_displaying_hud;
            },
            "button_toggle-clear-canvas" => {
                renderer.config.is_clearing_canvas = !renderer.config.is_clearing_canvas;
            },
            "button_toggle-time-inversion" => {  // TODO
                // engine.config.dt *= -1.;
                renderer.config.is_iterating_forward = !renderer.config.is_iterating_forward;
            },

            // OBJECT VARIANT

            "button_set-obj-variant-particle" => {
                engine.config.obj_families[thing_id].obj_variant = ObjVariant::Particle;
            },
            "button_set-obj-variant-body" => {
                engine.config.obj_families[thing_id].obj_variant = ObjVariant::Body;
            },
            "button_set-obj-variant-static" => {
                engine.config.obj_families[thing_id].obj_variant = ObjVariant::Static;
            },

            // OBJECT COLOR MODE
            "button_set-obj-col-default" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::Default;
            },
            "button_set-obj-col-dist" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::Distance;
            },
            "button_set-obj-col-speed" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::Speed;
            },
            "button_set-obj-col-mass" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::Mass;
            },
            "button_set-obj-col-charge" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::Charge;
            },
            "button_set-obj-col-hsv-pos" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::HSLPosition;
            },
            "button_set-obj-col-hsv-vel" => {
                renderer.config.obj_families[thing_id].color_mode = ObjColorMode::HSLVelocity;
            },

            // OBJECT TAIL VARIANT

            "button_set-obj-tail-variant-none" => {
                renderer.config.obj_families[thing_id].tail_variant 
                    = ObjTailVariant::None;
            },
            "button_set-obj-tail-variant-line" => {
                renderer.config.obj_families[thing_id].tail_variant 
                    = ObjTailVariant::Line;
            },
            "button_set-obj-tail-variant-area" => {
                renderer.config.obj_families[thing_id].tail_variant 
                    = ObjTailVariant::Area;
            },

            // OBJECT MOTION VECTORS

            "button_toggle-display-objects" => {
                renderer.config.obj_families[thing_id].is_displaying_objects 
                    = !renderer.config.obj_families[thing_id].is_displaying_objects 
            },
            "button_toggle-display-obj-vec-pos" => {
                renderer.config.obj_families[thing_id].is_displaying_pos_vec 
                    = !renderer.config.obj_families[thing_id].is_displaying_pos_vec 
            },
            "button_toggle-display-obj-vec-vel" => {
                renderer.config.obj_families[thing_id].is_displaying_vel_vec 
                    = !renderer.config.obj_families[thing_id].is_displaying_vel_vec 
            },
            "button_toggle-display-obj-vec-acc" => {
                renderer.config.obj_families[thing_id].is_displaying_acc_vec 
                    = !renderer.config.obj_families[thing_id].is_displaying_acc_vec 
            },
            "button_toggle-display-obj-center-of-mass" => {
                renderer.config.obj_families[thing_id].is_displaying_center_of_mass 
                    = !renderer.config.obj_families[thing_id].is_displaying_center_of_mass 
            },
            // "button_toggle-display-obj-center-of-momentum" => {
            //     renderer.config.obj_families[thing_id].is_displaying_center_of_momentum 
            //         = !renderer.config.obj_families[thing_id].is_displaying_center_of_momentum 
            // },

            // FIELD VARIANT

            // ...

            // INTEGRATOR VARIANT    TODO
 
            "button_set-obj-integrator-euler-exp" => {
                engine.config.obj_families[thing_id].integrator 
                    = ObjIntegratorVariant::EulerExplicit;
            },
            "button_set-obj-integrator-euler-imp" => {},
            "button_set-obj-integrator-rk2" => {},
            "button_set-obj-integrator-rk4" => {},
            "button_set-obj-integrator-leapfrog" => {},
            "button_set-obj-integrator-verlet" => {},

            // BOUNDARY VARIANT

            "button_set-obj-bound-none" => {  // TODO
                engine.config.obj_families[thing_id].boundary 
                    = ObjBoundaryVariant::None;
            },
            "button_set-obj-bound-periodic" => {
                engine.config.obj_families[thing_id].boundary 
                    = ObjBoundaryVariant::Periodic;
            },
            "button_set-obj-bound-wall-elastic" => {
                engine.config.obj_families[thing_id].boundary 
                    = ObjBoundaryVariant::WallCollisionElastic;
            },
            "button_set-obj-bound-wall-inelastic" => {
                engine.config.obj_families[thing_id].boundary 
                    = ObjBoundaryVariant::WallCollisionInelastic;
            },

            // ...

            "button_set-obj-interaction-none" => {
                // let nr_of_families = self.engine.states[self.engine.iter_idx].obj_families.len();
                // for idx in 0..nr_of_families {
                //     // engine.engine_setup.object[0].obj_interactions;
                // }
                // TODO save interactions not in enum, but struct
                    // e.g.     grav: true, coulomb: true, lj: false, ...
                    //     -> nope!  (?) },
            }, _ => { console::log("ERROR: button-handler not found"); }
        };
    }
}






    // pub fn init_buttons(&mut self) {

    //     // general
    //     // object families
    //     // fields
        
    //     // fn init_option(
    //     //     doc: web_sys::Document,
    //     //     menu_id: &str,
    //     //     title: &str,
    //     //     button_ids: &HashMap<&str, &str>
    //     // ) {
    //     //     let menu = doc.get_element_by_id(menu_id).unwrap();

    //     //     let nr_of_buttons = button_ids.len();
    //     //     let multibutton = doc.create_element("select").unwrap();
    //     //     // multibutton.set_attribute("class", "multi-button").unwrap();
    //     //     // multibutton.set_attribute("style", &format!("grid-template-columns: repeat({}, 1fr)", nr_of_buttons)).unwrap();

    //     //     for (id, title) in button_ids.iter() {
	            // // let button = doc.create_element("option").unwrap()
	                // // .dyn_into::<web_sys::HtmlOptionElement>().unwrap();
    //     //         button.set_id(&format!("button-{}", id));
    //     //         button.set_inner_html(title);
    //     //         // button.set_attribute("title", title).unwrap();
    //     //         // button.set_attribute("class", "sub-button").unwrap();
	            // // multibutton.append_child(&button).unwrap();
    //     //     }
    //     //     menu.append_child(&multibutton).unwrap();
    //     // }

    //     fn init_multibutton(
    //         doc: web_sys::Document,
    //         menu_id: &str,
    //         title: &str,
    //         button_ids: &HashMap<&str, &str>
    //     ) {
    //         let menu = doc.get_element_by_id(menu_id).unwrap();

    //         let nr_of_buttons = button_ids.len();
    //         let multibutton = doc.create_element("div").unwrap();
    //         multibutton.set_attribute("class", "multi-button").unwrap();
    //         multibutton.set_attribute("style", &format!("grid-template-columns: repeat({}, 1fr)", nr_of_buttons)).unwrap();

    //         for (id, title) in button_ids.iter() {
	            // let button = doc.create_element("button").unwrap()
	                // .dyn_into::<web_sys::HtmlButtonElement>().unwrap();
    //             button.set_id(&format!("button-{}", id));
    //             button.set_inner_html(title);
    //             // button.set_attribute("title", title).unwrap();
    //             button.set_attribute("class", "sub-button").unwrap();
	            // multibutton.append_child(&button).unwrap();
    //         }
    //         menu.append_child(&multibutton).unwrap();
    //     }

    //     fn init_multibutton2(
    //         doc: web_sys::Document,
    //         menu_id: &str,
    //         title: &str,
    //         button_ids: &HashMap<&str, &str>
    //     ) {
    //         let menu = doc.get_element_by_id(menu_id).unwrap();

    //         // let nr_of_buttons = button_ids.len();
    //         let container = doc.create_element("div").unwrap();
    //         container.set_attribute("class", "dropdown-container").unwrap();
    //         let multibutton = doc.create_element("div").unwrap();
    //         multibutton.set_attribute("class", "dropdown").unwrap();
    //         multibutton.set_inner_html(title);
            
    //         let foo = doc.create_element("div").unwrap();
    //         foo.set_attribute("class", "dropdown-content").unwrap();

    //         for (id, title) in button_ids.iter() {
	            // let button = doc.create_element("button").unwrap()
	                // .dyn_into::<web_sys::HtmlButtonElement>().unwrap();
    //             button.set_id(&format!("button-{}", id));
    //             button.set_inner_html(title);
    //             // button.set_attribute("title", title).unwrap();
    //             button.set_attribute("class", "dropdown-item").unwrap();
	            // foo.append_child(&button).unwrap();
    //         }
    //         multibutton.append_child(&foo).unwrap();
    //         container.append_child(&multibutton).unwrap();
    //         menu.append_child(&container).unwrap();
    //     }

    //     let document = utils::dom::document();
    //     let menus = document.get_element_by_id("button-menus").unwrap();
    //     let menu = document.create_element("div").unwrap();
    //             menu.set_id(&format!("bm-{}", 0));
    //     menus.append_child(&menu).unwrap();
    //     let obj_color_modes = HashMap::from([
    //         ("set-obj_color_mode-default", "def"),
    //         ("set-obj_color_mode-hsv_velocity", "hsv vel"),
    //         ("set-obj_color_mode-hsv_position", "hsv pos"),
    //         ("set-obj_color_mode-speed", "speed"),
    //         ("set-obj_color_mode-distance_from_origin", "pos"),
    //         ("set-obj_color_mode-charge", "charge"),
    //     ]);
    //     init_multibutton(
    //         document, "bm-0", "object color mode", &obj_color_modes
    //     );
    //     let document = utils::dom::document();
    //     init_multibutton2(
    //         document, "bm-0", "object color mode", &obj_color_modes
    //     );
    //     // let document = utils::dom::document();
    //     // init_option(
    //     //     document, "bm-0", "object color mode", &obj_color_modes
    //     // );





    //     let buttons = HashMap::from([
    //         ("general", HashMap::from([
    //             ("reset", "reset"),
    //             // ("toggle-pause", "pause"),
    //             ("toggle-pause-engine", "pause engine"),
    //             ("toggle-pause-renderer", "pause renderer"),
    //         ])),
    //         ("tails", HashMap::from([
    //             ("toggle-display-tails", "display tails"),
    //             // ("set-tail_type-default", "def"),
    //             // ("set-tail_type-area", "area"),
    //         ])),
    //     ]);

    //     let document = utils::dom::document();
    //     let menus = document.get_element_by_id("button-menus").unwrap();
    //     for (menu_id, foo) in buttons {
    //         let menu = document.create_element("div").unwrap();
    //         menu.set_attribute("class", "button_menu").unwrap();
    //         let title = document.create_element("p").unwrap();
    //         title.set_inner_html(menu_id);
    //         menus.append_child(&title).unwrap();
    //         // let title = document.get_element_by_id(format!("p_{}", menu_id));
    //         for (button_id, button_title) in foo.iter() {
	            // let button = document.create_element("button").unwrap()
	        	    // .dyn_into::<web_sys::HtmlButtonElement>().unwrap();
    //             button.set_id(&format!("button-{}", button_id));
    //             button.set_inner_html(button_title);
    //             button.set_attribute("title", button_title).unwrap();
	            // menu.append_child(&button).unwrap();
    //         }
    //         menus.append_child(&menu).unwrap();
    //     }
    // }
    // pub fn init_sliders(&mut self) {

    //     let slider_ids: Vec<&str> = Vec::from([
    //         // "tail-length",
    //     ]);
    //     for slider_id in slider_ids {
    //         let document = utils::dom::document();
    //         let section = document.get_element_by_id("button_menu-0").unwrap();
	        // let slider = document.create_element("input").unwrap()
	    	    // .dyn_into::<web_sys::HtmlInputElement>().unwrap();
    //         slider.set_id(&format!("slider-{}", slider_id));
    //         slider.set_attribute("type", "range").unwrap();
    //         slider.set_attribute("min", "0").unwrap();
    //         slider.set_attribute("max", "1000").unwrap();
    //         slider.set_attribute("value", "500").unwrap();
	        // section.append_child(&slider).unwrap();
    //     }

    // }
    // // pub fn handle_option_event(&mut self, option_id: &str) {

    // //     let document = utils::dom::document();
    // //     let option = document.get_element_by_id(option_id).unwrap();

    // //     match option_id {
    // //         "button-set-obj_color_mode-default" => {
    // //             // button.set_attribute("class", "sub-button_active").unwrap();
    // //             self.renderer.obj_color_mode = ObjColorMode::Default;
    // //         }, "button-set-obj_color_mode-hsv_position" => {
    // //             self.renderer.obj_color_mode = ObjColorMode::HSLPosition;
    // //         }, "button-set-obj_color_mode-hsv_velocity" => {
    // //             self.renderer.obj_color_mode = ObjColorMode::HSLVelocity;
    // //         }, "button-set-obj_color_mode-speed" => {
    // //             self.renderer.obj_color_mode = ObjColorMode::Speed;
    // //         }, "button-set-obj_color_mode-distance_from_origin" => {
    // //             self.renderer.obj_color_mode = ObjColorMode::Distance;
    // //         }, "button-set-obj_color_mode-charge" => {
    // //             self.renderer.obj_color_mode = ObjColorMode::Charge;
    // //         }, _ => {}
    // //     }
    // }

mod buttons;
mod sliders;


use wasm_bindgen::prelude::*;
use wasm_bindgen::JsCast;
use web_sys::HtmlInputElement;

use crate::simulation::Simulation;

use mxyz_utils::dom;


pub fn get_slider_value(slider_id: &str) -> String {
    dom::document()
        .get_element_by_id(slider_id)
        .unwrap()
        .dyn_into::<HtmlInputElement>()
        .unwrap()
        .value()
}

#[wasm_bindgen]
impl Simulation {

    pub fn handle_slider_event(&mut self, slider_id: &str) {
        dom::console::log(&format!("slider-id: {}", slider_id));

        match slider_id {
            "slider_set-iterations-per-render" => {
                // get value from slider
                let val = get_slider_value(slider_id)
                    .parse::<usize>()
                    .unwrap();
                // scale logarithmically from 1 to 10**max_pow
                let max_pow = 2.;
                let steps = 10_f64.powf(val as f64 / 100. * max_pow);  // TODO make sim_id-dependent
                self.config.nr_of_steps_per_render = steps as usize;
            }, _ => {}
        };
    }

}

use wasm_bindgen::prelude::*;

mod config;
mod renderer;
mod event_handling;


#[wasm_bindgen]
pub struct Simulation {
    config:      config::Config,
    engine: mxyz_engine::Engine,
    renderer:  renderer::Renderer,
}

#[wasm_bindgen]
impl Simulation {

    pub fn new(sim_id: &str) -> Self {
        Simulation { 
            config:       config::Config::new(&sim_id),
            engine:  mxyz_engine::Engine::new(&sim_id),
            renderer: renderer::Renderer::new(&sim_id),
        }
    }

    pub fn init(&mut self) {
        self.engine.init();
        self.renderer.init(&self.engine);  
    }

    pub fn step(&mut self) {  // TODO: multi-thread & async
        if self.engine.config.is_paused { return; }
        for _ in 0..self.config.nr_of_steps_per_render { self.engine.step(); }
    }

    pub fn render(&mut self) {
        let frame_idx              = self.renderer.config.frame_idx as i32;
        let out_of_bounds          = frame_idx >= self.engine.config.iter_idx as i32;
        let is_paused              = self.renderer.config.is_paused;

        let forward = if !is_paused && !out_of_bounds {
            match self.renderer.config.is_iterating_forward { true => 1, false => -1 }
        } else { 0 } * self.config.nr_of_steps_per_render as i32;

        self.renderer.display(&self.engine);
        self.renderer.config.frame_idx = i32::max(0, frame_idx+forward) as usize; 
    }
}


use crate::simulation::renderer::Renderer;


impl Renderer {

    pub fn init_button_menu_1(
        &mut self, 
        doc:    &web_sys::Document
    ) {
        let button_menus = doc.get_element_by_id("button-menu_main").unwrap();
        let button_menu = doc.create_element("div").unwrap();
        button_menu.set_id(&format!("bm-{}", 0));  // default
        button_menus.append_child(&button_menu).unwrap();

        let button_ids = Vec::from([
            ("button_toggle-pause",             "| |"),
            ("button_toggle-pause-engine",      "|e|"),
            ("button_toggle-pause-renderer",    "|r|"),
            ("button_reset",                    "reset"),
            ("button_toggle-display-hud",       "h.u.d."),
            ("button_toggle-clear-canvas",      "clear canvas"),
            ("button_toggle-time-inversion",    "-t"),
        ]);
        for entry in button_ids {
            let button_id = entry.0;
            let button_title = entry.1;
            let button = doc.create_element("button").unwrap();
            button.set_id(button_id);
            button.set_attribute("class", "bm_button").unwrap();
            button.set_inner_html(button_title);
            button_menu.append_child(&button).unwrap();
        }

        let info_textfield_ids = Vec::from([
            ("textfield_iter_idx",              "iter: 0"),
            ("textfield_frame_idx",             "frame: 0"),
            ("textfield_fps_engine",            "fps_e: 0"),
            ("textfield_fps_renderer",          "fps_r: 0"),
        ]);
        let textfield_container = doc.create_element("div").unwrap();
        for entry in info_textfield_ids {
            let textfield_id = entry.0;
            let textfield_title = entry.1;
            let textfield = doc.create_element("span").unwrap();
            textfield.set_id(textfield_id);
            textfield.set_attribute("class", "bm_info_textfield").unwrap();
            textfield.set_inner_html(textfield_title);
            textfield_container.append_child(&textfield).unwrap();
        }
        button_menu.append_child(&textfield_container).unwrap();
    }

    pub fn init_button_menu_2(
        &mut self, 
        doc:    &web_sys::Document, 
        state:  &mxyz_engine::state::State
    ) {
        let multibuttons = Vec::from([
            ("", Vec::from([
                ("button_toggle-display-objects",            "disp. obj."),
                ("button_toggle-display-obj-vec-pos",        "pos. vec."),
                ("button_toggle-display-obj-vec-vel",        "vel. vec."),
                ("button_toggle-display-obj-center-of-mass", "c.o.m."),
                // ("button_toggle-display-obj-center-of-momentum", "c.o.p."),
                // ("button_toggle-display-obj-vec-acc",        "acc. vec."),
            // ])), ("object interactions", Vec::from([
            //     ("button_set-obj-interaction-none", "none"),
            //     ("button_set-obj-interaction-newton", "Newton"),
            //     ("button_set-obj-interaction-coulomb", "Coulomb"),
            //     ("button_set-obj-interaction-lennard-jones", "L.J."),
                // ("button_set-obj-interaction-boid", "boid"),
                // ("button_set-obj-interaction-boid", "collision"),
            ])),
        ]);
        let options = Vec::from([
            ("variant", Vec::from([
                ("button_set-obj-variant-static",       "static"),
                ("button_set-obj-variant-body",         "body"),
                ("button_set-obj-variant-particle",     "particle"),
            ])), ("color mode", Vec::from([
                ("button_set-obj-col-default",          "default"),
                ("button_set-obj-col-hsv-vel",          "hsv vel"),
                ("button_set-obj-col-hsv-pos",          "hsv pos"),
                ("button_set-obj-col-speed",            "speed"),
                ("button_set-obj-col-dist",             "distance"),
                ("button_set-obj-col-charge",           "charge"),
                ("button_set-obj-col-mass",             "mass"),
            ])), ("tail variant", Vec::from([
                ("button_set-obj-tail-variant-none",    "none"),
                ("button_set-obj-tail-variant-line",    "line"),
                ("button_set-obj-tail-variant-area",    "area"),
            ])), ("integrator", Vec::from([
                ("button_set-obj-integrator-euler-imp", "euler imp."),
                ("button_set-obj-integrator-euler-exp", "euler exp."),
                ("button_set-obj-integrator-rk4",       "rk4"),
                ("button_set-obj-integrator-rk2",       "rk2"),
                ("button_set-obj-integrator-verlet",    "verlet"),
                ("button_set-obj-integrator-leapfrog",  "leapfrog"),
            ])), ("boundary conditions", Vec::from([
                ("button_set-obj-bound-periodic",       "periodic"),
                ("button_set-obj-bound-wall-elastic",   "elastic (w)"),
                ("button_set-obj-bound-wall-inelastic", "inelastic (w)"),
            ])),
        ]);

        // struct Button {
        //     id: String,
        //     class: String,
        // }

        // struct BMOption {
        //     id: String,
        //     class: String,
        // }

        // struct BMMultibutton {
        //     id: String,
        //     class: String,
        //     buttons: Vec<Button>
        // }

        let button_menus = doc.get_element_by_id("page-column-right").unwrap();
        for obj_family in &state.obj_families {

            // create section for object family
            let section = doc.create_element("div").unwrap();
            section.set_attribute("class", "section").unwrap();
            button_menus.append_child(&section).unwrap();
            // add title
            let title = doc.create_element("div").unwrap();
            title.set_inner_html(&format!("object family {}", &obj_family.id));
            title.set_attribute("style", "text-align: left; padding-left: 10px;").unwrap();
            section.append_child(&title).unwrap();
            // create button menu in section, holding options & multi-buttons
            let button_menu = doc.create_element("div").unwrap();
            button_menu.set_attribute("class", "bm").unwrap();
            section.append_child(&button_menu).unwrap();

            // loop over multibuttons
            for (title, buttons) in &multibuttons {

                let multibutton_wrapper = doc.create_element("div").unwrap();
                button_menu.append_child(&multibutton_wrapper).unwrap();

                let title2 = doc.create_element("span").unwrap();
                title2.set_attribute("class", "bm_multibutton_title").unwrap();
                title2.set_inner_html(&format!("{}", &title));
                multibutton_wrapper.append_child(&title2).unwrap();

                let nr_of_buttons = buttons.len();
                let multibutton = doc.create_element("span").unwrap();
                multibutton.set_attribute("class", "bm_multibutton").unwrap();
                multibutton.set_attribute("style", &format!(
                    "grid-template-columns: repeat({}, 1fr);", nr_of_buttons
                )).unwrap();
                multibutton_wrapper.append_child(&multibutton).unwrap();

                // loop over multibutton buttons
                for button_idx in 0..nr_of_buttons {
                    let button = doc.create_element("button").unwrap();
                    button.set_attribute("class", "bm_multibutton_button").unwrap();
                    let button_id = buttons[button_idx].0;
                    let button_title = buttons[button_idx].1;
                    button.set_id(&format!("obj-fam_{}_{}", obj_family.id, button_id));
                    button.set_inner_html(button_title);
                    if button_idx == 0 {
                        button.set_attribute("style", "border-left: 0px;").unwrap();
                    }
                    multibutton.append_child(&button).unwrap();
                }
            }

            let button_menu = doc.create_element("div").unwrap();
            button_menu.set_attribute("class", "bm_options").unwrap();
            section.append_child(&button_menu).unwrap();

            // let button_menu_wrapper = document.create_element("div").unwrap();
            // button_menu_wrapper.append_child(&button_menu).unwrap();
            // loop over options
            for (title, buttons) in &options {

                let div_option = doc.create_element("div").unwrap();
                div_option.set_attribute("class", "bm_option").unwrap();
                
                let div_option_title = doc.create_element("span").unwrap();
                div_option_title.set_attribute("class", "bm_option_title").unwrap();
                div_option_title.set_inner_html(&format!("{}", &title));
                div_option.append_child(&div_option_title).unwrap();

                let div_option_dropdown_container = doc.create_element("span").unwrap();
                div_option_dropdown_container.set_attribute("class", "dropdown-container").unwrap();
                div_option.append_child(&div_option_dropdown_container).unwrap();

                let div_option_dropdown = doc.create_element("div").unwrap();
                div_option_dropdown.set_attribute("class", "dropdown").unwrap();
                div_option_dropdown_container.append_child(&div_option_dropdown).unwrap();

                let div_option_dropdown_value = doc.create_element("div").unwrap();
                div_option_dropdown_value.set_inner_html("test");
                // div_option_dropdown_value.set_attribute("class", "dropdown").unwrap();
                div_option_dropdown.append_child(&div_option_dropdown_value).unwrap();

                // let option = document.create_element("span").unwrap();
                // option.set_attribute("class", "bm_option").unwrap();
                // option.set_attribute("style", &format!(
                //     "grid-template-columns: repeat({}, 1fr);", nr_of_buttons
                // )).unwrap();
                // button_menu.append_child(&option).unwrap();

                let div_option_dropdown_content = doc.create_element("span").unwrap();
                div_option_dropdown_content.set_attribute("class", "dropdown-content").unwrap();
                div_option_dropdown.append_child(&div_option_dropdown_content).unwrap();

                // loop over option buttons
                let nr_of_buttons = buttons.len();
                for button_idx in 0..nr_of_buttons {
                    let button_id = buttons[button_idx].0;
                    let button_title = buttons[button_idx].1;

                    let div_option_dropdown_item = doc.create_element("button").unwrap();
                    div_option_dropdown_item.set_attribute("class", "dropdown-item").unwrap();
                    div_option_dropdown_item.set_id(&format!("obj-fam_{}_{}", obj_family.id, button_id));
                    div_option_dropdown_item.set_inner_html(button_title);
                    // if button_idx == 0 {
                    //     div_button_dropdown_item.set_attribute("style", "border-left: 0px;").unwrap();
                    // }
                    div_option_dropdown_content.append_child(&div_option_dropdown_item).unwrap();
                }

                button_menu.append_child(&div_option).unwrap();
                section.append_child(&button_menu).unwrap();
            }

            // for foo in &buttons {
            //     let button = document.create_element("div").unwrap();
            //     button.set_attribute("class", "button");
            //     button.set_id(foo.0);
            //     button.set_inner_html(foo.1);
            //     button_menu.append_child(&button);
            // } 
        }

        // for obj_family in &state.obj_families {
        //     self.create_button_menu_for_obj_family(obj_family);
        // }
        // for field in &state.fields {
        //     self.create_button_menu_for_field(field);
        // }
    }

}

use mxyz_engine::config::field::FieldEngineConfig;


pub struct FieldRendererConfig {

    pub id: usize,
    pub is_displayed: bool,

}
impl FieldRendererConfig {

    pub fn new(
        _sim_id: &str,  // TODO move initialization somewhere else?
        id: usize, 
        _field: &FieldEngineConfig
    ) -> Self {
        FieldRendererConfig {
            id: id,
            is_displayed: true,
        }
    }
}


pub mod field;
pub mod obj_family;


pub struct RendererConfig {

    pub sim_id:                 String,
    pub frame_idx:              usize,
    pub fields:                 Vec<field::FieldRendererConfig>,
    pub obj_families:           Vec<obj_family::ObjFamilyRendererConfig>,
    pub zoom:                   f64,
    pub is_paused:              bool,
    pub is_clearing_canvas:     bool,
    pub is_iterating_forward:   bool,
    pub is_displaying_hud:      bool,

}

impl RendererConfig {

    pub fn new(sim_id: &str) -> Self {
        RendererConfig {
            sim_id:                 String::from(sim_id),
            frame_idx:              0,
            fields:                 Vec::new(),
            obj_families:           Vec::new(),
            zoom:                   1.,
            is_paused:              false,
            is_clearing_canvas:     true,
            is_iterating_forward:   true,
            is_displaying_hud:      false,
        }
    }

    pub fn init(&mut self, engine: &mxyz_engine::Engine) {
        self.init_fields(engine);
        self.init_obj_families(engine);
    }

    pub fn init_fields(&mut self, engine: &mxyz_engine::Engine) {
        for (id, field) in engine.config.fields.iter().enumerate() {
            let field_conf = field::FieldRendererConfig::new(&self.sim_id, id, field);
            self.fields.push(field_conf);
        }
    }

    pub fn init_obj_families(&mut self, engine: &mxyz_engine::Engine) {
        for (id, obj_fam) in engine.config.obj_families.iter().enumerate() {
            let obj_fam_conf = obj_family::ObjFamilyRendererConfig::new(&self.sim_id, id, obj_fam);
            self.obj_families.push(obj_fam_conf);
        }
    }
}


use crate::simulation::renderer::object::color_mode::ObjColorMode;
use crate::simulation::renderer::object::tail_variant::ObjTailVariant;

use mxyz_engine::config::obj_family::ObjFamilyEngineConfig;
use mxyz_engine::state::object::variant::ObjVariant;


pub struct ObjFamilyRendererConfig {

    pub id:                                 usize,
    // pub is_displayed: bool,
    pub is_displaying_objects:              bool,
    pub is_displaying_line_tail:            bool,
    pub is_displaying_area_tail:            bool,
    pub is_displaying_pos_vec:              bool,
    pub is_displaying_vel_vec:              bool,
    pub is_displaying_acc_vec:              bool,
    pub is_displaying_center_of_mass:       bool,
    pub is_displaying_center_of_momentum:   bool,
    // pub display_acc_vec:                    bool,
    pub obj_drawing_radius:                 f64,
    pub color_mode:                         ObjColorMode,
    pub tail_variant:                       ObjTailVariant,
    pub tail_length:                        usize,
    pub tail_width:                         f64,
    pub obj_is_filled:                      bool,

}
impl ObjFamilyRendererConfig {

    pub fn new(sim_id: &str, id: usize, obj_fam: &ObjFamilyEngineConfig) -> Self {

        let obj_drawing_radius = match obj_fam.obj_variant {
            ObjVariant::Static   => 0.05,
            ObjVariant::Body     => 0.02,
            ObjVariant::Particle => 0.005,
        };
        let DEFAULT_COLOR_MODE = match sim_id {
            "charge-interaction" => ObjColorMode::Charge,
            "3body-fig8" => ObjColorMode::Speed,
            "nbody-misc" | "nbody-asteroids" | "nbody-flowers" => ObjColorMode::Distance,
            _ => ObjColorMode::Default
        };
        let DEFAULT_TAIL_VARIANT = match sim_id {
            "3body-moon" | "nbody-flowers" | "nbody-misc" | "3body-fig8" => ObjTailVariant::Line,
            // "3body-fig8" => ObjTailVariant::Area,
            _ => ObjTailVariant::None
        };
        let DEFAULT_TAIL_LENGTH = match sim_id {
            "3body-fig8" => 200,
            _ => 100
        };
        let DEFAULT_TAIL_WIDTH = 2.;

        ObjFamilyRendererConfig {
            id,
            // is_displayed:                       true,
            is_displaying_objects:              true,
            is_displaying_line_tail:            false,
            is_displaying_area_tail:            false,
            is_displaying_pos_vec:              false,
            is_displaying_vel_vec:              false,
            is_displaying_acc_vec:              false,
            is_displaying_center_of_mass:       false,
            is_displaying_center_of_momentum:   false,
            // display_acc_vec:                    bool,
            // drawing_radius:                     0.02,
            color_mode:                         DEFAULT_COLOR_MODE,
            tail_variant:                       DEFAULT_TAIL_VARIANT,
            tail_length:                        DEFAULT_TAIL_LENGTH,
            tail_width:                         DEFAULT_TAIL_WIDTH,
            obj_drawing_radius,
            obj_is_filled:                      true,  // TODO add button
        }
    }
}

#![allow(non_snake_case)]


pub mod config;
pub mod field;
pub mod object;
mod buttons;

use mxyz_engine::Engine;
use mxyz_engine::state::State;
use mxyz_engine::state::field::Field;
use mxyz_engine::state::object::ObjFamily;

pub use mxyz_utils::dom::canvas::Canvas;
pub use mxyz_utils::dom::console;

use object::tail_variant::ObjTailVariant;
use object::color_mode::ObjColorMode;

// use mxyz_engine::config::field::FieldEngineConfig;
// use mxyz_engine::integrator::field::cell_auto::apply_periodic_bounds;


pub struct Renderer {

    sim_id:            String,
    pub canvases:          Vec<Canvas>,
    pub config:        config::RendererConfig,

}

impl Renderer {

    pub fn new(sim_id: &str) -> Self {
        Renderer {
            sim_id:    String::from(sim_id),
            canvases:  Vec::new(),
            config:    config::RendererConfig::new(sim_id),
            // TODO tail pre-computes (?)
        }
    }

    pub fn init(&mut self, engine: &Engine) {
        self.config.init(&engine);
        // initialize canvas   (TODO generalize)
        let canvas = Canvas::new("canvas_main");
        self.canvases.push(canvas);
        // initialize user inputs (TODO)
        let doc = mxyz_utils::dom::document();
        self.init_button_menu_1(&doc, );
        let initial_state = &engine.states[self.config.frame_idx];
        self.init_button_menu_2(&doc, &initial_state);
    }

    pub fn display(&mut self, engine: &Engine) {
        let states = &engine.states;
        // STATE SETUP
        let current_state = &states[self.config.frame_idx];
        let fields        = &current_state.fields;
        let families      = &current_state.obj_families;
        // CANVAS SETUP
        let canvas_id     = 0;  // todo: get id 
        let canvas        = &mut self.canvases[canvas_id];
        if self.config.is_clearing_canvas { canvas.clear(); }

        // TODO put somewhere else
        // let canvas = &mut self.canvases[canvas_id];
        // DISPLAY FIELD
        // let dimensions = Vec::from([40, 40]);
        // for row_idx in 0..dimensions[0] {
        //     for col_idx in 0..dimensions[1] {

        //         let x = (2.*(col_idx as f64 + 0.5) / dimensions[0] as f64) - 1.;  // TODO zoom
        //         let y = (2.*(row_idx as f64 + 0.5) / dimensions[1] as f64) - 1.;
        //         let (m, u, v, q) = (1., 0., 0., 1.);
        //         let mut force = Vec::from([0., 0.]);

        //         for family in families.iter() {
        //             use mxyz_engine::state::object::variant::ObjVariant;
        //             match engine.config.obj_families[family.id].obj_variant {
        //                 ObjVariant::Particle => { continue; },
        //                 _ => {}
        //             }

        //             let nr_of_objects = engine.config.obj_families[family.id].family_size;
        //             let obj_length = &engine.config.obj_families[family.id].obj_attributes.len();
        //             let objects = &family.objects;
        //             for obj_id in 0..nr_of_objects {
        //                 let obj = Vec::from(&objects[obj_id*obj_length..(obj_id+1)*obj_length]);

        //                 use mxyz_engine::interaction::object::object::forces as obj_obj_forces;
        //                 let eps = 0.;

        //                 let force_getter = match self.sim_id.as_str() {
        //                     "lennard-jones" => obj_obj_forces::lennard_jones::force,
        //                     "charge-interaction" => obj_obj_forces::coulomb::force,
        //                     _ => obj_obj_forces::newtonian_gravity::force,
        //                 };

        //                 let f = force_getter(
        //                     &[m, x, y, u, v, q], &obj, eps,
        //                 );
        //                 force[0] += f[0];
        //                 force[1] += f[1];
        //             }
        //         }
        //         // let force = cell;
        //         // let x = (2.*(col_idx as f64 + 0.5) / dimensions[0] as f64) - 1.;  // TODO zoom
        //         // let y = (2.*(row_idx as f64 + 0.5) / dimensions[1] as f64) - 1.;
        //         let norm = (force[0].powf(2.) + force[1].powf(2.)).sqrt();
        //         let from = (x, y);
        //         let to = (x + force[0] / norm/dimensions[0] as f64, y + force[1] / norm/dimensions[1] as f64);
        //         let radius = 0.001;
        //         let max_force = 10.;  // TODO make slider
        //         let r = 255. * norm / max_force;
        //         let (g, b) = (r, r);
        //         let color = format!("rgb({}, {}, {})", r, g, b);
        //         canvas.set_stroke_style(&color);
        //         canvas.set_fill_style(&color);
        //         canvas.draw_line(from, to);
        //         canvas.draw_circle(to, radius, true);
        //     }
        // }

        // DISPLAY FIELDS
        for field in fields.iter() {
            self.display_field(field, states, canvas_id, &engine);
        }
        // DISPLAY OBJECT FAMILIES
        for family in families.iter() {
            self.display_objects(family, states, canvas_id, &engine);
        }
        // DISPLAY HUD
        self.display_info_textfields(&engine);
        if self.config.is_displaying_hud { 
            self.display_hud(&engine);
        }
    }

    pub fn display_objects(
        &mut self, 
        family: &ObjFamily,
        states: &Vec<State>,
        canvas_id: usize,
        engine: &Engine,
    ) {

        let r = self.config.obj_families[family.id].obj_drawing_radius;
        let is_filled = self.config.obj_families[family.id].obj_is_filled;

        let objects = &family.objects;
        let obj_length = engine.config.obj_families[family.id].obj_length;
        let nr_of_objects = engine.config.obj_families[family.id].family_size;

        // SETUP CANVAS
        let canvas = &mut self.canvases[canvas_id];

        // SETUP OBJECT COLOR
        let obj_color_mode = &self.config.obj_families[family.id].color_mode;
        let get_obj_color = match obj_color_mode {
            ObjColorMode::Default     => object::color_mode::get_obj_color_default,
            ObjColorMode::Mass        => object::color_mode::get_obj_color_from_mass,
            ObjColorMode::HSLVelocity => object::color_mode::get_obj_color_from_velocity_angle, 
            ObjColorMode::HSLPosition => object::color_mode::get_obj_color_from_position_angle, 
            ObjColorMode::Speed       => object::color_mode::get_obj_color_from_speed,
            ObjColorMode::Distance    => object::color_mode::get_obj_color_from_distance, // NOTE from origin
            ObjColorMode::Charge      => object::color_mode::get_obj_color_from_charge,
        };
        // loop over objects
        for obj_id in 0..nr_of_objects {
            let start_idx = obj_id * obj_length;
            let obj = Vec::from(&objects[start_idx..start_idx+obj_length]);
            // get color from color-mode
            let color = get_obj_color(&obj, 1.);
            canvas.set_stroke_style(&color);
            canvas.set_fill_style(&color);

            // DISPLAY OBJECTs
            if self.config.obj_families[family.id].is_displaying_objects {
                let (x, y) = (obj[1], obj[2]);
                canvas.draw_circle( (x, y), r, is_filled )
            }
            // DISPLAY POSITION VECTORs
            if self.config.obj_families[family.id].is_displaying_pos_vec {
                let (x, y) = (obj[1], obj[2]);
                canvas.draw_line((x, y), (0., 0.));
            }
            // DISPLAY VELOCITY VECTORs
            if self.config.obj_families[family.id].is_displaying_vel_vec {
                let (x, y, u, v) = (obj[1], obj[2], obj[3], obj[4]);
                let z = (u.powf(2.) + v.powf(2.)).powf(-0.5) / 5.; // TODO make configurable
                canvas.draw_line((x, y), (x+u*z, y+v*z));
            }
            // DISPLAY ACCELERATION VECTOR
            // if self.config.obj_families[family.id].is_displaying_acc_vec {
            //     // TODO
            // }

        }
        // DISPLAY OBJECT CENTER-OF-MASS
        if self.config.obj_families[family.id].is_displaying_center_of_mass {
            self.display_center_of_mass(&family, canvas_id, &engine);
        }
        // DISPLAY OBJECT CENTER-OF-MOMENTUM   TODO
            // if self.config.obj_families[family.id].is_displaying_center_of_momentum {
            //     self.display_center_of_momentum(&family, canvas_id, &engine);
            // }
        // DISPLAY OBJECT TAILS
        let tail_variant = &self.config.obj_families[family.id].tail_variant;
        match tail_variant {
            ObjTailVariant::Line => {     // LINE TAILS
                self.display_line_tails(&family, states, canvas_id, &engine);
            }, ObjTailVariant::Area => {  // AREA TAILS
                self.display_area_tails(&family, states, canvas_id, &engine);
            }, _ => {
            }
        }
    }

    // pub fn display_center_of_momentum(
    //     &mut self, 
    //     family: &ObjFamily, 
    //     canvas_id: usize,
    //     engine: &Engine,
    // ) {
    //     let canvas = &mut self.canvases[canvas_id];

    //     let conf = &engine.config.obj_families[family.id];
    //     let obj_length = conf.obj_length;

    //     let mut center_of_momentum = (0., 0.);
    //     for obj_id in 0..conf.family_size {
    //         let start_idx = obj_id * obj_length;
    //         let obj = &family.objects[start_idx..start_idx+obj_length];
    //         center_of_momentum.0 += obj[0] * obj[3];
    //         center_of_momentum.1 += obj[0] * obj[4];
    //     };

    //     let from = (0., 0.);
    //     let to = (from.0 + center_of_momentum.0, from.1 + center_of_momentum.1);
    //     canvas.draw_line(from, to);
    // }

    pub fn display_center_of_mass(
        &mut self, 
        family: &ObjFamily, 
        canvas_id: usize,
        engine: &Engine,
    ) {

        let canvas = &mut self.canvases[canvas_id];
        let r = 0.01;
        canvas.set_stroke_style("red");
        canvas.set_fill_style("red");

        let mut center_of_mass = (0., 0.);
        let mut total_mass = 0.;

        let nr_of_objects = engine.config.obj_families[family.id].family_size;
        let obj_length = engine.config.obj_families[family.id].obj_length;

        for obj_id in 0..nr_of_objects {
            let start_idx = obj_id * obj_length;
            let obj = &family.objects[start_idx..start_idx+obj_length];
            center_of_mass.0 += obj[1];
            center_of_mass.1 += obj[2];
            total_mass += obj[0];
        };
        center_of_mass.0 /= total_mass;
        center_of_mass.1 /= total_mass;

        canvas.draw_circle(center_of_mass, r, true);
    }

    pub fn display_line_tails(
        &mut self,
        family: &ObjFamily,
        states: &Vec<State>,
        canvas_id: usize,
        engine: &Engine,
    ) {
        // get info from engine-config
        let nr_of_objects = engine.config.obj_families[family.id].family_size;
        let obj_length = engine.config.obj_families[family.id].obj_length;
        // get info from renderer-config
        let tail_length = self.config.obj_families[family.id].tail_length;
        let tail_width = self.config.obj_families[family.id].tail_width;

        // SETUP CANVAS
        let canvas = &mut self.canvases[canvas_id];
        canvas.set_line_width(tail_width);

        // SETUP COLOR
        let obj_color_mode = &self.config.obj_families[family.id].color_mode;
        let get_obj_color = match obj_color_mode {
            ObjColorMode::Default     => object::color_mode::get_obj_color_default,
            ObjColorMode::Mass        => object::color_mode::get_obj_color_from_mass,
            ObjColorMode::HSLVelocity => object::color_mode::get_obj_color_from_velocity_angle, 
            ObjColorMode::HSLPosition => object::color_mode::get_obj_color_from_position_angle, 
            ObjColorMode::Speed       => object::color_mode::get_obj_color_from_speed,
            ObjColorMode::Distance    => object::color_mode::get_obj_color_from_distance, // NOTE from origin
            ObjColorMode::Charge      => object::color_mode::get_obj_color_from_charge,
        };

        let frame_idx = self.config.frame_idx;
        for tail_step_id in (0..usize::min(tail_length, frame_idx)).rev() {

            for obj_id in 0..nr_of_objects {
                let start_idx = obj_id*obj_length;

                let state           = &states[frame_idx-tail_step_id];
                let obj             = &state.obj_families[family.id].objects[start_idx..start_idx+obj_length];
                let previous_state  = &states[frame_idx-tail_step_id-1];
                let previous_obj    = &previous_state.obj_families[family.id].objects[start_idx..start_idx+obj_length];

                let (x1, y1) = (previous_obj[1], previous_obj[2]);
                let (x2, y2) = (obj[1], obj[2]);

                // setup color
                let alpha = 1. - tail_step_id as f64 / tail_length as f64;
                let color = get_obj_color( &Vec::from(obj), alpha );
                canvas.set_stroke_style(&color);
                canvas.set_fill_style(&color);
                // draw tail
                canvas.draw_line( (x1, y1), (x2, y2) );

            }  // TODO apply alpha   (from input?)
        }
        canvas.reset_line_width();
    }

    pub fn display_area_tails(
        &mut self,
        family: &ObjFamily,
        states: &Vec<State>,
        canvas_id: usize,
        engine: &Engine,
    ) {
        // get info from engine-config
        let nr_of_objects = engine.config.obj_families[family.id].family_size;
        let obj_length = engine.config.obj_families[family.id].obj_length;
        // get info from renderer-config
        let tail_length = self.config.obj_families[family.id].tail_length;

        // SETUP CANVAS
        let canvas = &mut self.canvases[canvas_id];

        // setup color
        let obj_color_mode = &self.config.obj_families[family.id].color_mode;
        let get_obj_color = match obj_color_mode {
            ObjColorMode::Default     => object::color_mode::get_obj_color_default,
            ObjColorMode::Mass        => object::color_mode::get_obj_color_from_mass,
            ObjColorMode::HSLVelocity => object::color_mode::get_obj_color_from_velocity_angle, 
            ObjColorMode::HSLPosition => object::color_mode::get_obj_color_from_position_angle, 
            ObjColorMode::Speed       => object::color_mode::get_obj_color_from_speed,
            ObjColorMode::Distance    => object::color_mode::get_obj_color_from_distance, // NOTE from origin
            ObjColorMode::Charge      => object::color_mode::get_obj_color_from_charge,
        };

        let iterator = 0..usize::min(tail_length, self.config.frame_idx);
        for tail_step_id in iterator.rev() {

            for obj_id in 0..nr_of_objects {
                let start_idx = obj_id*obj_length;

                let state = &states[self.config.frame_idx - tail_step_id];
                let obj = &state.obj_families[family.id].objects[start_idx..start_idx+obj_length];
                let previous_state = &states[self.config.frame_idx - tail_step_id - 1];
                let previous_obj = &previous_state.obj_families[family.id].objects[start_idx..start_idx+obj_length];

                let (x1, y1) = (previous_obj[1], previous_obj[2]);
                let (x2, y2) = (obj[1], obj[2]);
                let (x3, y3) = (0., 0.);

                // setup color
                let alpha = 1. - tail_step_id as f64 / tail_length as f64;
                let color = get_obj_color( &Vec::from(obj), alpha );
                canvas.set_stroke_style(&color);
                canvas.set_fill_style(&color);
                // draw tail
                canvas.draw_triangle( (x1, y1), (x2, y2), (x3, y3) )

            }  // TODO apply alpha   (from input?)
        }
    }

    pub fn display_field(
        &mut self, 
        field: &Field, 
        _states: &Vec<State>,
        canvas_id: usize,
        engine: &Engine,
    ) {
        let canvas = &mut self.canvases[canvas_id];

        let dimensions = &engine.config.fields[field.id].dimensions;

        for x_idx in 0..dimensions[0] {
            for y_idx in 0..dimensions[1] {

        // for dimension_idx in 0..dimensions.len() {
        //     for idx in 0..dimensions[dimension_idx] {
                let cell = field.entries[y_idx*dimensions[0]+x_idx];


        //         // let force = cell;
        //         // let x = (2.*(col_idx as f64 + 0.5) / dimensions[0] as f64) - 1.;  // TODO zoom
        //         // let y = (2.*(row_idx as f64 + 0.5) / dimensions[1] as f64) - 1.;
        //         // let norm = (force[0].powf(2.) + force[1].powf(2.)).sqrt();
        //         // let from = (x, y);
        //         // let to = (x + force[0] / norm/dimensions[0] as f64, y + force[1] / norm/dimensions[1] as f64);
        //         // let radius = 0.001;
        //         // let max_force = 10.;  // TODO make slider
        //         // let r = 255. * norm / max_force;
        //         // let (g, b) = (r, r);
        //         // let color = format!("rgb({}, {}, {})", r, g, b);
        //         // canvas.set_stroke_style(&color);
        //         // canvas.set_fill_style(&color);
        //         // canvas.draw_line(from, to);
        //         // canvas.draw_circle(to, radius, true);






        //         // match self.sim_id {
        //         //     "game-of-life" => {

        //         //     }, "ising" => {

        //         //     }, _ => {

        //         //     }
        //         // }

                let color = if cell == 1. { "white" } 
                    else if cell == 2. { "red" } 
                    else { "black" };

                let s = match self.sim_id.as_str() {
                    "game-of-life" => 1.,
                    _ => 0.5
                };
                let x = ((x_idx as f64 + (1.-s)/2.) / dimensions[0] as f64)*2.-1.;
                let y = ((y_idx as f64 + (1.-s)/2.) / dimensions[1] as f64)*2.-1.;
                let w = s * 2. / dimensions[0] as f64;
                let h = s * 2. / dimensions[1] as f64;
                canvas.set_fill_style(&color);
                canvas.fill_rect((x, y), w, h);

        //         // let (x, y) = (
        //         //     (idx as f64+0.2) / dimensions[0] as f64 * canvas.dimensions.0, 
        //         //     (jdx as f64+0.2) / dimensions[1] as f64 * canvas.dimensions.1, 
        //         // );
        //         // use mxyz_engine::integrator::field::cell_auto::get_nr_of_neighbors;
        //         // let nr_of_neighbors = get_nr_of_neighbors(
        //         //     field, &engine.config.fields[field.id], idx, jdx, 0
        //         // );
        //         // let next = match nr_of_neighbors {
        //         //     2 => if cell == 1. {1.} else {0.}, 3 => 1., _ => 0.
        //         // };
        //         // canvas.set_font("18px sans-serif");
        //         // canvas.set_stroke_style("green");
        //         // canvas.set_fill_style("green");
        //         // if nr_of_neighbors != 0 {
        //         //     // canvas.fill_text(&format!("{}", nr_of_neighbors), x, y);
        //         //     // canvas.fill_text(&format!("{}", next), x, y);
        //         //     // canvas.fill_text(&format!("({}, {}):  {} -> {}", jdx, idx, nr_of_neighbors, next), x, y);
        //         //     canvas.fill_text(&format!("({}, {}):  {}", jdx, idx, nr_of_neighbors), x, y);
        //         // }
            }
        }
    }

    pub fn display_info_textfields(
        &mut self, 
        engine: &Engine,
    ) {
        let doc = mxyz_utils::dom::document();

        let textfield = doc.get_element_by_id("textfield_iter_idx").unwrap();
        textfield.set_inner_html(&format!("iter: {}", engine.config.iter_idx));
        let textfield = doc.get_element_by_id("textfield_frame_idx").unwrap();
        textfield.set_inner_html(&format!("frame: {}", self.config.frame_idx));
    }

    pub fn display_hud(
        &mut self, 
        _engine: &Engine,
    ) {
        let canvas = &mut self.canvases[0];
        canvas.set_font("36px sans-serif");
        canvas.set_stroke_style("white");
        canvas.set_fill_style("white");

        let frame_idx = format!("{}", self.config.frame_idx);
        canvas.fill_text(&frame_idx, 20., 50.);
        // let iter_idx = format!("{}", engine.config.iter_idx); 
        // canvas.fill_text(&iter_idx, 20., 100.);

    }

    pub fn reset(&mut self) {
        self.config.frame_idx = 0;  // TODO this does not reset engine (?)
        for canvas in self.canvases.iter_mut() { canvas.clear(); }
    }
}


pub enum ObjColorMode {
    // None,
    Default,
    Mass,
    Charge,
    Distance,
    Speed,
    HSLPosition,
    HSLVelocity,
}


// TODO only return rgb values, apply alpha later! (from tail_idx)

pub fn get_hsl_from_vec(vec: [f64; 2], alpha: f64) -> String {

    const TAU: f64 = 2. * 3.14159265358;
    let phi = vec[1].atan2(vec[0]) / TAU * 360.;
    let (h, s, l) = (phi, 100, 50);
    format!("hsla({}, {}%, {}%, {})", h, s, l, alpha)

}

pub fn get_obj_color_from_velocity_angle(obj: &Vec<f64>, alpha: f64) -> String {

    get_hsl_from_vec([obj[3], obj[4]], alpha)

}

pub fn get_obj_color_from_position_angle(obj: &Vec<f64>, alpha: f64) -> String {

    get_hsl_from_vec([obj[1], obj[2]], alpha)

}

pub fn get_obj_color_from_speed(obj: &Vec<f64>, alpha: f64) -> String {

    const MAX_SPEED: f64 = 1.5;
    let u = obj[3];
    let v = obj[4];
    let speed = (u.powf(2.) + v.powf(2.)).sqrt();
    let foo = f64::min(1., speed / MAX_SPEED) * 255.;

    // TODO generalize gradients
    let r = foo;
    let g = 255. - (255. * (foo-127.).abs()/128.);  
    let b = 255. - foo;
    format!("rgba({}, {}, {}, {})", r, g, b, alpha)

}

pub fn get_obj_color_from_mass(obj: &Vec<f64>, alpha: f64) -> String {

    const MAX_MASS: f64 = 1.5;
    let m = obj[0];
    let foo = f64::min(1., m / MAX_MASS) * 255.;

    // TODO generalize gradients
    let r = foo;
    let g = 255. - (255. * (foo-127.).abs()/128.);  
    let b = 255. - foo;
    format!("rgba({}, {}, {}, {})", r, g, b, alpha)
    // String::from("rgba(255, 255, 255, 1)")

}

pub fn get_obj_color_from_charge(obj: &Vec<f64>, alpha: f64) -> String {

    const Q_MAX: f64 = 1.; // TODO
    let mut charge = 0f64;
    if obj.len() > 5 {
        charge = obj[5]; // TODO max charge 
    }
    let x = (charge / Q_MAX + 1.) * 255. / 2.;
    let r = x; // flip blue & red
    let g = 255. - (255. * (r-127.).abs()/128.);
    let b = 255. - r;
    format!("rgba({}, {}, {}, {})", r, g, b, alpha)

}

pub fn get_obj_color_from_distance(obj: &Vec<f64>, alpha: f64) -> String {

    const MAX_DIST: f64 = 1.;
    let x = obj[1];
    let y = obj[2];
    let dist = (x.powf(2.) + y.powf(2.)).sqrt();
    let foo = f64::min(1., dist / MAX_DIST) * 255.;

    let r = foo;
    let r = 255. - r; // flip blue & red
    let g = 255. - (255. * (r-127.).abs()/128.);
    let b = 255. - r;
    format!("rgba({}, {}, {}, {})", r, g, b, alpha)

}

pub fn get_obj_color_default(_obj: &Vec<f64>, alpha: f64) -> String {
    format!("rgba(255, 255, 255, {})", alpha)
}


pub mod color_mode;
pub mod tail_variant;


pub enum ObjTailVariant {
    None,
    Line,
    Area,
}


[package]
    name = "mxyz-database"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[dependencies]

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}

[package]
    name = "mxyz-engine"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

# [lib]
#     crate-type = ["cdylib"]

[dependencies]
    # console_error_panic_hook = { version = "0.1.6", optional = true }
    rand = "0.8.4"
    getrandom = { version = "0.2", features = ["js"] }
    # gloo = "0.2.0"
    # js-sys = "0.3.51"
    mxyz-physics = { path="../mxyz-physics" }
    mxyz-utils = { path="../mxyz-utils" }
    # wasm-bindgen = { version = "^0.2", features = ["nightly"] }

# [features]
#     default = ["console_error_panic_hook"]


pub mod variant;
pub mod none;
pub mod periodic;


use crate::state::field::Field;
use crate::config::field::FieldEngineConfig;


pub fn apply(
    _field:  &mut Field,
    _config: &FieldEngineConfig,
) {

}

use crate::state::field::Field;
use crate::config::field::FieldEngineConfig;


pub fn apply(
    _field:  &mut Field,
    _config: &FieldEngineConfig,
) {

}

pub enum FieldBoundaryVariant {
    None,
    Periodic,
}


pub mod field;
pub mod object;


pub mod object;
pub mod wall;


use crate::state::object::ObjFamily;
use crate::config::obj_family::ObjFamilyEngineConfig;


pub fn apply(
    obj_family: &mut ObjFamily,
    config: &ObjFamilyEngineConfig
) {

    // let iter_idx = obj_family.states.len();

    const X_MIN: f64 = -1.;  // TODO make bounds configurable
    const X_MAX: f64 = 1.;
    const Y_MIN: f64 = -1.;
    const Y_MAX: f64 = 1.;

    let obj_length = config.obj_length;
    let objects = &mut obj_family.objects;

    for obj_idx in 0..config.family_size {

        let start_idx = obj_idx * obj_length;

        let obj_slice = &mut objects[start_idx..start_idx+obj_length];

        if obj_slice[1] < X_MIN { 
            obj_slice[1] = -1.;
            obj_slice[3] *= -1.;
        } else if obj_slice[1] > X_MAX {
            obj_slice[1] = 1.;
            obj_slice[3] *= -1.;
        }

        if obj_slice[2] < Y_MIN {  
            obj_slice[2] = -1.;
            obj_slice[4] *= -1.;
        } else if obj_slice[2] > Y_MAX {
            obj_slice[2] = 1.;
            obj_slice[4] *= -1.;
        }

    }

}

use crate::state::object::ObjFamily;
use crate::config::obj_family::ObjFamilyEngineConfig;


pub fn apply(
    obj_family: &mut ObjFamily,
    config: &ObjFamilyEngineConfig
) {

    // let iter_idx = obj_family.states.len();
    let tamper = 0.5;  // TODO  make configurable

    const X_MIN: f64 = -1.;  // TODO make bounds configurable
    const X_MAX: f64 = 1.;
    const Y_MIN: f64 = -1.;
    const Y_MAX: f64 = 1.;

    let obj_length = config.obj_length;
    let objects = &mut obj_family.objects;

    for obj_idx in 0..config.family_size {

        let start_idx = obj_idx * obj_length;

        let obj_slice = &mut objects[start_idx..start_idx+obj_length];

        if obj_slice[1] < X_MIN { 
            obj_slice[1] = -1.;
            obj_slice[3] *= -tamper;
        } else if obj_slice[1] > X_MAX {
            obj_slice[1] = 1.;
            obj_slice[3] *= -tamper;
        }

        if obj_slice[2] < Y_MIN {  
            obj_slice[2] = -1.;
            obj_slice[4] *= -tamper;
        } else if obj_slice[2] > Y_MAX {
            obj_slice[2] = 1.;
            obj_slice[4] *= -tamper;
        }

    }

}

pub mod elastic;
pub mod inelastic;


// use crate::state::object::family::ObjFamily;

pub mod variant;
// use variant::BoundaryVariant;

pub mod none;
pub mod periodic;
pub mod collision;



// pub struct ObjBoundary {

//     pub variant: BoundaryVariant,

// }
// impl ObjBoundary {

//     pub fn new(
//         variant: BoundaryVariant,
//     ) -> Self {

//         ObjBoundary {
//             variant,
//         }

//     }

//     pub fn apply(
//         &mut self, 
//         obj_family: &mut ObjFamily
//     ) {

//         let applier = match self.variant {
//             BoundaryVariant::None => none::apply,
//             BoundaryVariant::Periodic => periodic::apply,
//             BoundaryVariant::WallCollisionElastic => collision::wall::elastic::apply,
//             BoundaryVariant::WallCollisionInelastic => collision::wall::inelastic::apply,
//         };

//         applier(obj_family);

//     }

// }


use crate::state::object::ObjFamily;
use crate::config::obj_family::ObjFamilyEngineConfig;


pub fn apply(
    _obj_family: &mut ObjFamily,
    _config: &ObjFamilyEngineConfig
) {

}

use crate::state::object::ObjFamily;
use crate::config::obj_family::ObjFamilyEngineConfig;


pub fn apply(
    obj_family: &mut ObjFamily,
    config: &ObjFamilyEngineConfig
) {

    // let iter_idx = obj_family.states.len();

    const X_MIN: f64 = -1.;  // TODO make bounds configurable
    const X_MAX: f64 = 1.;
    const Y_MIN: f64 = -1.;
    const Y_MAX: f64 = 1.;

    let obj_length = config.obj_length;
    let objects = &mut obj_family.objects;

    for obj_idx in 0..config.family_size {

        let start_idx = obj_idx * obj_length;

        let obj_slice = &mut objects[start_idx..start_idx+obj_length];

        if obj_slice[1] < X_MIN { 
            obj_slice[1] = 1.;
        } else if obj_slice[1] > X_MAX {
            obj_slice[1] = -1.;
        }

        if obj_slice[2] < Y_MIN {  
            obj_slice[2] = 1.;
        } else if obj_slice[2] > Y_MAX {
            obj_slice[2] = -1.;
        }

    }

}

pub enum ObjBoundaryVariant {
    None,
    Periodic,
    WallCollisionElastic,
    WallCollisionInelastic,
    // ObjCollisionElastic,
    // ObjCollisionInelastic,
}

#![allow(non_snake_case)]

use crate::integrator::field::variant::FieldIntegratorVariant;
// use crate::state::field::variant::FieldVariant;
use crate::interaction::field::field::FieldFieldInteraction;
use crate::interaction::field::object::FieldObjInteraction;
use crate::boundary::field::variant::FieldBoundaryVariant;
use crate::state::field::relevant_cells::FieldRelevantCells;


pub struct FieldEngineConfig {

    pub integrators:        Vec<FieldIntegratorVariant>,

    pub id:                 usize,

    pub dimensions:         Vec<usize>,
    // pub dimensionality:     FieldDimensionalityVariant,

    pub field_interactions: Vec<FieldFieldInteraction>,
    pub obj_interactions:   Vec<FieldObjInteraction>,
    pub integrator:         FieldIntegratorVariant,
    pub boundary:           FieldBoundaryVariant,

    pub relevant_cells:     FieldRelevantCells,
    // pub field_variant:      FieldVariant,
    // pub cell_type:          FieldCellType,  // TODO bool / int / float

}
impl FieldEngineConfig {

    pub fn new(
        id: usize, 
        // dt: f64,
    ) -> Self {

        // let DEFAULT_FIELD_VARIANT       = FieldVariant::Ising;
        let DEFAULT_DIMENSIONS          = Vec::new();
        // let DEFAULT_DIMENSIONALITY      = FieldDimensionalityVariant::Uninitialized;
        let DEFAULT_INTEGRATOR          = FieldIntegratorVariant::CellAuto;
        let DEFAULT_FIELD_INTERACTIONS  = Vec::new();
        let DEFAULT_OBJ_INTERACTIONS    = Vec::new();
        let DEFAULT_RELEVANT_CELLS      = FieldRelevantCells::Entire;
        let DEFAULT_BOUNDARY_VARIANT    = FieldBoundaryVariant::None;

        FieldEngineConfig {
        
            integrators:        Vec::new(),

            id,
            // field_variant:      DEFAULT_FIELD_VARIANT,
            dimensions:         DEFAULT_DIMENSIONS,
            field_interactions: DEFAULT_FIELD_INTERACTIONS,
            obj_interactions:   DEFAULT_OBJ_INTERACTIONS,
            integrator:         DEFAULT_INTEGRATOR,
            boundary:           DEFAULT_BOUNDARY_VARIANT,
            relevant_cells:     DEFAULT_RELEVANT_CELLS,
        }
    }

    // pub fn set_resolution(&mut self, resolution: Vec<usize>) {
    //     self.dimensionality = match resolution.len() {
    //         _ => FieldDimensionalityVariant::Uninitialized,
    //     };
    //     self.dimensions = resolution;
    // }
}


// enum StateVector {
//     Float(Vec<f64>),
//     Vector(Vec<Vec<T>>),
// }


// pub enum Field {
//     VectorField(VectorField),
//     BooleanField(BooleanField),
//     F64Field(F64Field),
// }


// pub enum FieldDimensionalityVariant {
//     Uninitialized,
//     OneDimensional,
//     TwoDimensional,
//     ThreeDimensional,
// }

pub mod field;
pub mod obj_family;

use field::FieldEngineConfig;
use obj_family::ObjFamilyEngineConfig;


pub struct EngineConfig {

    pub sim_id:         String,
    pub fields:         Vec<FieldEngineConfig>,
    pub obj_families:   Vec<ObjFamilyEngineConfig>,
    pub is_paused:      bool,
    pub dt:             f64,
    pub iter_idx:       usize,

}
impl EngineConfig {

    pub fn new(sim_id: &str) -> Self {

        const DEFAULT_TIME_STEP_SIZE: f64 = 0.01;

        let fields = Vec::new();
        let obj_families = Vec::new();

        EngineConfig {
            sim_id:         String::from(sim_id),
            fields:         fields,
            obj_families:   obj_families,
            is_paused:      false,
            dt:             DEFAULT_TIME_STEP_SIZE,
            iter_idx:       0,
        }
    }
}

#![allow(non_snake_case)]

// use crate::integrator::object::ObjIntegrator;
// use crate::integrator::object::IntegratorVariant as ObjIntegratorVariant;
use crate::state::object::variant::ObjVariant;
use crate::state::object::attribute::ObjAttribute;
// use crate::boundary::object::ObjBoundary;
use crate::boundary::object::variant::ObjBoundaryVariant;
use crate::integrator::object::variant::ObjIntegratorVariant;

use crate::interaction::object::field::ObjFieldInteraction;
use crate::interaction::object::object::ObjObjInteraction;


pub struct ObjFamilyEngineConfig {

    pub integrators:        Vec<ObjIntegratorVariant>,


    pub id:                 usize,
    // matrix for interactions (?)
    // pub family_size: usize,
    pub family_size:        usize,
    pub obj_variant:        ObjVariant,
    pub obj_attributes:     Vec<ObjAttribute>,
    pub integrator:         ObjIntegratorVariant,
    pub field_interactions: Vec<ObjFieldInteraction>,
    pub obj_interactions:   Vec<ObjObjInteraction>,
    pub boundary:           ObjBoundaryVariant,
    pub obj_length:         usize,

}
impl ObjFamilyEngineConfig {

    pub fn new(id: usize) -> Self {

        let DEFAULT_ATTRIBUTES = Vec::from([
            ObjAttribute::Mass,
            ObjAttribute::PosX,
            ObjAttribute::PosY,
            ObjAttribute::VelX,
            ObjAttribute::VelY,
            // ObjAttribute::Charge,
        ]);
        let DEFAULT_OBJ_LENGTH = DEFAULT_ATTRIBUTES.len();

        let DEFAULT_OBJ_INTERACTIONS = Vec::from([
            ObjObjInteraction::ForceNewtonianGravity,
        ]);
        let DEFAULT_FIELD_INTERACTIONS = Vec::from([]);

        let DEFAULT_INTEGRATOR_VARIANT = ObjIntegratorVariant::EulerExplicit;
        // let DEFAULT_INTEGRATOR = ObjIntegrator::new(
        //     DEFAULT_INTEGRATOR_VARIANT, dt, DEFAULT_FIELD_INTERACTIONS, DEFAULT_OBJ_INTERACTIONS,
        // );

        let DEFAULT_BOUNDARY_VARIANT = ObjBoundaryVariant::None;
        // let DEFAULT_BOUNDARY = ObjBoundary::new(
        //     DEFAULT_BOUNDARY_VARIANT,
        // );
    
        ObjFamilyEngineConfig {

            integrators:        Vec::new(),

            id,
            family_size:        0,  // TODO increment on obj-add
            obj_variant:        ObjVariant::Body,
            obj_attributes:     DEFAULT_ATTRIBUTES,
            integrator:         DEFAULT_INTEGRATOR_VARIANT,
            field_interactions: DEFAULT_FIELD_INTERACTIONS,
            obj_interactions:   DEFAULT_OBJ_INTERACTIONS,
            boundary:           DEFAULT_BOUNDARY_VARIANT,
            obj_length:         DEFAULT_OBJ_LENGTH,
        }
    }
}

#![allow(non_snake_case)]

use rand::Rng;

use crate::state::State;
use crate::state::field::Field;

use crate::interaction::field::field::FieldFieldInteraction;
// use crate::interaction::field::object::FieldObjInteraction;

use crate::config::EngineConfig;
use crate::config::field::FieldEngineConfig;
// use crate::state::field::variant::FieldVariant;
use crate::state::field::relevant_cells::FieldRelevantCells;

use mxyz_physics::thermo_dynamics::boltzmann_prob;
use crate::state::get_cell_idx_from_coords;



pub fn apply_periodic_bounds(idx: i32, dimension: i32) -> i32 {
    if idx < 0                  { idx + dimension }  // 0
    else if idx >= dimension    { idx - dimension }  // dimension - 1
    else                        { idx }
}


pub fn get_flip_energy(
    iter_idx: usize,
    field: &mut Field,
    field_conf: &FieldEngineConfig, 
    states: &Vec<State>,
    x: usize, 
    y: usize,
    z: usize
) -> f64 {
    let (B, J, mu) = (0., 1., 1.);

    let dimensions = &field_conf.dimensions;
    let dim_x = dimensions[0]; // TODO handle 3D
    let dim_y = dimensions[1]; // TODO handle 3D

    let cell_idx = get_cell_idx_from_coords(x, y, z, &field, &field_conf);
    let cell = field.entries[cell_idx]; // TODO generalize to 3D
    let mut dE = 0.;
    for dx in 0..3 {
        for dy in 0..3 {
            // prevent self-interaction
            if (dx == 1) && (dy == 1) { continue; }
            // get coordinates of other cell
            let X = apply_periodic_bounds(x as i32 + dx-1, dim_x as i32) as usize;
            let Y = apply_periodic_bounds(y as i32 + dy-1, dim_y as i32) as usize;
            // get other cell 
            let cell_idx = get_cell_idx_from_coords(X, Y, 0, &field, &field_conf);
            let other = states[iter_idx].fields[field.id].entries[cell_idx];
            // add spin-spin interaction to flip energy
            dE += J*cell*other;
        }
    }
    // add spin-field interaction to flip energy
    dE + mu*cell*B
}


pub fn get_nr_of_neighbors(
    field: &Field, 
    field_conf: &FieldEngineConfig, 
    x: usize, y: usize, _z: usize,
) -> usize {
    let dimensions = &field_conf.dimensions;
    let (dim_x, dim_y, _dim_z) = (dimensions[0], dimensions[1], dimensions[2]);

    let mut nr_of_neighbors = 0;
    for dx in [-1, 0, 1] {
        for dy in [-1, 0, 1] {
           // prevent self-interaction
           if (dx == 0) && (dy == 0) { continue; }
           // get coordinates of other cell
           let X = apply_periodic_bounds(x as i32 + dx, dim_x as i32);
           let Y = apply_periodic_bounds(y as i32 + dy, dim_y as i32);
           let cell_idx = (Y * dim_x as i32 + X) as usize;
           // increment number of neighbors
           if field.entries[cell_idx] == 1. { nr_of_neighbors += 1; }
        }
    }
    nr_of_neighbors
}


pub fn step_cell(
    field: &mut Field,
    config: &EngineConfig,
    states: &Vec<State>,
    x: usize, 
    y: usize, 
    z: usize,
) {
    // get about field info from conf
    let field_conf = &config.fields[field.id];
    let cell_idx = get_cell_idx_from_coords(x, y, z, &field, &field_conf);
    let last_field = &states[config.iter_idx].fields[field.id];
    // numerical parameters TODO
    let T = 0.01;
    // math setup
    let mut rng = rand::thread_rng();

    // FIELD-FIELD INTERACTIONS
    let field_interactions = &field_conf.field_interactions;
    for interaction in field_interactions.iter() {
        match interaction {
            FieldFieldInteraction::Ising => {
                let dE = get_flip_energy(
                    config.iter_idx, field, &field_conf, &states, x, y, z
                );
                // check if spin should be flipped
                let flip = if dE < 0. { true } else {
                    let rand: f64 = rng.gen();
                    if rand < boltzmann_prob(dE, T) { true } else { false }
                };
                // flip spin
                if flip { field.entries[cell_idx] *= -1.; }  // TODO generalize to 3D

            }, FieldFieldInteraction::GameOfLife => {

                let nr_of_neighbors = get_nr_of_neighbors(&last_field, &field_conf, x, y, 0);
                let next = match nr_of_neighbors {
                    2 => if field.entries[cell_idx] == 1. { 1. } else { 0. }, 
                    3 => 1., 
                    _ => 0.
                };
                field.entries[cell_idx] = next;

            }, _ => {}
        }
    }
    // FIELD-OBJ INTERACTIONS
    let _obj_interactions = &config.fields[field.id].obj_interactions;

    // ...
}


pub fn step(
    field: &mut Field,
    states: &Vec<State>,
    config: &EngineConfig,
) {
    // math setup
    let mut rng = rand::thread_rng();
    // get info about field from config
    let field_conf = &config.fields[field.id];
    let dimensions = &field_conf.dimensions;
    let (dim_x, dim_y, dim_z) = (dimensions[0], dimensions[1], dimensions[2]); // TODO handle 3D
    let _field_interactions = &field_conf.field_interactions;
    let _obj_interactions = &field_conf.obj_interactions;

    match config.fields[field.id].relevant_cells {

        FieldRelevantCells::Entire => {
            for z in 0..dim_z {
                for y in 0..dim_y {
                    for x in 0..dim_x {
                        step_cell(field, config, states, x, y, z);
                    }
                }
            }

        }, FieldRelevantCells::RandomBatch => {
            const BATCH_SIZE: usize = 1000; // TODO where to get batch-size from?
            for _ in 0..BATCH_SIZE {
                let x = rng.gen_range(0..dim_x);
                let y = rng.gen_range(0..dim_y);
                let z = 0; // TODO rng.gen_range(0..dim_z);
                step_cell(field, config, states, x, y, z);
            }
        }
    }
}


use crate::state::object::variant::ObjVariant;

use crate::interaction::object::object::forces as obj_obj_forces; // TODO rename -> obj_obj_interactions


pub fn get(
    field:  &mut crate::state::field::Field,
    states: &Vec<crate::state::State>,
    config: &crate::config::EngineConfig,
) {
    let iter_idx = config.iter_idx;
    let current_state = &states[iter_idx];
    let epsilon = 0.; // TODO

    let field_conf = &config.fields[field.id];
    let field_dimensions = &field_conf.dimensions;

    for y_idx in 0..field_dimensions[0] {
        for x_idx in 0..field_dimensions[1] {  // TODO generalize to 3D / nD

            let x = (2.*(x_idx as f64 + 0.5) / field_dimensions[0] as f64) - 1.;  // TODO zoom
            let y = (2.*(y_idx as f64 + 0.5) / field_dimensions[1] as f64) - 1.;
            let (m, u, v, q) = (1., 0., 0., 1.);
            let field_obj = [m, x, y, u, v, q];
            let mut force = Vec::from([0., 0.]);

            for obj_family in &current_state.obj_families {
                let family_config = &config.obj_families[obj_family.id];
                if matches!(family_config.obj_variant, ObjVariant::Particle) { continue }
        
                for obj_idx in 0..family_config.family_size {
        
                    let obj_length = family_config.obj_length;
                    let obj_indices = obj_idx*obj_length..(obj_idx+1)*obj_length;
                    let obj = &obj_family.objects[obj_indices];
        
                    let force_getter = match config.sim_id.as_str() {
                        "lennard-jones" => obj_obj_forces::lennard_jones::force,
                        "charge-interaction" => obj_obj_forces::coulomb::force,
                        _ => obj_obj_forces::newtonian_gravity::force,
                    };
                    let f = force_getter(
                        &field_obj, &obj, epsilon,
                    );
                    force[0] += f[0];
                    force[1] += f[1];
                }
            }
        }
    }
}


pub mod cell_auto;
pub mod from_objects;
pub mod variant;
use variant::FieldIntegratorVariant;

// use crate::boundary::field::variant::FieldBoundaryVariant;
// use crate::boundary::field as boundary;
use crate::integrator::field as integrator;


pub fn step(
    field:      &mut crate::state::field::Field,
    states:     &Vec<crate::state::State>,
    config:     &crate::config::EngineConfig,
) {
    // apply integration scheme
    let apply_integrator = match config.fields[field.id].integrator {
        FieldIntegratorVariant::CellAuto    => integrator::cell_auto::step,
        FieldIntegratorVariant::FromObjects => integrator::from_objects::get,
    };
    apply_integrator(field, &states, &config);

    // apply boundaries
    // let apply_boundaries = match config.fields[field.id].boundary {
    //     FieldBoundaryVariant::None          => boundary::none::apply,
    //     FieldBoundaryVariant::Periodic      => boundary::periodic::apply,
    // };
    // apply_boundaries(field, &config.fields[field.id]); // TODO update only rel. cells
}


pub enum FieldIntegratorVariant {
    CellAuto,
    FromObjects,  // TODO using which interaction?
}


pub mod field;
pub mod object;


use crate::state::State;
use crate::state::object::variant::ObjVariant;
use crate::state::object::ObjFamily;

use crate::interaction::object::object::forces;
// use crate::interaction::object::field::ObjFieldInteraction;
use crate::interaction::object::object::ObjObjInteraction;

use crate::config::EngineConfig;


pub fn step(
    family: &mut ObjFamily,
    states: &Vec<State>,
    config: &EngineConfig,
) {

    // skip if object-variant is "static"
    let obj_variant = &config.obj_families[family.id].obj_variant;
    if matches!(obj_variant, ObjVariant::Static) { return () }
    // get numerical parameters
    let dt = config.dt;
    let epsilon = 0.05; // TODO: get from obj family? (& saved externally?)
    let iter_idx = config.iter_idx;
    // get info about family from config
    let fam_conf = &config.obj_families[family.id];
    let obj_length = fam_conf.obj_length;
    let obj_interactions = &fam_conf.obj_interactions;
    // loop over objects
    for obj_idx in 0..fam_conf.family_size { 
        // get slice representing object
        let obj_indices = obj_idx*obj_length..(obj_idx+1)*obj_length;
        let obj_slice = &mut family.objects[obj_indices];
        // loop over families
        for other_family in &states[iter_idx].obj_families {
            // skip if other-object-variant is "particle"
            let other_variant = &config.obj_families[other_family.id].obj_variant;
            if matches!(other_variant, ObjVariant::Particle) { continue }

            // TODO get relevant neighbor: tree / sectors ?

            // get info about other family from config
            let other_conf = &config.obj_families[other_family.id];
            let other_length = other_conf.obj_length;
            // loop over objects   TODO loop from 0 to obj_idx, update both bodies!
            for other_idx in 0..other_conf.family_size { 
                // prevent self-interaction
                if family.id == other_family.id { if obj_idx == other_idx { continue } }
                // get slice representing other object in state vec
                let other_indices = other_idx*other_length..(other_idx+1)*other_length;
                let other_slice = &other_family.objects[other_indices];
                
                // loop over interactions
                for interaction in obj_interactions.iter() {

                    // TODO check if both fams have this interaction
                    // TODO handle forces different from other interactions

                    // calculate force
                    let force_getter = match interaction {
                        ObjObjInteraction::ForceNewtonianGravity => forces::newtonian_gravity::force,
                        ObjObjInteraction::ForceCoulomb          => forces::coulomb::force,
                        ObjObjInteraction::ForceLennardJones     => forces::lennard_jones::force,
                    };
                    let force = force_getter( obj_slice, other_slice, epsilon );
                    // update velocities
                    obj_slice[3] += force[0] / obj_slice[0] * dt;
                    obj_slice[4] += force[1] / obj_slice[0] * dt;
                }
            }
        }

        // for field in ...
        //     for interaction in field_interactions.iter() {
        //         // TODO even do this here? maybe other new integrator..?
        //     }
        // }

        // update positions 
        obj_slice[1] += obj_slice[3] * dt;
        obj_slice[2] += obj_slice[4] * dt;
    }
}


pub mod explicit;
pub mod implicit;


pub mod euler;
pub mod runge_kutta;
pub mod verlet;
pub mod leapfrog;

pub mod variant;
use variant::ObjIntegratorVariant;

use crate::boundary::object::variant::ObjBoundaryVariant;
use crate::boundary::object as boundary;
use crate::integrator::object as integrator;


pub fn step(
    family:     &mut crate::state::object::ObjFamily,
    states:     &Vec<crate::state::State>,
    config:     &crate::config::EngineConfig,
) {
    let apply_integrator = match config.obj_families[family.id].integrator {
        ObjIntegratorVariant::EulerExplicit => integrator::euler::explicit::step,
        // ObjIntegratorVariant::EulerImplicit => integrator::euler::implicit::step,
        // ObjIntegratorVariant::RungeKutta2   => integrator::runge_kutta::order_2::step,
        // ObjIntegratorVariant::RungeKutta4   => integrator::runge_kutta::order_4::step,
        // ObjIntegratorVariant::Verlet        => integrator::verlet::step,
        // ObjIntegratorVariant::LeapFrog      => integrator::leapfrog::step,
        // ObjIntegratorVariant::Rails         => integrator::rails::step,
    };
    apply_integrator(family, states, config);

    let apply_boundaries = match config.obj_families[family.id].boundary {
        ObjBoundaryVariant::None                   => boundary::none::apply,
        ObjBoundaryVariant::Periodic               => boundary::periodic::apply,
        ObjBoundaryVariant::WallCollisionElastic   => boundary::collision::wall::elastic::apply,
        ObjBoundaryVariant::WallCollisionInelastic => boundary::collision::wall::inelastic::apply,
    };
    apply_boundaries(family, &config.obj_families[family.id]);
}


pub mod order_2;
pub mod order_4;

pub enum ObjIntegratorVariant {
    EulerExplicit,
    // EulerImplicit,
    // RungeKutta2,
    // RungeKutta4,
    // LeapFrog,
    // Verlet,
}


pub fn apply() {

}

pub mod diffusion;
pub mod electro_magnetic;
pub mod game_of_life;
pub mod ising;


pub enum FieldFieldInteraction {
    Diffusion,
    ElectroMagnetic,
    GameOfLife,
    Ising,
}


pub mod external;
pub mod field;
pub mod object;


pub enum FieldObjInteraction {

}


pub mod field;
pub mod object;



pub mod forces;

pub enum ObjFieldInteraction {
    // Electric,
    // ElectroMagnetic,
    // Gravitational,
    // Magnetic,
}


pub mod external;
pub mod field;
pub mod object;


pub fn force(
    object: &[f64], 
    other: &[f64], 
    epsilon: f64
) -> Vec<f64> {

    // atributes of object
    let x_1 = object[1];
    let y_1 = object[2];
    let q_1 = object[5];

    // atributes of other object
    let x_2 = other[1];
    let y_2 = other[2];
    let q_2 = other[5];
    
    // distance & force
    let dx = x_2 - x_1;
    let dy = y_2 - y_1;
    let r = ( dx.powf(2.) + dy.powf(2.) ).sqrt();
        // define: k -> 1
    let force = -(q_1*q_2) * r/( r.powf(2.) + epsilon.powf(2.) ).powf(1.5);
    let force_x = force * dx/r;
    let force_y = force * dy/r;

    Vec::from([force_x, force_y])
}


pub fn force(
    object: &[f64], 
    other: &[f64], 
    epsilon: f64
) -> Vec<f64> {

    // atributes of object
    let x_1 = object[1];
    let y_1 = object[2];
    // atributes of other object
    let x_2 = other[1];
    let y_2 = other[2];
    
    // distance & force
    let dx = x_2 - x_1;
    let dy = y_2 - y_1;
    let r2 = dx.powf(2.) + dy.powf(2.);
    let r = ( r2 + epsilon.powf(2.) ).sqrt();


    let (sigma, epsilon) = (0.1, 1.);  // TODO make changeable, TODO rename epsilon (duplicate name)

    // V = 4 eps ( (s/r)^12 - (s/r)^6 )
    let force = 4. * epsilon * sigma * (
           6. * (r / sigma).powf(- 7.)
         -12. * (r / sigma).powf(-13.) 
    );
    let force_x = force * dx/r;
    let force_y = force * dy/r;

    Vec::from([force_x, force_y])
}


pub mod lennard_jones;
pub mod coulomb;
pub mod newtonian_gravity;


pub fn force(
    object: &[f64], 
    other: &[f64], 
    epsilon: f64
) -> Vec<f64> {

    // atributes of object
    let m_1 = object[0];
    let x_1 = object[1];
    let y_1 = object[2];
    // atributes of other object
    let m_2 = other[0];
    let x_2 = other[1];
    let y_2 = other[2];
    
    // distance & force
    let (dx, dy) = (x_2-x_1, y_2-y_1);
    let r = ( dx.powf(2.) + dy.powf(2.) ).sqrt();
        // define: G -> 1
    let force = (m_1*m_2) * r/( r.powf(2.) + epsilon.powf(2.) ).powf(1.5);
    let force_x = force * dx/r;
    let force_y = force * dy/r;

    Vec::from([force_x, force_y])
}


pub mod boid;
pub mod collision;
pub mod forces;


pub enum ObjObjInteraction {
    // BoidAlignment,
    // BoidCohesion,
    // BoidSeparation,
    // CollisionInelastic,
    // CollisionElastic,
    // EpidemicSIR,
    ForceCoulomb,
    ForceNewtonianGravity,
    ForceLennardJones,
}


pub mod boundary;
pub mod config;
pub mod integrator;
pub mod interaction;
pub mod partitioner;
pub mod state;
pub mod system;


pub struct Engine {
        sim_id:         String,
    pub config:         config::EngineConfig,
    pub states:         Vec<state::State>,
    pub systems:        Vec<system::System>,
}

impl Engine {
    // create new Engine struct instance
    pub fn new(sim_id: &str) -> Self {
        Engine { 
            sim_id:     String::from(sim_id),
            config:     config::EngineConfig::new(sim_id),
            states:     Vec::new(),
            systems:    Vec::new(),
        }
    }
    // initialize state vector
    pub fn init(&mut self) { 
        self.states = Vec::from([state::State::new(&self.sim_id, &mut self.config)]);
    }
    // get state-vector for next time-step
    pub fn step(&mut self) {
        // clone state-vector
        let mut next_state = self.states[self.config.iter_idx].clone();
        // step fields & obj-families
        for mut field in next_state.fields.iter_mut() {
            integrator::field::step(&mut field, &self.states, &self.config);
        }
        for mut family in next_state.obj_families.iter_mut() {
            integrator::object::step(&mut family, &self.states, &self.config);

        }
        for system in self.systems.iter_mut() {
            match system {
                crate::system::System::Field(field) => {
                    use crate::integrator::field::variant::FieldIntegratorVariant;

                    // let state_vector    = &mut field.state_vector;
                    let config          = &field.config;

                    // for i in match state_vector {
                    //     crate::system::StateVector::Bool(e) => {e},
                    //     crate::system::StateVector::Float(e) => {e},
                    // } {}

                    // let old_state       = state_vector[0].clone();

                    for integrator in &config.integrators {
                        match integrator {
                            FieldIntegratorVariant::CellAuto => {
                                // for interaction
                            },
                            FieldIntegratorVariant::FromObjects => {},
                        }
                    }
                }, crate::system::System::ObjectFamily(obj_fam) => {
                    use crate::integrator::object::variant::ObjIntegratorVariant;

                    // let state_vector    = &mut obj_fam.state_vector;
                    let config          = &obj_fam.config;

                    for integrator in &config.integrators {
                        match integrator {
                            ObjIntegratorVariant::EulerExplicit => {

                            },
                            // ObjIntegratorVariant::EulerImplicit => {},
                            // ObjIntegratorVariant::RungeKutta2   => {},
                            // ObjIntegratorVariant::RungeKutta4   => {},
                            // ObjIntegratorVariant::LeapFrog      => {},
                            // ObjIntegratorVariant::Verlet        => {},
                        }
                    }
                }, 
            }
        }

        // update state-vector & increment iteration-index
        self.states.push(next_state);
        self.config.iter_idx += 1;
    }
    // reset Engine struct instance
    pub fn reset(&mut self) { 
        self.init();
        self.config.iter_idx = 0;
    }
}


// use crate::integrator::field::FieldIntegrator;
// // use crate::integrator::object::ObjIntegrator;
// use crate::boundary::object::ObjBoundary;
// // use crate::boundary::field::FieldBoundary;   // TODO



// pub struct EngineSetup {

//     pub field_integrators: Vec<FieldIntegrator>,   // one for each field
//     // pub obj_integrators: Vec<ObjIntegrator>, // one for each object family
//     // pub field_boundaries: Vec<Vec<FieldBoundary>>,         // TODO
//     pub obj_boundaries: Vec<ObjBoundary>,
//     // pub obj_interactions: Vec<ObjInteractionSetup>;  // TODO
//     // pub field_interactions: Vec<FieldInteractionSetup>;    // TODO

// }
// impl EngineSetup {

//     pub fn new() -> Self {
//         EngineSetup {
//             field_integrators:  Vec::new(),  // TODO make Vec<Vec<FieldIntegrator>> ?
//             // obj_integrators: Vec::new(), 
//             obj_boundaries:  Vec::new(),
//         }
//     }
// }


pub mod relevant_cells;
pub mod variant;


#[derive(Clone)]
pub struct Field {

    pub id: usize,
    pub entries: Vec<f64>,

}

impl Field {

    pub fn new(id: usize) -> Self {
        Field { 
            id, 
            entries: Vec::new(),
        }
    }
}



// enum FieldCell {
//     Bool(bool),
//     Float(f64),
//     Vector(Vec<Vector>),
// }

// pub struct Vector {

// }

pub enum FieldNeighborhood {
    Moore,
    Neumann,
}


pub enum FieldRelevantCells {
    RandomBatch,
    Entire,
}


pub enum FieldVariant {
    Ising,
    GameOfLife,
}

#![allow(non_snake_case)]

use rand::Rng;

pub mod field;
pub mod object;
use field::Field;
use object::ObjFamily;

use crate::config::EngineConfig;
use crate::config::field::FieldEngineConfig;
use crate::config::obj_family::ObjFamilyEngineConfig;

use mxyz_physics::classical_mechanics::newtonian_gravity::kepler_velocity;


pub fn get_cell_idx_from_coords(
    x: usize,
    y: usize,
    z: usize,
    _field: &Field,
    field_conf: &FieldEngineConfig,
) -> usize {
    let dimensions = &field_conf.dimensions;
    let (dim_x, dim_y, _dim_z) = (dimensions[0], dimensions[1], dimensions[2]);
    z*dim_x*dim_y + y*dim_x + x
}


#[derive(Clone)]
pub struct State {

    pub obj_families: Vec<ObjFamily>,
    pub fields:       Vec<Field>,

}
impl State {

    pub fn new( 
        sim_id: &str, 
        engine_conf: &mut EngineConfig 
    ) -> Self {
        State {
            obj_families: Self::setup_objects(sim_id, engine_conf),
            fields:       Self::setup_fields( sim_id, engine_conf),
        }
    }

    pub fn setup_objects(
        sim_id: &str,
        engine_conf: &mut EngineConfig,
    ) -> Vec<ObjFamily> {

        // object-specific imports
        use object::attribute::ObjAttribute;
        use object::variant::ObjVariant;
        use crate::boundary::object::variant::ObjBoundaryVariant;
        // use crate::integrator::object::variant::ObjIntegratorVariant;
        // use crate::interaction::object::field::ObjFieldInteraction;
        use crate::interaction::object::object::ObjObjInteraction;

        // math stuff
        const TAU: f64 = 2.*3.14159265358979;
        let mut rng = rand::thread_rng();

        // default values
        const M: f64 = 1.;
        let DT = engine_conf.dt;  // 0.01

        let mut obj_families: Vec<ObjFamily> = Vec::new();
        match sim_id {

            "3body-moon" => {

                let (m,   r) = (0.1,   0.8);  // Earth
                let (mu, dr) = (0.001, 0.1);  // Moon

                let id              = 0;
                let mut family      = ObjFamily::new(id);
                let mut conf        = ObjFamilyEngineConfig::new(id);
                conf.obj_variant    = ObjVariant::Static;
                let (x, y, u, v)    = (0., 0., 0., 0.);
                let object = Vec::from([M, x, y, u, v]);
                family.add_object(&object, &mut conf);
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

                let id              = 1;
                let mut family      = ObjFamily::new(id);
                let mut conf        = ObjFamilyEngineConfig::new(id);
                conf.obj_variant    = ObjVariant::Body;
                let (x, y, u, v)    = (r, 0., 0., kepler_velocity(M, r));
                let object = Vec::from([m, x, y, u, v]);
                family.add_object(&object, &mut conf);
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

                let id              = 2;
                let mut family      = ObjFamily::new(id);
                let mut conf        = ObjFamilyEngineConfig::new(id);
                conf.obj_variant    = ObjVariant::Particle;
                let (x, y, u, v)    = (r+dr, 0., 0., v);
                let object = Vec::from([mu, x, y, u, v+kepler_velocity(m, dr)]);
                family.add_object(&object, &mut conf);
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "nbody-flowers" => {

                // SATTELITES  (particles)
                // ===============================================================================

                let id = 0;
                let mut family      = ObjFamily::new(id);
                let mut conf        = ObjFamilyEngineConfig::new(id);
                conf.obj_variant    = ObjVariant::Particle;

                let (R, speed, nr_of_objects) = (0.85, 0.7, 32);
                for obj_idx in 0..nr_of_objects {
                    // let rand: f64 = rng.gen(); let phi = TAU * rand;
                    let phi = obj_idx as f64 / nr_of_objects as f64 * TAU;
                    let x =      R * phi.cos();
                    let y =      R * phi.sin();
                    let u = -speed * phi.sin();
                    let v =  speed * phi.cos();

                    let object = Vec::from([0.01, x, y, u, v]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

                // STAR  (static)
                // ===============================================================================

                let id = 1;
                let mut family      = ObjFamily::new(id);
                let mut conf        = ObjFamilyEngineConfig::new(id);
                conf.obj_variant    = ObjVariant::Static;

                let object = Vec::from([1., 0., 0., 0., 0.]);
                family.add_object(&object, &mut conf);

                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "nbody-asteroids" => {

                engine_conf.dt = 0.5 * DT;
                let (nr_of_stars, nr_of_objects) = (2, 1000);
                let m = 1.0;

                // ASTEROID BELT  (particle)
                // ===============================================================================

                let id = 0;
                let mut family      = ObjFamily::new(id);
                let mut conf        = ObjFamilyEngineConfig::new(id);
                conf.obj_variant    = ObjVariant::Particle;

                // let R = 0.85;
                let W = 0.;
                let R = 0.55;
                // let W = 0.2;
                let speed = (nr_of_stars as f64 * 1.2 * M / R).powf(0.5);

                for obj_idx in 0..nr_of_objects {
                    let rand: f64 = rng.gen();
                    // let phi = TAU * rand;
                    let phi = obj_idx as f64 / nr_of_objects as f64 * TAU;
                    let dR = rand * W;

                    let x = (R+dR) * phi.cos();
                    let y = (R+dR) * phi.sin();
                    let u = -speed * phi.sin();
                    let v = speed * phi.cos();

                    let object = Vec::from([m, x, y, u, v]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

                // STELLAR BINARY
                // ===============================================================================

                let id = 1;
                let mut family  = ObjFamily::new(id);
                let mut conf    = ObjFamilyEngineConfig::new(id);

                let R: f64 = 0.15;
                let speed = match nr_of_stars {
                    1 => 0.,
                    2 => 0.7*(M / (2.*R) as f64).sqrt(),
                    _ => (M * (nr_of_stars-1) as f64 / (2.*R)).powf(0.5)
                };
                for star_idx in 0..nr_of_stars {
                    let phi = star_idx as f64 / nr_of_stars as f64 * TAU;
                    let x =      R * phi.cos();
                    let y =      R * phi.sin();
                    let u = -speed * phi.sin();
                    let v =  speed * phi.cos();
                    let object = Vec::from([M, x, y, u, v]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "3body-fig8" => {

                let id = 0;
                let mut family  = ObjFamily::new(id);
                let mut conf    = ObjFamilyEngineConfig::new(id);

                let xs = [ 0.7775727187509279270,  0.,                    -0.7775727187509279270];
                let ys = [ 0.6287930240184685937,  0.,                    -0.6287930240184685937];
                let us = [-0.06507160612095737318, 0.1301432122419148851, -0.06507160612095737318];
                let vs = [ 0.6324957346748190101, -1.264991469349638020,   0.6324957346748190101]; 

                for body_idx in 0..3 {
                    let (x0, y0) = (xs[body_idx], ys[body_idx]);
                    let (u0, v0) = (us[body_idx], vs[body_idx]);
                    let object = Vec::from([M, x0, y0, u0, v0]);
                    family.add_object(&object, &mut conf);
                }

                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "nbody-cloud" => {

                let id = 0;
                let mut family  = ObjFamily::new(id);
                let mut conf    = ObjFamilyEngineConfig::new(id);

                let (speed, nr_of_objects) = (0., 10);
                for _obj_idx in 0..nr_of_objects {
                    let rand: f64 = rng.gen(); 
                    let rand2: f64 = rng.gen(); 
                    let rand3: f64 = rng.gen(); 
                    let rand4: f64 = rng.gen(); 

                    let x = rand*2. - 1.;
                    let y = rand2*2. - 1.;
                    let u = -speed * (rand3*2.-1.);
                    let v =  speed * (rand4*2.-1.);

                    let object = Vec::from([0.1, x, y, u, v]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "nbody-misc" => {

                let (mass, distance, speed, nr_of_objects) = (0.05, 0.7, 1.0, 12);

                let id = 0;
                let mut family  = ObjFamily::new(id);
                let mut conf    = ObjFamilyEngineConfig::new(id);
                conf.boundary   = ObjBoundaryVariant::WallCollisionInelastic;

                for obj_idx in 0..nr_of_objects {
                    // let rand: f64 = rng.gen(); let phi = TAU * rand;
                    let phi = obj_idx as f64 / nr_of_objects as f64 * TAU;
                    let x = distance * phi.cos();
                    let y = distance * phi.sin();
                    let u =   -speed * phi.sin();
                    let v =    speed * phi.cos();

                    let object = Vec::from([mass, x, y, u, v]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "charge-interaction" => {

                let id = 0;
                let mut family        = ObjFamily::new(id);
                let mut conf          = ObjFamilyEngineConfig::new(id);
                conf.obj_interactions = Vec::from([ObjObjInteraction::ForceCoulomb]);
                conf.boundary         = ObjBoundaryVariant::WallCollisionElastic;
                conf.obj_attributes.push(ObjAttribute::Charge);
                conf.obj_length += 1;

                let nr_of_electrons = 10;
                for _body_idx in 0..nr_of_electrons {
                    let rand1: f64 = rng.gen(); 
                    let rand2: f64 = rng.gen(); 
                    let x0 = rand1 * 2. - 1.;
                    let y0 = rand2 * 2. - 1.;
                    let object = Vec::from([0.04, x0, y0, 0., 0., -1.]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

                let id = 1;
                let mut family        = ObjFamily::new(id);
                let mut conf          = ObjFamilyEngineConfig::new(id);
                conf.obj_interactions = Vec::from([ObjObjInteraction::ForceCoulomb]);
                conf.boundary         = ObjBoundaryVariant::WallCollisionElastic;
                conf.obj_attributes.push(ObjAttribute::Charge);
                conf.obj_length += 1;
                engine_conf.dt = DT / 10.;

                let nr_of_protons = 10;
                for _ in 0..nr_of_protons {
                    let rand1: f64 = rng.gen(); 
                    let rand2: f64 = rng.gen(); 
                    let x0 = rand1 * 2. - 1.;
                    let y0 = rand2 * 2. - 1.;
                    let object = Vec::from([M, x0, y0, 0., 0., 1.]);
                    family.add_object(&object, &mut conf);
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, "lennard-jones" => {

                let id = 0;
                let mut family        = ObjFamily::new(id);
                let mut conf          = ObjFamilyEngineConfig::new(id);
                conf.obj_interactions = Vec::from([ObjObjInteraction::ForceLennardJones]);
                conf.boundary         = ObjBoundaryVariant::WallCollisionElastic;

                // TODO add dampening somehow, on collision? over time?
                let foo: usize = 8;
                // let nr_of_bodies = foo.pow(2);
                let speed = 0.05;
                for jdx in 0..foo {
                    for idx in 0..foo {
                        let x0 = (idx as f64 + 0.5) / foo as f64 * 2. - 1.;
                        let y0 = (jdx as f64 + 0.5) / foo as f64 * 2. - 1.;
                        let rand1: f64 = rng.gen(); 
                        let rand2: f64 = rng.gen(); 
                        let u0 = (rand1 * 2. - 1.) * speed;
                        let v0 = (rand2 * 2. - 1.) * speed;
                        // let (u0, v0) = (0., 0.);
                        let x0 = x0 + rand1 / foo as f64;
                        let y0 = y0 + rand2 / foo as f64;
                        let object = Vec::from([1., x0, y0, u0, v0]);
                        family.add_object(&object, &mut conf);
                    }
                }
                engine_conf.obj_families.push(conf);
                obj_families.push(family);

            }, _ => {}
        }
        obj_families
    }

    pub fn setup_fields(
        sim_id: &str,
        engine_conf: &mut EngineConfig,
    ) -> Vec<Field> {

        // field-specific imports
        // use field::variant::FieldVariant;
        use field::relevant_cells::FieldRelevantCells;
        use crate::boundary::field::variant::FieldBoundaryVariant;
        use crate::integrator::field::variant::FieldIntegratorVariant;
        use crate::interaction::field::field::FieldFieldInteraction;
        // use crate::interaction::field::object::FieldObjInteraction;

        // math stuff
        const _TAU: f64 = 2. * 3.14159265358979;
        let mut rng = rand::thread_rng();

        // default values
        let GRID_SIZE = 200;
        let _DT = engine_conf.dt;  // 0.01

        let mut fields: Vec<Field> = Vec::new();
        match sim_id {

            "ising-model" => {

                let id = 0;
                let mut conf            = FieldEngineConfig::new(id);
                // conf.field_variant      = FieldVariant::Ising;
                conf.dimensions         = Vec::from([GRID_SIZE, GRID_SIZE, 1]);
                conf.integrator         = FieldIntegratorVariant::CellAuto;
                conf.relevant_cells     = FieldRelevantCells::RandomBatch;
                conf.field_interactions = Vec::from([FieldFieldInteraction::Ising]);
                conf.boundary           = FieldBoundaryVariant::Periodic;

                let mut field = Field::new(id);
                for _row_idx in 0..conf.dimensions[0] {
                    for _col_idx in 0..conf.dimensions[1] {
                        let rand: f64 = rng.gen();
                        let val = if rand > 0.5 { -1. } else { 1. };
                        field.entries.push(val);
                    }
                }
                engine_conf.fields.push(conf);
                fields.push(field);

            }, "game-of-life" => {

                let id = 0;
                let mut conf            = FieldEngineConfig::new(id);
                // conf.field_variant = FieldVariant::GameOfLife;
                conf.dimensions         = Vec::from([100, 100, 1]);
                conf.relevant_cells     = FieldRelevantCells::Entire;
                conf.field_interactions = Vec::from([FieldFieldInteraction::GameOfLife]);
                conf.boundary           = FieldBoundaryVariant::Periodic;

                let mut field = Field::new(id);

                let objects = Vec::from([
                    get_initial_state_for_GOL_glider((1, 1)),
                    get_initial_state_for_GOL_LWSS_glider((80, 25)),
                    get_initial_state_for_GOL_MWSS_glider((75, 35)),
                    get_initial_state_for_GOL_HWSS_glider((70, 45)),
                ]);

                let mut living_cells = Vec::new();
                for obj in objects {
                    for cell in obj {
                        living_cells.push(cell);
                    }
                }
                for row_idx in 0..conf.dimensions[0] {
                    for col_idx in 0..conf.dimensions[1] {
                        if living_cells.contains(&(col_idx, row_idx)) {
                            field.entries.push(1.);
                        } else {
                            field.entries.push(0.);
                        }
                    }
                }

                engine_conf.fields.push(conf);
                fields.push(field);

            } "3body-moon" => {

                let id              = 0;
                let field           = Field::new(id);
                let mut conf        = FieldEngineConfig::new(id);
                conf.integrator     = FieldIntegratorVariant::FromObjects;
                conf.dimensions     = Vec::from([0, 0, 0]);
                engine_conf.fields.push(conf);
                fields.push(field);

            }, _ => {}
        }

        fields
    }

}


pub fn get_initial_state_for_GOL_glider(
    initial_position: (usize, usize)
) -> Vec<(usize, usize)> {
    let (x0, y0) = (initial_position.0, initial_position.1);
    Vec::from([
        (x0 + 2, y0 + 0),
        (x0 + 0, y0 + 1),
        (x0 + 2, y0 + 2),
        (x0 + 1, y0 + 2),
        (x0 + 2, y0 + 1),
    ])
}

pub fn get_initial_state_for_GOL_LWSS_glider(
    initial_position: (usize, usize)
) -> Vec<(usize, usize)> {
    let (x0, y0) = (initial_position.0, initial_position.1);
    Vec::from([
        (x0 + 0, y0 + 0),
        (x0 + 0, y0 + 1),
        (x0 + 0, y0 + 2),
        (x0 + 1, y0 + 0),
        (x0 + 1, y0 + 3),
        (x0 + 2, y0 + 0),
        (x0 + 3, y0 + 0),
        (x0 + 4, y0 + 1),
        (x0 + 4, y0 + 3),
    ])
}

pub fn get_initial_state_for_GOL_MWSS_glider(
    initial_position: (usize, usize)
) -> Vec<(usize, usize)> {
    let (x0, y0) = (initial_position.0, initial_position.1);
    Vec::from([
        (x0 + 0, y0 + 0),
        (x0 + 0, y0 + 1),
        (x0 + 0, y0 + 2),
        (x0 + 1, y0 + 0),
        (x0 + 1, y0 + 3),
        (x0 + 2, y0 + 0),
        (x0 + 3, y0 + 0),
        (x0 + 3, y0 + 4),
        (x0 + 4, y0 + 0),
        (x0 + 5, y0 + 1),
        (x0 + 5, y0 + 3),
    ])
}

pub fn get_initial_state_for_GOL_HWSS_glider(
    initial_position: (usize, usize)
) -> Vec<(usize, usize)> {
    let (x0, y0) = (initial_position.0, initial_position.1);
    Vec::from([
        (x0 + 0, y0 + 0),
        (x0 + 0, y0 + 1),
        (x0 + 0, y0 + 2),
        (x0 + 1, y0 + 0),
        (x0 + 1, y0 + 3),
        (x0 + 2, y0 + 0),
        (x0 + 3, y0 + 0),
        (x0 + 3, y0 + 4),
        (x0 + 4, y0 + 0),
        (x0 + 4, y0 + 4),
        (x0 + 5, y0 + 0),
        (x0 + 6, y0 + 1),
        (x0 + 6, y0 + 3),
    ])
}


pub enum ObjAttribute {
    Mass,
    Charge,
    Radius,
    PosX,
    PosY,
    PosZ,
    VelX,
    VelY,
    VelZ,
    AccX,
    AccY,
    AccZ,
    SpinX,
    SpinY,
    SpinZ,
}


pub mod family;
pub mod attribute;
pub mod variant;

use crate::config::obj_family::ObjFamilyEngineConfig;


#[derive(Clone)]
pub struct ObjFamily {

    pub id: usize,
    pub objects: Vec<f64>,

}

impl ObjFamily {

    pub fn new(id: usize) -> Self {
        ObjFamily {
            id,
            objects: Vec::new(),
        }
    }

    pub fn add_object(
        &mut self, 
        obj: &Vec<f64>, 
        config: &mut ObjFamilyEngineConfig
    ) {
        self.objects.extend_from_slice(obj);  // TODO might lead to problems at live-add (eg. tails)
        config.family_size += 1;
    }
}


pub enum ObjNeighborhood {
    Direct,  // direct summation over all
    // QuadTree,
    // Binning,
}

pub enum ObjVariant {
    Static,
    Body,
    Particle,
}


pub struct Field {
    pub state_vector:   Vec<FieldAttribute>,
    pub config:         crate::config::field::FieldEngineConfig,
}
impl Field {
    pub fn new() -> Self {
        let id = 0; // TODO remove from function args
        Field {
            state_vector:   Vec::new(),
            config:         crate::config::field::FieldEngineConfig::new(id),
        }
    }
}

pub enum FieldAttribute {
    Density(Vec<f64>),
    Spin(Vec<bool>),
    VelocityX(Vec<f64>),
    VelocityY(Vec<f64>),
    VelocityZ(Vec<f64>),
}


pub mod field;
pub mod obj_family;


pub enum System {
    Field(field::Field),
    ObjectFamily(obj_family::ObjFamily),
}



// pub enum StateVector {
//     Int(Vec<i32>),
//     Bool(Vec<bool>),
//     Float(Vec<f64>),
// //     Vec2Df(Vec<[f64; 2]>),
// //     Vec3Df(Vec<[f64; 3]>),
// }

// pub struct StateVector <T> {
//     cells:    Vec<T>,
// }
// impl <T> StateVector <T> {
//     pub fn new() -> Self {
//         StateVector {
//             cells:  Vec::new();
//         }
//     }
// }


pub struct ObjFamily {
    pub state_vector:   Vec<ObjAttribute>,
    pub config:         crate::config::obj_family::ObjFamilyEngineConfig,
}
impl ObjFamily {
    pub fn new() -> Self {
        let id = 0; // TODO remove
        ObjFamily {
            state_vector:   Vec::new(),
            config:         crate::config::obj_family::ObjFamilyEngineConfig::new(id),
        }
    }
}

pub enum ObjAttribute {
    Charge(Vec<f64>),
    Mass(Vec<f64>),
    PositionX(Vec<f64>),
    PositionY(Vec<f64>),
    PositionZ(Vec<f64>),
    Spin(Vec<bool>),
    VelocityX(Vec<f64>),
    VelocityY(Vec<f64>),
    VelocityZ(Vec<f64>),
}

[package]
    name = "mxyz-init"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[dependencies]
    mxyz-server = { path="../mxyz-server" }
    mxyz-engine = { path="../mxyz-engine" }
    mxyz-chronos = { path="../mxyz-chronos" }

fn main() {
    // mxyz_server::rocket_launch()
    mxyz_server::main()
        .expect("ERROR: Server failed to initialize.");
}


[package]
    name = "mxyz-physics"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[dependencies]
    physical_constants = "0.4.1"


pub mod newtonian_gravity;

#![allow(non_snake_case)]


pub fn kepler_velocity(
    M: f64,
    r: f64
) -> f64 {
    let G = 1.;
    ( G*M/r ).sqrt()
}


use std::collections::HashMap;

use physical_constants;


pub fn get_fundamental_constants() -> HashMap<&'static str, f64> {
    HashMap::from([
        ("c",       physical_constants::SPEED_OF_LIGHT_IN_VACUUM),
        ("k_B",     physical_constants::BOLTZMANN_CONSTANT),
        ("h_bar",   physical_constants::PLANCK_CONSTANT),
        ("G",       physical_constants::NEWTONIAN_CONSTANT_OF_GRAVITATION),
    ])
}


pub mod classical_mechanics;
pub mod constants;
pub mod emergent_behavior;
pub mod quantum_mechanics;
pub mod thermo_dynamics;


#![allow(non_snake_case)]


pub fn boltzmann_prob(
    dE: f64, T: f64
) -> f64 { 

    let kB = 1.;
    let E_th = kB * T;
    (-dE / E_th).exp()

}


[package]
    name = "mxyz-server"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[dependencies]
    rocket = "0.5.0-rc.1"
    js-sys = "0.3.51"
    serde = { version = "1.0", features = ["derive"] }
    serde_json = "1.0"

[dependencies.rocket_dyn_templates]
    version = "0.1.0-rc.1"
    features = ["tera"]

[dependencies.web-sys]
    version = "0.3.55"
    features = [ 'console' ]


#[macro_use] extern crate rocket;
use rocket::fs::{ FileServer, relative };
use rocket_dyn_templates::Template;

mod views;


#[rocket::main]
pub async fn main() -> Result<(), rocket::Error> {

    let file_server = FileServer::from(relative!("static"));
    let routes = routes![
        views::index::route,
        views::routes,
    ];

    rocket::build()
        .mount("/static", file_server)
        .mount("/", routes)
        .attach(Template::fairing())
        .launch()
        .await
}


// use rocket::{Rocket, Build};

// #[launch]
// pub fn rocket_launch() -> Rocket<Build> {

//     let file_server = FileServer::from(relative!("static"));
//     let routes = routes![
//         views::index::route,
//         views::routes,
//     ];

//     rocket::build()
//         .mount("/static", file_server)
//         .mount("/", routes)
//         .attach(Template::fairing())
//         // .launch()
//         // .await
// }



// #[launch]
// pub fn rocket() -> _ {  // TODO: async

//     let file_server = FileServer::from(relative!("static"));
//     let routes = routes![
//         views::index::route,
//         views::routes,
//     ];

//     rocket::build()
//         .mount("/static", file_server)
//         .mount("/", routes)
//         .attach(Template::fairing()
//     )
// }


use std::collections::HashMap;

extern crate rocket_dyn_templates;
use rocket_dyn_templates::Template;

mod navgrid;
use navgrid::NavGrid;


#[get("/")]
pub fn route() -> Template {

    let navgrid = NavGrid::new();

    let context: HashMap<&str, &NavGrid> = [
        ("navgrid", &navgrid),
    ].iter().cloned().collect();

    Template::render("index/base", &context)
}


use serde::{Serialize, Deserialize};

mod section;
use section::NavGridSection;


#[derive(Serialize, Deserialize)]
pub struct NavGrid {
    sections: Vec<NavGridSection>,
}
impl NavGrid {
    pub fn new() -> Self {

        let grid_section_titles: Vec<(&str, &str)> = Vec::from([
            ("gravity", "gravitational n-body dynamics"),
            // ("oscillators", "oscillators"),
            ("thermo-dynamics", "thermo-dynamics"),
            // ("fluid-dynamics", "fluid dynamics"),
            ("electro-magnetism", "electro-magnetism"),
            ("emergent-behavior", "emergent behavior"),
            ("quantum-mechanics", "quantum mechanics"),
            // ("various", "various"),
            // ("optics", "optics"), // ?
        ]);

        let mut sections: Vec<NavGridSection> = Vec::new();
        for (id, title) in grid_section_titles.iter() {
            sections.push(NavGridSection::new(id, title));
        }

        NavGrid {
            sections,
        } 
    }
}


use serde::{Serialize, Deserialize};


#[derive(Serialize, Deserialize)]
pub struct NavGridItem {
    item_id: String,
    title: String,
    path_to_thumbnail: String,
}
impl NavGridItem {
    pub fn new(item_id: &str, title: &str) -> Self {

        let path_to_thumbnail = format!(
            "/static/img/thumbnails/{}.png", item_id
        );

        NavGridItem {
            item_id: String::from(item_id),
            title: String::from(title),
            path_to_thumbnail,
        }
    }
}


use serde::{Serialize, Deserialize};

mod item;
use item::NavGridItem;


#[derive(Serialize, Deserialize)]
pub struct NavGridSection {
    section_id: String,
    title: String,
    items: Vec<NavGridItem>,
}
impl NavGridSection {
    pub fn new(section_id: &str, title: &str) -> Self { 

        let items: Vec<NavGridItem> = match section_id {
            "gravity" => Vec::from([
                // intro
                    // NavGridItem::new("nbody-solar", "solar system"),
                // basics
                // NavGridItem::new("2body-kepler", "Kepler's laws"),
                NavGridItem::new("3body-moon", "Moon"),
                    // NavGridItem::new("3body-lagrange", "Lagrange points"),
                NavGridItem::new("nbody-flowers", "sym. constellations"),
                // more complex systems
                    // NavGridItem::new("nbody-binary", "stellar binary"),
                NavGridItem::new("nbody-asteroids", "asteroids"),
                    // NavGridItem::new("nbody-galaxy", "galaxy"),
                    // NavGridItem::new("nbody-cluster", "stellar cluster (3D)"),
                // stable 3-body
                NavGridItem::new("3body-fig8", "figure-8"),
                NavGridItem::new("nbody-cloud", "stellar cloud"),
                NavGridItem::new("nbody-misc", "misc"),
                    // NavGridItem::new("3body-broucke", "broucke"),
                    // NavGridItem::new("3body-liao", "liao"),
                    // NavGridItem::new("3body-freefall", "free-fall"),
                    // NavGridItem::new("3body-moth", "moth"),
            ]),
            // "oscillators" => Vec::from([
            //     NavGridItem::new("harmonic-oscillator", "harmonic oscillator"),
            //     NavGridItem::new("single-pendulum", "single pendulum"),
            //     NavGridItem::new("double-pendulum", "double pendulum"),
            //     NavGridItem::new("lissajous", "Lissajous figures"),
            //     NavGridItem::new("fourier", "fourier"),  // ...?
            // ]),
            "electro-magnetism" => Vec::from([
                NavGridItem::new("charge-interaction", "charge interaction"),
                    // NavGridItem::new("charge-field-interaction", "charge-field interaction"),
                    // NavGridItem::new("magnet", "magnet"),  // TODO rename? (multiple entries)
                // NavGridItem::new("wien-filter", "Wien filter"),
                    // NavGridItem::new("field-field-interaction", "waves"),
                    // NavGridItem::new("electric-motor", "electric-motor"),
            ]),
            "thermo-dynamics" => Vec::from([
                NavGridItem::new("ising-model", "Ising model"),
                // NavGridItem::new("thermal-motion", "thermal motion"),
                // NavGridItem::new("brownian-motion", "Brownian motion"),
                // NavGridItem::new("heat-conduction", "heat conduction"),
                    // NavGridItem::new("melting", "ice cubes"), // ?
            ]),
            // "fluid-dynamics" => Vec::from([
                // NavGridItem::new("diffusion", "Diffusion"),
                // NavGridItem::new("incompressible-fluid", "incompressible fluid"),
                    // NavGridItem::new("raptor-flow", "raptor engine"),
            // ]),
            "quantum-mechanics" => Vec::from([
            //     NavGridItem::new("double-slit", "double slit experiment"),
            //     NavGridItem::new("feynman-graphs", "Feynman graphs"),
                NavGridItem::new("lennard-jones", "Lennard-Jones potential"),
            ]),
            "emergent-behavior" => Vec::from([
            //     NavGridItem::new("boids", "boids"),
            //     NavGridItem::new("ants", "ants"),
                NavGridItem::new("game-of-life", "game of life"),
            ]),
            "various" => Vec::from([
                // NavGridItem::new("rock-paper-scissors", "rock-paper-scissors"),
                    // NavGridItem::new("ca-rulemaker", "cell.aut. rule-maker"),
                // NavGridItem::new("mc-pi", "Monte Carlo pi"),
                // NavGridItem::new("hsl-colors", "HSL colors"),
            ]),
            _ => Vec::new()
        };

        NavGridSection {
            section_id: String::from(section_id),
            title: String::from(title), // TODO -> title
            items,
        }
    }
}


pub mod index;

// use crate::utils::load_config;

// ----------

use std::collections::HashMap;

extern crate rocket_dyn_templates;
use rocket_dyn_templates::Template;


#[get("/simulations/<category>/<sim_id>")]
pub fn routes( category: &str, sim_id: &str ) -> Template {

    // let config = load_config();
    // let pages = config.pages;
    // let context = &pages[sim_id];

    let title = match sim_id {
        "2body-kepler"       => "Kepler's laws",
        "3body-moon"         => "3body orbits - Moon",
        "3body-lagrange"     => "3body orbits - Lagrange points",
        "nbody-flowers"      => "symmetric satellite constellations",
        "nbody-binary"       => "binary star system",
        "nbody-asteroids"    => "asteroids around binary",
        "3body-fig8"         => "3body orbits - figure-8",
        "3body-broucke"      => "3body orbits - Broucke orbit",
        "charge-interaction" => "Coulomb interaction of charged particles",
        "ising-model"        => "Ising model",
        "diffusion"          => "fluid diffusion",
        "lennard-jones"      => "Lennard-Jones interaction",
        "game-of-life"       => "Conway's game of life",
                           _ => "TODO: title"
    };

    let context: HashMap<&str, &str> = [
        ("category", category),  
        ("sim_id", sim_id), 
        ("title", title), 
    ].iter().cloned().collect();

    let template = "simulations/base";
    Template::render(template, &context)
}

body {
  --main-bg-color: #111111;
  --main-section-color: #222222;
  --main-border-color: #555555;
  --main-text-color: #dddddd;
  --main-font-family: Arial, Helvetica, sans-serif;
  --main-border: 2px solid var(--main-border-color);
  width: 100%;
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  font-family: var(--main-font-family);
  background-color: var(--main-bg-color);
  color: var(--main-text-color);
}

/* HEADER ====================================== */

#header {
  width: calc(100% - 14px);
  text-align: right;
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 13px;
}

#header_home {
  cursor: pointer;
  background-color: black;
  color: var(--main-text-color);
  font-size: 18px;
  font-weight: 690;
  text-decoration: none;
  outline: none;
}

/* CONTENT ====================================== */

#content {
  width: 60%;
  padding-left: 20%;
  padding-right: 20%;
}
@media only screen and (max-width: 1201px) {
  #content {
    width: 65%;
    padding-left: 17.5%;
    padding-right: 17.5%;
  }
}
@media only screen and (max-width: 751px) {
  #content {
    width: 96%;
    padding-left: 2%;
    padding-right: 2%;
  }
}

/* SECTION ====================================== */

.section {
  background-color: var(--main-section-color);
  border-radius: 20px; /* if changed: also change for navgrid_section? */
  border: var(--main-border);
  margin-bottom: 25px;
  text-align: center;
  padding: 10px;
}

.section_title {
  width: 100%;
  text-align: center;
  font-weight: 690;
  margin-bottom: 8px;
  height: 1em; /* needed for smooth reload  (semi, text "blinks") */
}

/* CANVAS ====================================== */

.canvas_holder {
  /* border: var(--main-border) */
  border-radius: 20px;
  /* width: 94%; */
  /* margin-top: 3%; */
  margin-bottom: 3%;
  /* margin-left: 3%; */
  /* margin-right: 3%; */
}

canvas {
  border: var(--main-border);
  background-color: black;
  border-radius: 20px; /* if changed: also change for section/navgrid_section? */
  /* overflow: hidden; */
  width: 100%;

  box-shadow: inset 0px 0px 0px 0px black;
  box-sizing: border-box;
}

/* OTHER ====================================== */

.slider {
  outline: none;
}
/*!
 * Bootstrap v4.0.0 (https://getbootstrap.com)
 * Copyright 2011-2018 The Bootstrap Authors
 * Copyright 2011-2018 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
:root {
  --blue: #007bff;
  --indigo: #6610f2;
  --purple: #6f42c1;
  --pink: #e83e8c;
  --red: #dc3545;
  --orange: #fd7e14;
  --yellow: #ffc107;
  --green: #28a745;
  --teal: #20c997;
  --cyan: #17a2b8;
  --white: #fff;
  --gray: #6c757d;
  --gray-dark: #343a40;
  --primary: #007bff;
  --secondary: #6c757d;
  --success: #28a745;
  --info: #17a2b8;
  --warning: #ffc107;
  --danger: #dc3545;
  --light: #f8f9fa;
  --dark: #343a40;
  --breakpoint-xs: 0;
  --breakpoint-sm: 576px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 992px;
  --breakpoint-xl: 1200px;
  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI",
    Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol";
  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas,
    "Liberation Mono", "Courier New", monospace;
}
*,
::after,
::before {
  box-sizing: border-box;
}
html {
  font-family: sans-serif;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -ms-overflow-style: scrollbar;
  -webkit-tap-highlight-color: transparent;
}
@-ms-viewport {
  width: device-width;
}
article,
aside,
dialog,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section {
  display: block;
}
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
    "Segoe UI Symbol";
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  text-align: left;
  background-color: #fff;
}
[tabindex="-1"]:focus {
  outline: 0 !important;
}
hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-top: 0;
  margin-bottom: 0.5rem;
}
p {
  margin-top: 0;
  margin-bottom: 1rem;
}
abbr[data-original-title],
abbr[title] {
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
  cursor: help;
  border-bottom: 0;
}
address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}
dl,
ol,
ul {
  margin-top: 0;
  margin-bottom: 1rem;
}
ol ol,
ol ul,
ul ol,
ul ul {
  margin-bottom: 0;
}
dt {
  font-weight: 700;
}
dd {
  margin-bottom: 0.5rem;
  margin-left: 0;
}
blockquote {
  margin: 0 0 1rem;
}
dfn {
  font-style: italic;
}
b,
strong {
  font-weight: bolder;
}
small {
  font-size: 80%;
}
sub,
sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
a {
  color: #007bff;
  text-decoration: none;
  background-color: transparent;
  -webkit-text-decoration-skip: objects;
}
a:hover {
  color: #0056b3;
  text-decoration: underline;
}
a:not([href]):not([tabindex]) {
  color: inherit;
  text-decoration: none;
}
a:not([href]):not([tabindex]):focus,
a:not([href]):not([tabindex]):hover {
  color: inherit;
  text-decoration: none;
}
a:not([href]):not([tabindex]):focus {
  outline: 0;
}
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}
pre {
  margin-top: 0;
  margin-bottom: 1rem;
  overflow: auto;
  -ms-overflow-style: scrollbar;
}
figure {
  margin: 0 0 1rem;
}
img {
  vertical-align: middle;
  border-style: none;
}
svg:not(:root) {
  overflow: hidden;
}
table {
  border-collapse: collapse;
}
caption {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
  color: #6c757d;
  text-align: left;
  caption-side: bottom;
}
th {
  text-align: inherit;
}
label {
  display: inline-block;
  margin-bottom: 0.5rem;
}
button {
  border-radius: 0;
}
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}
button,
input,
optgroup,
select,
textarea {
  margin: 0;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}
button,
input {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
[type="reset"],
[type="submit"],
button,
html [type="button"] {
  -webkit-appearance: button;
}
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner,
button::-moz-focus-inner {
  padding: 0;
  border-style: none;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}
input[type="date"],
input[type="datetime-local"],
input[type="month"],
input[type="time"] {
  -webkit-appearance: listbox;
}
textarea {
  overflow: auto;
  resize: vertical;
}
fieldset {
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
}
legend {
  display: block;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin-bottom: 0.5rem;
  font-size: 1.5rem;
  line-height: inherit;
  color: inherit;
  white-space: normal;
}
progress {
  vertical-align: baseline;
}
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
[type="search"] {
  outline-offset: -2px;
  -webkit-appearance: none;
}
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
::-webkit-file-upload-button {
  font: inherit;
  -webkit-appearance: button;
}
output {
  display: inline-block;
}
summary {
  display: list-item;
  cursor: pointer;
}
template {
  display: none;
}
[hidden] {
  display: none !important;
}
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-bottom: 0.5rem;
  font-family: inherit;
  font-weight: 500;
  line-height: 1.2;
  color: inherit;
}
.h1,
h1 {
  font-size: 2.5rem;
}
.h2,
h2 {
  font-size: 2rem;
}
.h3,
h3 {
  font-size: 1.75rem;
}
.h4,
h4 {
  font-size: 1.5rem;
}
.h5,
h5 {
  font-size: 1.25rem;
}
.h6,
h6 {
  font-size: 1rem;
}
.lead {
  font-size: 1.25rem;
  font-weight: 300;
}
.display-1 {
  font-size: 6rem;
  font-weight: 300;
  line-height: 1.2;
}
.display-2 {
  font-size: 5.5rem;
  font-weight: 300;
  line-height: 1.2;
}
.display-3 {
  font-size: 4.5rem;
  font-weight: 300;
  line-height: 1.2;
}
.display-4 {
  font-size: 3.5rem;
  font-weight: 300;
  line-height: 1.2;
}
hr {
  margin-top: 1rem;
  margin-bottom: 1rem;
  border: 0;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
}
.small,
small {
  font-size: 80%;
  font-weight: 400;
}
.mark,
mark {
  padding: 0.2em;
  background-color: #fcf8e3;
}
.list-unstyled {
  padding-left: 0;
  list-style: none;
}
.list-inline {
  padding-left: 0;
  list-style: none;
}
.list-inline-item {
  display: inline-block;
}
.list-inline-item:not(:last-child) {
  margin-right: 0.5rem;
}
.initialism {
  font-size: 90%;
  text-transform: uppercase;
}
.blockquote {
  margin-bottom: 1rem;
  font-size: 1.25rem;
}
.blockquote-footer {
  display: block;
  font-size: 80%;
  color: #6c757d;
}
.blockquote-footer::before {
  content: "\2014 \00A0";
}
.img-fluid {
  max-width: 100%;
  height: auto;
}
.img-thumbnail {
  padding: 0.25rem;
  background-color: #fff;
  border: 1px solid #dee2e6;
  border-radius: 0.25rem;
  max-width: 100%;
  height: auto;
}
.figure {
  display: inline-block;
}
.figure-img {
  margin-bottom: 0.5rem;
  line-height: 1;
}
.figure-caption {
  font-size: 90%;
  color: #6c757d;
}
code,
kbd,
pre,
samp {
  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
    "Courier New", monospace;
}
code {
  font-size: 87.5%;
  color: #e83e8c;
  word-break: break-word;
}
a > code {
  color: inherit;
}
kbd {
  padding: 0.2rem 0.4rem;
  font-size: 87.5%;
  color: #fff;
  background-color: #212529;
  border-radius: 0.2rem;
}
kbd kbd {
  padding: 0;
  font-size: 100%;
  font-weight: 700;
}
pre {
  display: block;
  font-size: 87.5%;
  color: #212529;
}
pre code {
  font-size: inherit;
  color: inherit;
  word-break: normal;
}
.pre-scrollable {
  max-height: 340px;
  overflow-y: scroll;
}
.container {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}
@media (min-width: 576px) {
  .container {
    max-width: 540px;
  }
}
@media (min-width: 768px) {
  .container {
    max-width: 720px;
  }
}
@media (min-width: 992px) {
  .container {
    max-width: 960px;
  }
}
@media (min-width: 1200px) {
  .container {
    max-width: 1140px;
  }
}
.container-fluid {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}
.row {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -15px;
  margin-left: -15px;
}
.no-gutters {
  margin-right: 0;
  margin-left: 0;
}
.no-gutters > .col,
.no-gutters > [class*="col-"] {
  padding-right: 0;
  padding-left: 0;
}
.col,
.col-1,
.col-10,
.col-11,
.col-12,
.col-2,
.col-3,
.col-4,
.col-5,
.col-6,
.col-7,
.col-8,
.col-9,
.col-auto,
.col-lg,
.col-lg-1,
.col-lg-10,
.col-lg-11,
.col-lg-12,
.col-lg-2,
.col-lg-3,
.col-lg-4,
.col-lg-5,
.col-lg-6,
.col-lg-7,
.col-lg-8,
.col-lg-9,
.col-lg-auto,
.col-md,
.col-md-1,
.col-md-10,
.col-md-11,
.col-md-12,
.col-md-2,
.col-md-3,
.col-md-4,
.col-md-5,
.col-md-6,
.col-md-7,
.col-md-8,
.col-md-9,
.col-md-auto,
.col-sm,
.col-sm-1,
.col-sm-10,
.col-sm-11,
.col-sm-12,
.col-sm-2,
.col-sm-3,
.col-sm-4,
.col-sm-5,
.col-sm-6,
.col-sm-7,
.col-sm-8,
.col-sm-9,
.col-sm-auto,
.col-xl,
.col-xl-1,
.col-xl-10,
.col-xl-11,
.col-xl-12,
.col-xl-2,
.col-xl-3,
.col-xl-4,
.col-xl-5,
.col-xl-6,
.col-xl-7,
.col-xl-8,
.col-xl-9,
.col-xl-auto {
  position: relative;
  width: 100%;
  min-height: 1px;
  padding-right: 15px;
  padding-left: 15px;
}
.col {
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  max-width: 100%;
}
.col-auto {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  width: auto;
  max-width: none;
}
.col-1 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 8.333333%;
  flex: 0 0 8.333333%;
  max-width: 8.333333%;
}
.col-2 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 16.666667%;
  flex: 0 0 16.666667%;
  max-width: 16.666667%;
}
.col-3 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 25%;
  flex: 0 0 25%;
  max-width: 25%;
}
.col-4 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 33.333333%;
  flex: 0 0 33.333333%;
  max-width: 33.333333%;
}
.col-5 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 41.666667%;
  flex: 0 0 41.666667%;
  max-width: 41.666667%;
}
.col-6 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 50%;
  flex: 0 0 50%;
  max-width: 50%;
}
.col-7 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 58.333333%;
  flex: 0 0 58.333333%;
  max-width: 58.333333%;
}
.col-8 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 66.666667%;
  flex: 0 0 66.666667%;
  max-width: 66.666667%;
}
.col-9 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 75%;
  flex: 0 0 75%;
  max-width: 75%;
}
.col-10 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 83.333333%;
  flex: 0 0 83.333333%;
  max-width: 83.333333%;
}
.col-11 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 91.666667%;
  flex: 0 0 91.666667%;
  max-width: 91.666667%;
}
.col-12 {
  -webkit-box-flex: 0;
  -ms-flex: 0 0 100%;
  flex: 0 0 100%;
  max-width: 100%;
}
.order-first {
  -webkit-box-ordinal-group: 0;
  -ms-flex-order: -1;
  order: -1;
}
.order-last {
  -webkit-box-ordinal-group: 14;
  -ms-flex-order: 13;
  order: 13;
}
.order-0 {
  -webkit-box-ordinal-group: 1;
  -ms-flex-order: 0;
  order: 0;
}
.order-1 {
  -webkit-box-ordinal-group: 2;
  -ms-flex-order: 1;
  order: 1;
}
.order-2 {
  -webkit-box-ordinal-group: 3;
  -ms-flex-order: 2;
  order: 2;
}
.order-3 {
  -webkit-box-ordinal-group: 4;
  -ms-flex-order: 3;
  order: 3;
}
.order-4 {
  -webkit-box-ordinal-group: 5;
  -ms-flex-order: 4;
  order: 4;
}
.order-5 {
  -webkit-box-ordinal-group: 6;
  -ms-flex-order: 5;
  order: 5;
}
.order-6 {
  -webkit-box-ordinal-group: 7;
  -ms-flex-order: 6;
  order: 6;
}
.order-7 {
  -webkit-box-ordinal-group: 8;
  -ms-flex-order: 7;
  order: 7;
}
.order-8 {
  -webkit-box-ordinal-group: 9;
  -ms-flex-order: 8;
  order: 8;
}
.order-9 {
  -webkit-box-ordinal-group: 10;
  -ms-flex-order: 9;
  order: 9;
}
.order-10 {
  -webkit-box-ordinal-group: 11;
  -ms-flex-order: 10;
  order: 10;
}
.order-11 {
  -webkit-box-ordinal-group: 12;
  -ms-flex-order: 11;
  order: 11;
}
.order-12 {
  -webkit-box-ordinal-group: 13;
  -ms-flex-order: 12;
  order: 12;
}
.offset-1 {
  margin-left: 8.333333%;
}
.offset-2 {
  margin-left: 16.666667%;
}
.offset-3 {
  margin-left: 25%;
}
.offset-4 {
  margin-left: 33.333333%;
}
.offset-5 {
  margin-left: 41.666667%;
}
.offset-6 {
  margin-left: 50%;
}
.offset-7 {
  margin-left: 58.333333%;
}
.offset-8 {
  margin-left: 66.666667%;
}
.offset-9 {
  margin-left: 75%;
}
.offset-10 {
  margin-left: 83.333333%;
}
.offset-11 {
  margin-left: 91.666667%;
}
@media (min-width: 576px) {
  .col-sm {
    -ms-flex-preferred-size: 0;
    flex-basis: 0;
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
    flex-grow: 1;
    max-width: 100%;
  }
  .col-sm-auto {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    width: auto;
    max-width: none;
  }
  .col-sm-1 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 8.333333%;
    flex: 0 0 8.333333%;
    max-width: 8.333333%;
  }
  .col-sm-2 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 16.666667%;
    flex: 0 0 16.666667%;
    max-width: 16.666667%;
  }
  .col-sm-3 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 25%;
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-sm-4 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 33.333333%;
    flex: 0 0 33.333333%;
    max-width: 33.333333%;
  }
  .col-sm-5 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 41.666667%;
    flex: 0 0 41.666667%;
    max-width: 41.666667%;
  }
  .col-sm-6 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 50%;
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-sm-7 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 58.333333%;
    flex: 0 0 58.333333%;
    max-width: 58.333333%;
  }
  .col-sm-8 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 66.666667%;
    flex: 0 0 66.666667%;
    max-width: 66.666667%;
  }
  .col-sm-9 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 75%;
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-sm-10 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 83.333333%;
    flex: 0 0 83.333333%;
    max-width: 83.333333%;
  }
  .col-sm-11 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 91.666667%;
    flex: 0 0 91.666667%;
    max-width: 91.666667%;
  }
  .col-sm-12 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    max-width: 100%;
  }
  .order-sm-first {
    -webkit-box-ordinal-group: 0;
    -ms-flex-order: -1;
    order: -1;
  }
  .order-sm-last {
    -webkit-box-ordinal-group: 14;
    -ms-flex-order: 13;
    order: 13;
  }
  .order-sm-0 {
    -webkit-box-ordinal-group: 1;
    -ms-flex-order: 0;
    order: 0;
  }
  .order-sm-1 {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1;
  }
  .order-sm-2 {
    -webkit-box-ordinal-group: 3;
    -ms-flex-order: 2;
    order: 2;
  }
  .order-sm-3 {
    -webkit-box-ordinal-group: 4;
    -ms-flex-order: 3;
    order: 3;
  }
  .order-sm-4 {
    -webkit-box-ordinal-group: 5;
    -ms-flex-order: 4;
    order: 4;
  }
  .order-sm-5 {
    -webkit-box-ordinal-group: 6;
    -ms-flex-order: 5;
    order: 5;
  }
  .order-sm-6 {
    -webkit-box-ordinal-group: 7;
    -ms-flex-order: 6;
    order: 6;
  }
  .order-sm-7 {
    -webkit-box-ordinal-group: 8;
    -ms-flex-order: 7;
    order: 7;
  }
  .order-sm-8 {
    -webkit-box-ordinal-group: 9;
    -ms-flex-order: 8;
    order: 8;
  }
  .order-sm-9 {
    -webkit-box-ordinal-group: 10;
    -ms-flex-order: 9;
    order: 9;
  }
  .order-sm-10 {
    -webkit-box-ordinal-group: 11;
    -ms-flex-order: 10;
    order: 10;
  }
  .order-sm-11 {
    -webkit-box-ordinal-group: 12;
    -ms-flex-order: 11;
    order: 11;
  }
  .order-sm-12 {
    -webkit-box-ordinal-group: 13;
    -ms-flex-order: 12;
    order: 12;
  }
  .offset-sm-0 {
    margin-left: 0;
  }
  .offset-sm-1 {
    margin-left: 8.333333%;
  }
  .offset-sm-2 {
    margin-left: 16.666667%;
  }
  .offset-sm-3 {
    margin-left: 25%;
  }
  .offset-sm-4 {
    margin-left: 33.333333%;
  }
  .offset-sm-5 {
    margin-left: 41.666667%;
  }
  .offset-sm-6 {
    margin-left: 50%;
  }
  .offset-sm-7 {
    margin-left: 58.333333%;
  }
  .offset-sm-8 {
    margin-left: 66.666667%;
  }
  .offset-sm-9 {
    margin-left: 75%;
  }
  .offset-sm-10 {
    margin-left: 83.333333%;
  }
  .offset-sm-11 {
    margin-left: 91.666667%;
  }
}
@media (min-width: 768px) {
  .col-md {
    -ms-flex-preferred-size: 0;
    flex-basis: 0;
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
    flex-grow: 1;
    max-width: 100%;
  }
  .col-md-auto {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    width: auto;
    max-width: none;
  }
  .col-md-1 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 8.333333%;
    flex: 0 0 8.333333%;
    max-width: 8.333333%;
  }
  .col-md-2 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 16.666667%;
    flex: 0 0 16.666667%;
    max-width: 16.666667%;
  }
  .col-md-3 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 25%;
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-md-4 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 33.333333%;
    flex: 0 0 33.333333%;
    max-width: 33.333333%;
  }
  .col-md-5 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 41.666667%;
    flex: 0 0 41.666667%;
    max-width: 41.666667%;
  }
  .col-md-6 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 50%;
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-md-7 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 58.333333%;
    flex: 0 0 58.333333%;
    max-width: 58.333333%;
  }
  .col-md-8 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 66.666667%;
    flex: 0 0 66.666667%;
    max-width: 66.666667%;
  }
  .col-md-9 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 75%;
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-md-10 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 83.333333%;
    flex: 0 0 83.333333%;
    max-width: 83.333333%;
  }
  .col-md-11 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 91.666667%;
    flex: 0 0 91.666667%;
    max-width: 91.666667%;
  }
  .col-md-12 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    max-width: 100%;
  }
  .order-md-first {
    -webkit-box-ordinal-group: 0;
    -ms-flex-order: -1;
    order: -1;
  }
  .order-md-last {
    -webkit-box-ordinal-group: 14;
    -ms-flex-order: 13;
    order: 13;
  }
  .order-md-0 {
    -webkit-box-ordinal-group: 1;
    -ms-flex-order: 0;
    order: 0;
  }
  .order-md-1 {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1;
  }
  .order-md-2 {
    -webkit-box-ordinal-group: 3;
    -ms-flex-order: 2;
    order: 2;
  }
  .order-md-3 {
    -webkit-box-ordinal-group: 4;
    -ms-flex-order: 3;
    order: 3;
  }
  .order-md-4 {
    -webkit-box-ordinal-group: 5;
    -ms-flex-order: 4;
    order: 4;
  }
  .order-md-5 {
    -webkit-box-ordinal-group: 6;
    -ms-flex-order: 5;
    order: 5;
  }
  .order-md-6 {
    -webkit-box-ordinal-group: 7;
    -ms-flex-order: 6;
    order: 6;
  }
  .order-md-7 {
    -webkit-box-ordinal-group: 8;
    -ms-flex-order: 7;
    order: 7;
  }
  .order-md-8 {
    -webkit-box-ordinal-group: 9;
    -ms-flex-order: 8;
    order: 8;
  }
  .order-md-9 {
    -webkit-box-ordinal-group: 10;
    -ms-flex-order: 9;
    order: 9;
  }
  .order-md-10 {
    -webkit-box-ordinal-group: 11;
    -ms-flex-order: 10;
    order: 10;
  }
  .order-md-11 {
    -webkit-box-ordinal-group: 12;
    -ms-flex-order: 11;
    order: 11;
  }
  .order-md-12 {
    -webkit-box-ordinal-group: 13;
    -ms-flex-order: 12;
    order: 12;
  }
  .offset-md-0 {
    margin-left: 0;
  }
  .offset-md-1 {
    margin-left: 8.333333%;
  }
  .offset-md-2 {
    margin-left: 16.666667%;
  }
  .offset-md-3 {
    margin-left: 25%;
  }
  .offset-md-4 {
    margin-left: 33.333333%;
  }
  .offset-md-5 {
    margin-left: 41.666667%;
  }
  .offset-md-6 {
    margin-left: 50%;
  }
  .offset-md-7 {
    margin-left: 58.333333%;
  }
  .offset-md-8 {
    margin-left: 66.666667%;
  }
  .offset-md-9 {
    margin-left: 75%;
  }
  .offset-md-10 {
    margin-left: 83.333333%;
  }
  .offset-md-11 {
    margin-left: 91.666667%;
  }
}
@media (min-width: 992px) {
  .col-lg {
    -ms-flex-preferred-size: 0;
    flex-basis: 0;
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
    flex-grow: 1;
    max-width: 100%;
  }
  .col-lg-auto {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    width: auto;
    max-width: none;
  }
  .col-lg-1 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 8.333333%;
    flex: 0 0 8.333333%;
    max-width: 8.333333%;
  }
  .col-lg-2 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 16.666667%;
    flex: 0 0 16.666667%;
    max-width: 16.666667%;
  }
  .col-lg-3 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 25%;
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-lg-4 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 33.333333%;
    flex: 0 0 33.333333%;
    max-width: 33.333333%;
  }
  .col-lg-5 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 41.666667%;
    flex: 0 0 41.666667%;
    max-width: 41.666667%;
  }
  .col-lg-6 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 50%;
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-lg-7 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 58.333333%;
    flex: 0 0 58.333333%;
    max-width: 58.333333%;
  }
  .col-lg-8 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 66.666667%;
    flex: 0 0 66.666667%;
    max-width: 66.666667%;
  }
  .col-lg-9 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 75%;
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-lg-10 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 83.333333%;
    flex: 0 0 83.333333%;
    max-width: 83.333333%;
  }
  .col-lg-11 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 91.666667%;
    flex: 0 0 91.666667%;
    max-width: 91.666667%;
  }
  .col-lg-12 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    max-width: 100%;
  }
  .order-lg-first {
    -webkit-box-ordinal-group: 0;
    -ms-flex-order: -1;
    order: -1;
  }
  .order-lg-last {
    -webkit-box-ordinal-group: 14;
    -ms-flex-order: 13;
    order: 13;
  }
  .order-lg-0 {
    -webkit-box-ordinal-group: 1;
    -ms-flex-order: 0;
    order: 0;
  }
  .order-lg-1 {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1;
  }
  .order-lg-2 {
    -webkit-box-ordinal-group: 3;
    -ms-flex-order: 2;
    order: 2;
  }
  .order-lg-3 {
    -webkit-box-ordinal-group: 4;
    -ms-flex-order: 3;
    order: 3;
  }
  .order-lg-4 {
    -webkit-box-ordinal-group: 5;
    -ms-flex-order: 4;
    order: 4;
  }
  .order-lg-5 {
    -webkit-box-ordinal-group: 6;
    -ms-flex-order: 5;
    order: 5;
  }
  .order-lg-6 {
    -webkit-box-ordinal-group: 7;
    -ms-flex-order: 6;
    order: 6;
  }
  .order-lg-7 {
    -webkit-box-ordinal-group: 8;
    -ms-flex-order: 7;
    order: 7;
  }
  .order-lg-8 {
    -webkit-box-ordinal-group: 9;
    -ms-flex-order: 8;
    order: 8;
  }
  .order-lg-9 {
    -webkit-box-ordinal-group: 10;
    -ms-flex-order: 9;
    order: 9;
  }
  .order-lg-10 {
    -webkit-box-ordinal-group: 11;
    -ms-flex-order: 10;
    order: 10;
  }
  .order-lg-11 {
    -webkit-box-ordinal-group: 12;
    -ms-flex-order: 11;
    order: 11;
  }
  .order-lg-12 {
    -webkit-box-ordinal-group: 13;
    -ms-flex-order: 12;
    order: 12;
  }
  .offset-lg-0 {
    margin-left: 0;
  }
  .offset-lg-1 {
    margin-left: 8.333333%;
  }
  .offset-lg-2 {
    margin-left: 16.666667%;
  }
  .offset-lg-3 {
    margin-left: 25%;
  }
  .offset-lg-4 {
    margin-left: 33.333333%;
  }
  .offset-lg-5 {
    margin-left: 41.666667%;
  }
  .offset-lg-6 {
    margin-left: 50%;
  }
  .offset-lg-7 {
    margin-left: 58.333333%;
  }
  .offset-lg-8 {
    margin-left: 66.666667%;
  }
  .offset-lg-9 {
    margin-left: 75%;
  }
  .offset-lg-10 {
    margin-left: 83.333333%;
  }
  .offset-lg-11 {
    margin-left: 91.666667%;
  }
}
@media (min-width: 1200px) {
  .col-xl {
    -ms-flex-preferred-size: 0;
    flex-basis: 0;
    -webkit-box-flex: 1;
    -ms-flex-positive: 1;
    flex-grow: 1;
    max-width: 100%;
  }
  .col-xl-auto {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    width: auto;
    max-width: none;
  }
  .col-xl-1 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 8.333333%;
    flex: 0 0 8.333333%;
    max-width: 8.333333%;
  }
  .col-xl-2 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 16.666667%;
    flex: 0 0 16.666667%;
    max-width: 16.666667%;
  }
  .col-xl-3 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 25%;
    flex: 0 0 25%;
    max-width: 25%;
  }
  .col-xl-4 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 33.333333%;
    flex: 0 0 33.333333%;
    max-width: 33.333333%;
  }
  .col-xl-5 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 41.666667%;
    flex: 0 0 41.666667%;
    max-width: 41.666667%;
  }
  .col-xl-6 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 50%;
    flex: 0 0 50%;
    max-width: 50%;
  }
  .col-xl-7 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 58.333333%;
    flex: 0 0 58.333333%;
    max-width: 58.333333%;
  }
  .col-xl-8 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 66.666667%;
    flex: 0 0 66.666667%;
    max-width: 66.666667%;
  }
  .col-xl-9 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 75%;
    flex: 0 0 75%;
    max-width: 75%;
  }
  .col-xl-10 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 83.333333%;
    flex: 0 0 83.333333%;
    max-width: 83.333333%;
  }
  .col-xl-11 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 91.666667%;
    flex: 0 0 91.666667%;
    max-width: 91.666667%;
  }
  .col-xl-12 {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 100%;
    flex: 0 0 100%;
    max-width: 100%;
  }
  .order-xl-first {
    -webkit-box-ordinal-group: 0;
    -ms-flex-order: -1;
    order: -1;
  }
  .order-xl-last {
    -webkit-box-ordinal-group: 14;
    -ms-flex-order: 13;
    order: 13;
  }
  .order-xl-0 {
    -webkit-box-ordinal-group: 1;
    -ms-flex-order: 0;
    order: 0;
  }
  .order-xl-1 {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1;
  }
  .order-xl-2 {
    -webkit-box-ordinal-group: 3;
    -ms-flex-order: 2;
    order: 2;
  }
  .order-xl-3 {
    -webkit-box-ordinal-group: 4;
    -ms-flex-order: 3;
    order: 3;
  }
  .order-xl-4 {
    -webkit-box-ordinal-group: 5;
    -ms-flex-order: 4;
    order: 4;
  }
  .order-xl-5 {
    -webkit-box-ordinal-group: 6;
    -ms-flex-order: 5;
    order: 5;
  }
  .order-xl-6 {
    -webkit-box-ordinal-group: 7;
    -ms-flex-order: 6;
    order: 6;
  }
  .order-xl-7 {
    -webkit-box-ordinal-group: 8;
    -ms-flex-order: 7;
    order: 7;
  }
  .order-xl-8 {
    -webkit-box-ordinal-group: 9;
    -ms-flex-order: 8;
    order: 8;
  }
  .order-xl-9 {
    -webkit-box-ordinal-group: 10;
    -ms-flex-order: 9;
    order: 9;
  }
  .order-xl-10 {
    -webkit-box-ordinal-group: 11;
    -ms-flex-order: 10;
    order: 10;
  }
  .order-xl-11 {
    -webkit-box-ordinal-group: 12;
    -ms-flex-order: 11;
    order: 11;
  }
  .order-xl-12 {
    -webkit-box-ordinal-group: 13;
    -ms-flex-order: 12;
    order: 12;
  }
  .offset-xl-0 {
    margin-left: 0;
  }
  .offset-xl-1 {
    margin-left: 8.333333%;
  }
  .offset-xl-2 {
    margin-left: 16.666667%;
  }
  .offset-xl-3 {
    margin-left: 25%;
  }
  .offset-xl-4 {
    margin-left: 33.333333%;
  }
  .offset-xl-5 {
    margin-left: 41.666667%;
  }
  .offset-xl-6 {
    margin-left: 50%;
  }
  .offset-xl-7 {
    margin-left: 58.333333%;
  }
  .offset-xl-8 {
    margin-left: 66.666667%;
  }
  .offset-xl-9 {
    margin-left: 75%;
  }
  .offset-xl-10 {
    margin-left: 83.333333%;
  }
  .offset-xl-11 {
    margin-left: 91.666667%;
  }
}
.table {
  width: 100%;
  max-width: 100%;
  margin-bottom: 1rem;
  background-color: transparent;
}
.table td,
.table th {
  padding: 0.75rem;
  vertical-align: top;
  border-top: 1px solid #dee2e6;
}
.table thead th {
  vertical-align: bottom;
  border-bottom: 2px solid #dee2e6;
}
.table tbody + tbody {
  border-top: 2px solid #dee2e6;
}
.table .table {
  background-color: #fff;
}
.table-sm td,
.table-sm th {
  padding: 0.3rem;
}
.table-bordered {
  border: 1px solid #dee2e6;
}
.table-bordered td,
.table-bordered th {
  border: 1px solid #dee2e6;
}
.table-bordered thead td,
.table-bordered thead th {
  border-bottom-width: 2px;
}
.table-striped tbody tr:nth-of-type(odd) {
  background-color: rgba(0, 0, 0, 0.05);
}
.table-hover tbody tr:hover {
  background-color: rgba(0, 0, 0, 0.075);
}
.table-primary,
.table-primary > td,
.table-primary > th {
  background-color: #b8daff;
}
.table-hover .table-primary:hover {
  background-color: #9fcdff;
}
.table-hover .table-primary:hover > td,
.table-hover .table-primary:hover > th {
  background-color: #9fcdff;
}
.table-secondary,
.table-secondary > td,
.table-secondary > th {
  background-color: #d6d8db;
}
.table-hover .table-secondary:hover {
  background-color: #c8cbcf;
}
.table-hover .table-secondary:hover > td,
.table-hover .table-secondary:hover > th {
  background-color: #c8cbcf;
}
.table-success,
.table-success > td,
.table-success > th {
  background-color: #c3e6cb;
}
.table-hover .table-success:hover {
  background-color: #b1dfbb;
}
.table-hover .table-success:hover > td,
.table-hover .table-success:hover > th {
  background-color: #b1dfbb;
}
.table-info,
.table-info > td,
.table-info > th {
  background-color: #bee5eb;
}
.table-hover .table-info:hover {
  background-color: #abdde5;
}
.table-hover .table-info:hover > td,
.table-hover .table-info:hover > th {
  background-color: #abdde5;
}
.table-warning,
.table-warning > td,
.table-warning > th {
  background-color: #ffeeba;
}
.table-hover .table-warning:hover {
  background-color: #ffe8a1;
}
.table-hover .table-warning:hover > td,
.table-hover .table-warning:hover > th {
  background-color: #ffe8a1;
}
.table-danger,
.table-danger > td,
.table-danger > th {
  background-color: #f5c6cb;
}
.table-hover .table-danger:hover {
  background-color: #f1b0b7;
}
.table-hover .table-danger:hover > td,
.table-hover .table-danger:hover > th {
  background-color: #f1b0b7;
}
.table-light,
.table-light > td,
.table-light > th {
  background-color: #fdfdfe;
}
.table-hover .table-light:hover {
  background-color: #ececf6;
}
.table-hover .table-light:hover > td,
.table-hover .table-light:hover > th {
  background-color: #ececf6;
}
.table-dark,
.table-dark > td,
.table-dark > th {
  background-color: #c6c8ca;
}
.table-hover .table-dark:hover {
  background-color: #b9bbbe;
}
.table-hover .table-dark:hover > td,
.table-hover .table-dark:hover > th {
  background-color: #b9bbbe;
}
.table-active,
.table-active > td,
.table-active > th {
  background-color: rgba(0, 0, 0, 0.075);
}
.table-hover .table-active:hover {
  background-color: rgba(0, 0, 0, 0.075);
}
.table-hover .table-active:hover > td,
.table-hover .table-active:hover > th {
  background-color: rgba(0, 0, 0, 0.075);
}
.table .thead-dark th {
  color: #fff;
  background-color: #212529;
  border-color: #32383e;
}
.table .thead-light th {
  color: #495057;
  background-color: #e9ecef;
  border-color: #dee2e6;
}
.table-dark {
  color: #fff;
  background-color: #212529;
}
.table-dark td,
.table-dark th,
.table-dark thead th {
  border-color: #32383e;
}
.table-dark.table-bordered {
  border: 0;
}
.table-dark.table-striped tbody tr:nth-of-type(odd) {
  background-color: rgba(255, 255, 255, 0.05);
}
.table-dark.table-hover tbody tr:hover {
  background-color: rgba(255, 255, 255, 0.075);
}
@media (max-width: 575.98px) {
  .table-responsive-sm {
    display: block;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: -ms-autohiding-scrollbar;
  }
  .table-responsive-sm > .table-bordered {
    border: 0;
  }
}
@media (max-width: 767.98px) {
  .table-responsive-md {
    display: block;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: -ms-autohiding-scrollbar;
  }
  .table-responsive-md > .table-bordered {
    border: 0;
  }
}
@media (max-width: 991.98px) {
  .table-responsive-lg {
    display: block;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: -ms-autohiding-scrollbar;
  }
  .table-responsive-lg > .table-bordered {
    border: 0;
  }
}
@media (max-width: 1199.98px) {
  .table-responsive-xl {
    display: block;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: -ms-autohiding-scrollbar;
  }
  .table-responsive-xl > .table-bordered {
    border: 0;
  }
}
.table-responsive {
  display: block;
  width: 100%;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: -ms-autohiding-scrollbar;
}
.table-responsive > .table-bordered {
  border: 0;
}
.form-control {
  display: block;
  width: 100%;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  color: #495057;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}
.form-control::-ms-expand {
  background-color: transparent;
  border: 0;
}
.form-control:focus {
  color: #495057;
  background-color: #fff;
  border-color: #80bdff;
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
.form-control::-webkit-input-placeholder {
  color: #6c757d;
  opacity: 1;
}
.form-control::-moz-placeholder {
  color: #6c757d;
  opacity: 1;
}
.form-control:-ms-input-placeholder {
  color: #6c757d;
  opacity: 1;
}
.form-control::-ms-input-placeholder {
  color: #6c757d;
  opacity: 1;
}
.form-control::placeholder {
  color: #6c757d;
  opacity: 1;
}
.form-control:disabled,
.form-control[readonly] {
  background-color: #e9ecef;
  opacity: 1;
}
select.form-control:not([size]):not([multiple]) {
  height: calc(2.25rem + 2px);
}
select.form-control:focus::-ms-value {
  color: #495057;
  background-color: #fff;
}
.form-control-file,
.form-control-range {
  display: block;
  width: 100%;
}
.col-form-label {
  padding-top: calc(0.375rem + 1px);
  padding-bottom: calc(0.375rem + 1px);
  margin-bottom: 0;
  font-size: inherit;
  line-height: 1.5;
}
.col-form-label-lg {
  padding-top: calc(0.5rem + 1px);
  padding-bottom: calc(0.5rem + 1px);
  font-size: 1.25rem;
  line-height: 1.5;
}
.col-form-label-sm {
  padding-top: calc(0.25rem + 1px);
  padding-bottom: calc(0.25rem + 1px);
  font-size: 0.875rem;
  line-height: 1.5;
}
.form-control-plaintext {
  display: block;
  width: 100%;
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  margin-bottom: 0;
  line-height: 1.5;
  background-color: transparent;
  border: solid transparent;
  border-width: 1px 0;
}
.form-control-plaintext.form-control-lg,
.form-control-plaintext.form-control-sm,
.input-group-lg > .form-control-plaintext.form-control,
.input-group-lg > .input-group-append > .form-control-plaintext.btn,
.input-group-lg
  > .input-group-append
  > .form-control-plaintext.input-group-text,
.input-group-lg > .input-group-prepend > .form-control-plaintext.btn,
.input-group-lg
  > .input-group-prepend
  > .form-control-plaintext.input-group-text,
.input-group-sm > .form-control-plaintext.form-control,
.input-group-sm > .input-group-append > .form-control-plaintext.btn,
.input-group-sm
  > .input-group-append
  > .form-control-plaintext.input-group-text,
.input-group-sm > .input-group-prepend > .form-control-plaintext.btn,
.input-group-sm
  > .input-group-prepend
  > .form-control-plaintext.input-group-text {
  padding-right: 0;
  padding-left: 0;
}
.form-control-sm,
.input-group-sm > .form-control,
.input-group-sm > .input-group-append > .btn,
.input-group-sm > .input-group-append > .input-group-text,
.input-group-sm > .input-group-prepend > .btn,
.input-group-sm > .input-group-prepend > .input-group-text {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: 0.2rem;
}
.input-group-sm > .input-group-append > select.btn:not([size]):not([multiple]),
.input-group-sm
  > .input-group-append
  > select.input-group-text:not([size]):not([multiple]),
.input-group-sm > .input-group-prepend > select.btn:not([size]):not([multiple]),
.input-group-sm
  > .input-group-prepend
  > select.input-group-text:not([size]):not([multiple]),
.input-group-sm > select.form-control:not([size]):not([multiple]),
select.form-control-sm:not([size]):not([multiple]) {
  height: calc(1.8125rem + 2px);
}
.form-control-lg,
.input-group-lg > .form-control,
.input-group-lg > .input-group-append > .btn,
.input-group-lg > .input-group-append > .input-group-text,
.input-group-lg > .input-group-prepend > .btn,
.input-group-lg > .input-group-prepend > .input-group-text {
  padding: 0.5rem 1rem;
  font-size: 1.25rem;
  line-height: 1.5;
  border-radius: 0.3rem;
}
.input-group-lg > .input-group-append > select.btn:not([size]):not([multiple]),
.input-group-lg
  > .input-group-append
  > select.input-group-text:not([size]):not([multiple]),
.input-group-lg > .input-group-prepend > select.btn:not([size]):not([multiple]),
.input-group-lg
  > .input-group-prepend
  > select.input-group-text:not([size]):not([multiple]),
.input-group-lg > select.form-control:not([size]):not([multiple]),
select.form-control-lg:not([size]):not([multiple]) {
  height: calc(2.875rem + 2px);
}
.form-group {
  margin-bottom: 1rem;
}
.form-text {
  display: block;
  margin-top: 0.25rem;
}
.form-row {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: -5px;
  margin-left: -5px;
}
.form-row > .col,
.form-row > [class*="col-"] {
  padding-right: 5px;
  padding-left: 5px;
}
.form-check {
  position: relative;
  display: block;
  padding-left: 1.25rem;
}
.form-check-input {
  position: absolute;
  margin-top: 0.3rem;
  margin-left: -1.25rem;
}
.form-check-input:disabled ~ .form-check-label {
  color: #6c757d;
}
.form-check-label {
  margin-bottom: 0;
}
.form-check-inline {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding-left: 0;
  margin-right: 0.75rem;
}
.form-check-inline .form-check-input {
  position: static;
  margin-top: 0;
  margin-right: 0.3125rem;
  margin-left: 0;
}
.valid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 80%;
  color: #28a745;
}
.valid-tooltip {
  position: absolute;
  top: 100%;
  z-index: 5;
  display: none;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 0.1rem;
  font-size: 0.875rem;
  line-height: 1;
  color: #fff;
  background-color: rgba(40, 167, 69, 0.8);
  border-radius: 0.2rem;
}
.custom-select.is-valid,
.form-control.is-valid,
.was-validated .custom-select:valid,
.was-validated .form-control:valid {
  border-color: #28a745;
}
.custom-select.is-valid:focus,
.form-control.is-valid:focus,
.was-validated .custom-select:valid:focus,
.was-validated .form-control:valid:focus {
  border-color: #28a745;
  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
}
.custom-select.is-valid ~ .valid-feedback,
.custom-select.is-valid ~ .valid-tooltip,
.form-control.is-valid ~ .valid-feedback,
.form-control.is-valid ~ .valid-tooltip,
.was-validated .custom-select:valid ~ .valid-feedback,
.was-validated .custom-select:valid ~ .valid-tooltip,
.was-validated .form-control:valid ~ .valid-feedback,
.was-validated .form-control:valid ~ .valid-tooltip {
  display: block;
}
.form-check-input.is-valid ~ .form-check-label,
.was-validated .form-check-input:valid ~ .form-check-label {
  color: #28a745;
}
.form-check-input.is-valid ~ .valid-feedback,
.form-check-input.is-valid ~ .valid-tooltip,
.was-validated .form-check-input:valid ~ .valid-feedback,
.was-validated .form-check-input:valid ~ .valid-tooltip {
  display: block;
}
.custom-control-input.is-valid ~ .custom-control-label,
.was-validated .custom-control-input:valid ~ .custom-control-label {
  color: #28a745;
}
.custom-control-input.is-valid ~ .custom-control-label::before,
.was-validated .custom-control-input:valid ~ .custom-control-label::before {
  background-color: #71dd8a;
}
.custom-control-input.is-valid ~ .valid-feedback,
.custom-control-input.is-valid ~ .valid-tooltip,
.was-validated .custom-control-input:valid ~ .valid-feedback,
.was-validated .custom-control-input:valid ~ .valid-tooltip {
  display: block;
}
.custom-control-input.is-valid:checked ~ .custom-control-label::before,
.was-validated
  .custom-control-input:valid:checked
  ~ .custom-control-label::before {
  background-color: #34ce57;
}
.custom-control-input.is-valid:focus ~ .custom-control-label::before,
.was-validated
  .custom-control-input:valid:focus
  ~ .custom-control-label::before {
  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
}
.custom-file-input.is-valid ~ .custom-file-label,
.was-validated .custom-file-input:valid ~ .custom-file-label {
  border-color: #28a745;
}
.custom-file-input.is-valid ~ .custom-file-label::before,
.was-validated .custom-file-input:valid ~ .custom-file-label::before {
  border-color: inherit;
}
.custom-file-input.is-valid ~ .valid-feedback,
.custom-file-input.is-valid ~ .valid-tooltip,
.was-validated .custom-file-input:valid ~ .valid-feedback,
.was-validated .custom-file-input:valid ~ .valid-tooltip {
  display: block;
}
.custom-file-input.is-valid:focus ~ .custom-file-label,
.was-validated .custom-file-input:valid:focus ~ .custom-file-label {
  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
}
.invalid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 80%;
  color: #dc3545;
}
.invalid-tooltip {
  position: absolute;
  top: 100%;
  z-index: 5;
  display: none;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 0.1rem;
  font-size: 0.875rem;
  line-height: 1;
  color: #fff;
  background-color: rgba(220, 53, 69, 0.8);
  border-radius: 0.2rem;
}
.custom-select.is-invalid,
.form-control.is-invalid,
.was-validated .custom-select:invalid,
.was-validated .form-control:invalid {
  border-color: #dc3545;
}
.custom-select.is-invalid:focus,
.form-control.is-invalid:focus,
.was-validated .custom-select:invalid:focus,
.was-validated .form-control:invalid:focus {
  border-color: #dc3545;
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
}
.custom-select.is-invalid ~ .invalid-feedback,
.custom-select.is-invalid ~ .invalid-tooltip,
.form-control.is-invalid ~ .invalid-feedback,
.form-control.is-invalid ~ .invalid-tooltip,
.was-validated .custom-select:invalid ~ .invalid-feedback,
.was-validated .custom-select:invalid ~ .invalid-tooltip,
.was-validated .form-control:invalid ~ .invalid-feedback,
.was-validated .form-control:invalid ~ .invalid-tooltip {
  display: block;
}
.form-check-input.is-invalid ~ .form-check-label,
.was-validated .form-check-input:invalid ~ .form-check-label {
  color: #dc3545;
}
.form-check-input.is-invalid ~ .invalid-feedback,
.form-check-input.is-invalid ~ .invalid-tooltip,
.was-validated .form-check-input:invalid ~ .invalid-feedback,
.was-validated .form-check-input:invalid ~ .invalid-tooltip {
  display: block;
}
.custom-control-input.is-invalid ~ .custom-control-label,
.was-validated .custom-control-input:invalid ~ .custom-control-label {
  color: #dc3545;
}
.custom-control-input.is-invalid ~ .custom-control-label::before,
.was-validated .custom-control-input:invalid ~ .custom-control-label::before {
  background-color: #efa2a9;
}
.custom-control-input.is-invalid ~ .invalid-feedback,
.custom-control-input.is-invalid ~ .invalid-tooltip,
.was-validated .custom-control-input:invalid ~ .invalid-feedback,
.was-validated .custom-control-input:invalid ~ .invalid-tooltip {
  display: block;
}
.custom-control-input.is-invalid:checked ~ .custom-control-label::before,
.was-validated
  .custom-control-input:invalid:checked
  ~ .custom-control-label::before {
  background-color: #e4606d;
}
.custom-control-input.is-invalid:focus ~ .custom-control-label::before,
.was-validated
  .custom-control-input:invalid:focus
  ~ .custom-control-label::before {
  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
}
.custom-file-input.is-invalid ~ .custom-file-label,
.was-validated .custom-file-input:invalid ~ .custom-file-label {
  border-color: #dc3545;
}
.custom-file-input.is-invalid ~ .custom-file-label::before,
.was-validated .custom-file-input:invalid ~ .custom-file-label::before {
  border-color: inherit;
}
.custom-file-input.is-invalid ~ .invalid-feedback,
.custom-file-input.is-invalid ~ .invalid-tooltip,
.was-validated .custom-file-input:invalid ~ .invalid-feedback,
.was-validated .custom-file-input:invalid ~ .invalid-tooltip {
  display: block;
}
.custom-file-input.is-invalid:focus ~ .custom-file-label,
.was-validated .custom-file-input:invalid:focus ~ .custom-file-label {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
}
.form-inline {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-flow: row wrap;
  flex-flow: row wrap;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}
.form-inline .form-check {
  width: 100%;
}
@media (min-width: 576px) {
  .form-inline label {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    margin-bottom: 0;
  }
  .form-inline .form-group {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-flex: 0;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row wrap;
    flex-flow: row wrap;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    margin-bottom: 0;
  }
  .form-inline .form-control {
    display: inline-block;
    width: auto;
    vertical-align: middle;
  }
  .form-inline .form-control-plaintext {
    display: inline-block;
  }
  .form-inline .input-group {
    width: auto;
  }
  .form-inline .form-check {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    width: auto;
    padding-left: 0;
  }
  .form-inline .form-check-input {
    position: relative;
    margin-top: 0;
    margin-right: 0.25rem;
    margin-left: 0;
  }
  .form-inline .custom-control {
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
  }
  .form-inline .custom-control-label {
    margin-bottom: 0;
  }
}
.btn {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  border-radius: 0.25rem;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,
    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}
.btn:focus,
.btn:hover {
  text-decoration: none;
}
.btn.focus,
.btn:focus {
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
.btn.disabled,
.btn:disabled {
  opacity: 0.65;
}
.btn:not(:disabled):not(.disabled) {
  cursor: pointer;
}
.btn:not(:disabled):not(.disabled).active,
.btn:not(:disabled):not(.disabled):active {
  background-image: none;
}
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}
.btn-primary {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
.btn-primary:hover {
  color: #fff;
  background-color: #0069d9;
  border-color: #0062cc;
}
.btn-primary.focus,
.btn-primary:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
}
.btn-primary.disabled,
.btn-primary:disabled {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
.btn-primary:not(:disabled):not(.disabled).active,
.btn-primary:not(:disabled):not(.disabled):active,
.show > .btn-primary.dropdown-toggle {
  color: #fff;
  background-color: #0062cc;
  border-color: #005cbf;
}
.btn-primary:not(:disabled):not(.disabled).active:focus,
.btn-primary:not(:disabled):not(.disabled):active:focus,
.show > .btn-primary.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
}
.btn-secondary {
  color: #fff;
  background-color: #6c757d;
  border-color: #6c757d;
}
.btn-secondary:hover {
  color: #fff;
  background-color: #5a6268;
  border-color: #545b62;
}
.btn-secondary.focus,
.btn-secondary:focus {
  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);
}
.btn-secondary.disabled,
.btn-secondary:disabled {
  color: #fff;
  background-color: #6c757d;
  border-color: #6c757d;
}
.btn-secondary:not(:disabled):not(.disabled).active,
.btn-secondary:not(:disabled):not(.disabled):active,
.show > .btn-secondary.dropdown-toggle {
  color: #fff;
  background-color: #545b62;
  border-color: #4e555b;
}
.btn-secondary:not(:disabled):not(.disabled).active:focus,
.btn-secondary:not(:disabled):not(.disabled):active:focus,
.show > .btn-secondary.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);
}
.btn-success {
  color: #fff;
  background-color: #28a745;
  border-color: #28a745;
}
.btn-success:hover {
  color: #fff;
  background-color: #218838;
  border-color: #1e7e34;
}
.btn-success.focus,
.btn-success:focus {
  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);
}
.btn-success.disabled,
.btn-success:disabled {
  color: #fff;
  background-color: #28a745;
  border-color: #28a745;
}
.btn-success:not(:disabled):not(.disabled).active,
.btn-success:not(:disabled):not(.disabled):active,
.show > .btn-success.dropdown-toggle {
  color: #fff;
  background-color: #1e7e34;
  border-color: #1c7430;
}
.btn-success:not(:disabled):not(.disabled).active:focus,
.btn-success:not(:disabled):not(.disabled):active:focus,
.show > .btn-success.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);
}
.btn-info {
  color: #fff;
  background-color: #17a2b8;
  border-color: #17a2b8;
}
.btn-info:hover {
  color: #fff;
  background-color: #138496;
  border-color: #117a8b;
}
.btn-info.focus,
.btn-info:focus {
  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);
}
.btn-info.disabled,
.btn-info:disabled {
  color: #fff;
  background-color: #17a2b8;
  border-color: #17a2b8;
}
.btn-info:not(:disabled):not(.disabled).active,
.btn-info:not(:disabled):not(.disabled):active,
.show > .btn-info.dropdown-toggle {
  color: #fff;
  background-color: #117a8b;
  border-color: #10707f;
}
.btn-info:not(:disabled):not(.disabled).active:focus,
.btn-info:not(:disabled):not(.disabled):active:focus,
.show > .btn-info.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);
}
.btn-warning {
  color: #212529;
  background-color: #ffc107;
  border-color: #ffc107;
}
.btn-warning:hover {
  color: #212529;
  background-color: #e0a800;
  border-color: #d39e00;
}
.btn-warning.focus,
.btn-warning:focus {
  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);
}
.btn-warning.disabled,
.btn-warning:disabled {
  color: #212529;
  background-color: #ffc107;
  border-color: #ffc107;
}
.btn-warning:not(:disabled):not(.disabled).active,
.btn-warning:not(:disabled):not(.disabled):active,
.show > .btn-warning.dropdown-toggle {
  color: #212529;
  background-color: #d39e00;
  border-color: #c69500;
}
.btn-warning:not(:disabled):not(.disabled).active:focus,
.btn-warning:not(:disabled):not(.disabled):active:focus,
.show > .btn-warning.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);
}
.btn-danger {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}
.btn-danger:hover {
  color: #fff;
  background-color: #c82333;
  border-color: #bd2130;
}
.btn-danger.focus,
.btn-danger:focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);
}
.btn-danger.disabled,
.btn-danger:disabled {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}
.btn-danger:not(:disabled):not(.disabled).active,
.btn-danger:not(:disabled):not(.disabled):active,
.show > .btn-danger.dropdown-toggle {
  color: #fff;
  background-color: #bd2130;
  border-color: #b21f2d;
}
.btn-danger:not(:disabled):not(.disabled).active:focus,
.btn-danger:not(:disabled):not(.disabled):active:focus,
.show > .btn-danger.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);
}
.btn-light {
  color: #212529;
  background-color: #f8f9fa;
  border-color: #f8f9fa;
}
.btn-light:hover {
  color: #212529;
  background-color: #e2e6ea;
  border-color: #dae0e5;
}
.btn-light.focus,
.btn-light:focus {
  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);
}
.btn-light.disabled,
.btn-light:disabled {
  color: #212529;
  background-color: #f8f9fa;
  border-color: #f8f9fa;
}
.btn-light:not(:disabled):not(.disabled).active,
.btn-light:not(:disabled):not(.disabled):active,
.show > .btn-light.dropdown-toggle {
  color: #212529;
  background-color: #dae0e5;
  border-color: #d3d9df;
}
.btn-light:not(:disabled):not(.disabled).active:focus,
.btn-light:not(:disabled):not(.disabled):active:focus,
.show > .btn-light.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);
}
.btn-dark {
  color: #fff;
  background-color: #343a40;
  border-color: #343a40;
}
.btn-dark:hover {
  color: #fff;
  background-color: #23272b;
  border-color: #1d2124;
}
.btn-dark.focus,
.btn-dark:focus {
  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);
}
.btn-dark.disabled,
.btn-dark:disabled {
  color: #fff;
  background-color: #343a40;
  border-color: #343a40;
}
.btn-dark:not(:disabled):not(.disabled).active,
.btn-dark:not(:disabled):not(.disabled):active,
.show > .btn-dark.dropdown-toggle {
  color: #fff;
  background-color: #1d2124;
  border-color: #171a1d;
}
.btn-dark:not(:disabled):not(.disabled).active:focus,
.btn-dark:not(:disabled):not(.disabled):active:focus,
.show > .btn-dark.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);
}
.btn-outline-primary {
  color: #007bff;
  background-color: transparent;
  background-image: none;
  border-color: #007bff;
}
.btn-outline-primary:hover {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
.btn-outline-primary.focus,
.btn-outline-primary:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
}
.btn-outline-primary.disabled,
.btn-outline-primary:disabled {
  color: #007bff;
  background-color: transparent;
}
.btn-outline-primary:not(:disabled):not(.disabled).active,
.btn-outline-primary:not(:disabled):not(.disabled):active,
.show > .btn-outline-primary.dropdown-toggle {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
.btn-outline-primary:not(:disabled):not(.disabled).active:focus,
.btn-outline-primary:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-primary.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
}
.btn-outline-secondary {
  color: #6c757d;
  background-color: transparent;
  background-image: none;
  border-color: #6c757d;
}
.btn-outline-secondary:hover {
  color: #fff;
  background-color: #6c757d;
  border-color: #6c757d;
}
.btn-outline-secondary.focus,
.btn-outline-secondary:focus {
  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);
}
.btn-outline-secondary.disabled,
.btn-outline-secondary:disabled {
  color: #6c757d;
  background-color: transparent;
}
.btn-outline-secondary:not(:disabled):not(.disabled).active,
.btn-outline-secondary:not(:disabled):not(.disabled):active,
.show > .btn-outline-secondary.dropdown-toggle {
  color: #fff;
  background-color: #6c757d;
  border-color: #6c757d;
}
.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,
.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-secondary.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);
}
.btn-outline-success {
  color: #28a745;
  background-color: transparent;
  background-image: none;
  border-color: #28a745;
}
.btn-outline-success:hover {
  color: #fff;
  background-color: #28a745;
  border-color: #28a745;
}
.btn-outline-success.focus,
.btn-outline-success:focus {
  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);
}
.btn-outline-success.disabled,
.btn-outline-success:disabled {
  color: #28a745;
  background-color: transparent;
}
.btn-outline-success:not(:disabled):not(.disabled).active,
.btn-outline-success:not(:disabled):not(.disabled):active,
.show > .btn-outline-success.dropdown-toggle {
  color: #fff;
  background-color: #28a745;
  border-color: #28a745;
}
.btn-outline-success:not(:disabled):not(.disabled).active:focus,
.btn-outline-success:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-success.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);
}
.btn-outline-info {
  color: #17a2b8;
  background-color: transparent;
  background-image: none;
  border-color: #17a2b8;
}
.btn-outline-info:hover {
  color: #fff;
  background-color: #17a2b8;
  border-color: #17a2b8;
}
.btn-outline-info.focus,
.btn-outline-info:focus {
  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);
}
.btn-outline-info.disabled,
.btn-outline-info:disabled {
  color: #17a2b8;
  background-color: transparent;
}
.btn-outline-info:not(:disabled):not(.disabled).active,
.btn-outline-info:not(:disabled):not(.disabled):active,
.show > .btn-outline-info.dropdown-toggle {
  color: #fff;
  background-color: #17a2b8;
  border-color: #17a2b8;
}
.btn-outline-info:not(:disabled):not(.disabled).active:focus,
.btn-outline-info:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-info.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);
}
.btn-outline-warning {
  color: #ffc107;
  background-color: transparent;
  background-image: none;
  border-color: #ffc107;
}
.btn-outline-warning:hover {
  color: #212529;
  background-color: #ffc107;
  border-color: #ffc107;
}
.btn-outline-warning.focus,
.btn-outline-warning:focus {
  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);
}
.btn-outline-warning.disabled,
.btn-outline-warning:disabled {
  color: #ffc107;
  background-color: transparent;
}
.btn-outline-warning:not(:disabled):not(.disabled).active,
.btn-outline-warning:not(:disabled):not(.disabled):active,
.show > .btn-outline-warning.dropdown-toggle {
  color: #212529;
  background-color: #ffc107;
  border-color: #ffc107;
}
.btn-outline-warning:not(:disabled):not(.disabled).active:focus,
.btn-outline-warning:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-warning.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);
}
.btn-outline-danger {
  color: #dc3545;
  background-color: transparent;
  background-image: none;
  border-color: #dc3545;
}
.btn-outline-danger:hover {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}
.btn-outline-danger.focus,
.btn-outline-danger:focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);
}
.btn-outline-danger.disabled,
.btn-outline-danger:disabled {
  color: #dc3545;
  background-color: transparent;
}
.btn-outline-danger:not(:disabled):not(.disabled).active,
.btn-outline-danger:not(:disabled):not(.disabled):active,
.show > .btn-outline-danger.dropdown-toggle {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}
.btn-outline-danger:not(:disabled):not(.disabled).active:focus,
.btn-outline-danger:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-danger.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);
}
.btn-outline-light {
  color: #f8f9fa;
  background-color: transparent;
  background-image: none;
  border-color: #f8f9fa;
}
.btn-outline-light:hover {
  color: #212529;
  background-color: #f8f9fa;
  border-color: #f8f9fa;
}
.btn-outline-light.focus,
.btn-outline-light:focus {
  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);
}
.btn-outline-light.disabled,
.btn-outline-light:disabled {
  color: #f8f9fa;
  background-color: transparent;
}
.btn-outline-light:not(:disabled):not(.disabled).active,
.btn-outline-light:not(:disabled):not(.disabled):active,
.show > .btn-outline-light.dropdown-toggle {
  color: #212529;
  background-color: #f8f9fa;
  border-color: #f8f9fa;
}
.btn-outline-light:not(:disabled):not(.disabled).active:focus,
.btn-outline-light:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-light.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);
}
.btn-outline-dark {
  color: #343a40;
  background-color: transparent;
  background-image: none;
  border-color: #343a40;
}
.btn-outline-dark:hover {
  color: #fff;
  background-color: #343a40;
  border-color: #343a40;
}
.btn-outline-dark.focus,
.btn-outline-dark:focus {
  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);
}
.btn-outline-dark.disabled,
.btn-outline-dark:disabled {
  color: #343a40;
  background-color: transparent;
}
.btn-outline-dark:not(:disabled):not(.disabled).active,
.btn-outline-dark:not(:disabled):not(.disabled):active,
.show > .btn-outline-dark.dropdown-toggle {
  color: #fff;
  background-color: #343a40;
  border-color: #343a40;
}
.btn-outline-dark:not(:disabled):not(.disabled).active:focus,
.btn-outline-dark:not(:disabled):not(.disabled):active:focus,
.show > .btn-outline-dark.dropdown-toggle:focus {
  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);
}
.btn-link {
  font-weight: 400;
  color: #007bff;
  background-color: transparent;
}
.btn-link:hover {
  color: #0056b3;
  text-decoration: underline;
  background-color: transparent;
  border-color: transparent;
}
.btn-link.focus,
.btn-link:focus {
  text-decoration: underline;
  border-color: transparent;
  box-shadow: none;
}
.btn-link.disabled,
.btn-link:disabled {
  color: #6c757d;
}
.btn-group-lg > .btn,
.btn-lg {
  padding: 0.5rem 1rem;
  font-size: 1.25rem;
  line-height: 1.5;
  border-radius: 0.3rem;
}
.btn-group-sm > .btn,
.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: 0.2rem;
}
.btn-block {
  display: block;
  width: 100%;
}
.btn-block + .btn-block {
  margin-top: 0.5rem;
}
input[type="button"].btn-block,
input[type="reset"].btn-block,
input[type="submit"].btn-block {
  width: 100%;
}
.fade {
  opacity: 0;
  transition: opacity 0.15s linear;
}
.fade.show {
  opacity: 1;
}
.collapse {
  display: none;
}
.collapse.show {
  display: block;
}
tr.collapse.show {
  display: table-row;
}
tbody.collapse.show {
  display: table-row-group;
}
.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  transition: height 0.35s ease;
}
.dropdown,
.dropup {
  position: relative;
}
.dropdown-toggle::after {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0.3em solid;
  border-right: 0.3em solid transparent;
  border-bottom: 0;
  border-left: 0.3em solid transparent;
}
.dropdown-toggle:empty::after {
  margin-left: 0;
}
.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 1000;
  display: none;
  float: left;
  min-width: 10rem;
  padding: 0.5rem 0;
  margin: 0.125rem 0 0;
  font-size: 1rem;
  color: #212529;
  text-align: left;
  list-style: none;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 0.25rem;
}
.dropup .dropdown-menu {
  margin-top: 0;
  margin-bottom: 0.125rem;
}
.dropup .dropdown-toggle::after {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0;
  border-right: 0.3em solid transparent;
  border-bottom: 0.3em solid;
  border-left: 0.3em solid transparent;
}
.dropup .dropdown-toggle:empty::after {
  margin-left: 0;
}
.dropright .dropdown-menu {
  margin-top: 0;
  margin-left: 0.125rem;
}
.dropright .dropdown-toggle::after {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0.3em solid transparent;
  border-bottom: 0.3em solid transparent;
  border-left: 0.3em solid;
}
.dropright .dropdown-toggle:empty::after {
  margin-left: 0;
}
.dropright .dropdown-toggle::after {
  vertical-align: 0;
}
.dropleft .dropdown-menu {
  margin-top: 0;
  margin-right: 0.125rem;
}
.dropleft .dropdown-toggle::after {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
}
.dropleft .dropdown-toggle::after {
  display: none;
}
.dropleft .dropdown-toggle::before {
  display: inline-block;
  width: 0;
  height: 0;
  margin-right: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0.3em solid transparent;
  border-right: 0.3em solid;
  border-bottom: 0.3em solid transparent;
}
.dropleft .dropdown-toggle:empty::after {
  margin-left: 0;
}
.dropleft .dropdown-toggle::before {
  vertical-align: 0;
}
.dropdown-divider {
  height: 0;
  margin: 0.5rem 0;
  overflow: hidden;
  border-top: 1px solid #e9ecef;
}
.dropdown-item {
  display: block;
  width: 100%;
  padding: 0.25rem 1.5rem;
  clear: both;
  font-weight: 400;
  color: #212529;
  text-align: inherit;
  white-space: nowrap;
  background-color: transparent;
  border: 0;
}
.dropdown-item:focus,
.dropdown-item:hover {
  color: #16181b;
  text-decoration: none;
  background-color: #f8f9fa;
}
.dropdown-item.active,
.dropdown-item:active {
  color: #fff;
  text-decoration: none;
  background-color: #007bff;
}
.dropdown-item.disabled,
.dropdown-item:disabled {
  color: #6c757d;
  background-color: transparent;
}
.dropdown-menu.show {
  display: block;
}
.dropdown-header {
  display: block;
  padding: 0.5rem 1.5rem;
  margin-bottom: 0;
  font-size: 0.875rem;
  color: #6c757d;
  white-space: nowrap;
}
.btn-group,
.btn-group-vertical {
  position: relative;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  vertical-align: middle;
}
.btn-group-vertical > .btn,
.btn-group > .btn {
  position: relative;
  -webkit-box-flex: 0;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}
.btn-group-vertical > .btn:hover,
.btn-group > .btn:hover {
  z-index: 1;
}
.btn-group-vertical > .btn.active,
.btn-group-vertical > .btn:active,
.btn-group-vertical > .btn:focus,
.btn-group > .btn.active,
.btn-group > .btn:active,
.btn-group > .btn:focus {
  z-index: 1;
}
.btn-group .btn + .btn,
.btn-group .btn + .btn-group,
.btn-group .btn-group + .btn,
.btn-group .btn-group + .btn-group,
.btn-group-vertical .btn + .btn,
.btn-group-vertical .btn + .btn-group,
.btn-group-vertical .btn-group + .btn,
.btn-group-vertical .btn-group + .btn-group {
  margin-left: -1px;
}
.btn-toolbar {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: start;
  -ms-flex-pack: start;
  justify-content: flex-start;
}
.btn-toolbar .input-group {
  width: auto;
}
.btn-group > .btn:first-child {
  margin-left: 0;
}
.btn-group > .btn-group:not(:last-child) > .btn,
.btn-group > .btn:not(:last-child):not(.dropdown-toggle) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
.btn-group > .btn-group:not(:first-child) > .btn,
.btn-group > .btn:not(:first-child) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}
.dropdown-toggle-split {
  padding-right: 0.5625rem;
  padding-left: 0.5625rem;
}
.dropdown-toggle-split::after {
  margin-left: 0;
}
.btn-group-sm > .btn + .dropdown-toggle-split,
.btn-sm + .dropdown-toggle-split {
  padding-right: 0.375rem;
  padding-left: 0.375rem;
}
.btn-group-lg > .btn + .dropdown-toggle-split,
.btn-lg + .dropdown-toggle-split {
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}
.btn-group-vertical {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-align: start;
  -ms-flex-align: start;
  align-items: flex-start;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
}
.btn-group-vertical .btn,
.btn-group-vertical .btn-group {
  width: 100%;
}
.btn-group-vertical > .btn + .btn,
.btn-group-vertical > .btn + .btn-group,
.btn-group-vertical > .btn-group + .btn,
.btn-group-vertical > .btn-group + .btn-group {
  margin-top: -1px;
  margin-left: 0;
}
.btn-group-vertical > .btn-group:not(:last-child) > .btn,
.btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle) {
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}
.btn-group-vertical > .btn-group:not(:first-child) > .btn,
.btn-group-vertical > .btn:not(:first-child) {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.btn-group-toggle > .btn,
.btn-group-toggle > .btn-group > .btn {
  margin-bottom: 0;
}
.btn-group-toggle > .btn input[type="checkbox"],
.btn-group-toggle > .btn input[type="radio"],
.btn-group-toggle > .btn-group > .btn input[type="checkbox"],
.btn-group-toggle > .btn-group > .btn input[type="radio"] {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  pointer-events: none;
}
.input-group {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  width: 100%;
}
.input-group > .custom-file,
.input-group > .custom-select,
.input-group > .form-control {
  position: relative;
  -webkit-box-flex: 1;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  width: 1%;
  margin-bottom: 0;
}
.input-group > .custom-file:focus,
.input-group > .custom-select:focus,
.input-group > .form-control:focus {
  z-index: 3;
}
.input-group > .custom-file + .custom-file,
.input-group > .custom-file + .custom-select,
.input-group > .custom-file + .form-control,
.input-group > .custom-select + .custom-file,
.input-group > .custom-select + .custom-select,
.input-group > .custom-select + .form-control,
.input-group > .form-control + .custom-file,
.input-group > .form-control + .custom-select,
.input-group > .form-control + .form-control {
  margin-left: -1px;
}
.input-group > .custom-select:not(:last-child),
.input-group > .form-control:not(:last-child) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
.input-group > .custom-select:not(:first-child),
.input-group > .form-control:not(:first-child) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}
.input-group > .custom-file {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}
.input-group > .custom-file:not(:last-child) .custom-file-label,
.input-group > .custom-file:not(:last-child) .custom-file-label::before {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
.input-group > .custom-file:not(:first-child) .custom-file-label,
.input-group > .custom-file:not(:first-child) .custom-file-label::before {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}
.input-group-append,
.input-group-prepend {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
.input-group-append .btn,
.input-group-prepend .btn {
  position: relative;
  z-index: 2;
}
.input-group-append .btn + .btn,
.input-group-append .btn + .input-group-text,
.input-group-append .input-group-text + .btn,
.input-group-append .input-group-text + .input-group-text,
.input-group-prepend .btn + .btn,
.input-group-prepend .btn + .input-group-text,
.input-group-prepend .input-group-text + .btn,
.input-group-prepend .input-group-text + .input-group-text {
  margin-left: -1px;
}
.input-group-prepend {
  margin-right: -1px;
}
.input-group-append {
  margin-left: -1px;
}
.input-group-text {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.375rem 0.75rem;
  margin-bottom: 0;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #495057;
  text-align: center;
  white-space: nowrap;
  background-color: #e9ecef;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
}
.input-group-text input[type="checkbox"],
.input-group-text input[type="radio"] {
  margin-top: 0;
}
.input-group
  > .input-group-append:last-child
  > .btn:not(:last-child):not(.dropdown-toggle),
.input-group
  > .input-group-append:last-child
  > .input-group-text:not(:last-child),
.input-group > .input-group-append:not(:last-child) > .btn,
.input-group > .input-group-append:not(:last-child) > .input-group-text,
.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group
  > .input-group-prepend:first-child
  > .input-group-text:not(:first-child),
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}
.custom-control {
  position: relative;
  display: block;
  min-height: 1.5rem;
  padding-left: 1.5rem;
}
.custom-control-inline {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin-right: 1rem;
}
.custom-control-input {
  position: absolute;
  z-index: -1;
  opacity: 0;
}
.custom-control-input:checked ~ .custom-control-label::before {
  color: #fff;
  background-color: #007bff;
}
.custom-control-input:focus ~ .custom-control-label::before {
  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
.custom-control-input:active ~ .custom-control-label::before {
  color: #fff;
  background-color: #b3d7ff;
}
.custom-control-input:disabled ~ .custom-control-label {
  color: #6c757d;
}
.custom-control-input:disabled ~ .custom-control-label::before {
  background-color: #e9ecef;
}
.custom-control-label {
  margin-bottom: 0;
}
.custom-control-label::before {
  position: absolute;
  top: 0.25rem;
  left: 0;
  display: block;
  width: 1rem;
  height: 1rem;
  pointer-events: none;
  content: "";
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  background-color: #dee2e6;
}
.custom-control-label::after {
  position: absolute;
  top: 0.25rem;
  left: 0;
  display: block;
  width: 1rem;
  height: 1rem;
  content: "";
  background-repeat: no-repeat;
  background-position: center center;
  background-size: 50% 50%;
}
.custom-checkbox .custom-control-label::before {
  border-radius: 0.25rem;
}
.custom-checkbox .custom-control-input:checked ~ .custom-control-label::before {
  background-color: #007bff;
}
.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E");
}
.custom-checkbox
  .custom-control-input:indeterminate
  ~ .custom-control-label::before {
  background-color: #007bff;
}
.custom-checkbox
  .custom-control-input:indeterminate
  ~ .custom-control-label::after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='%23fff' d='M0 2h4'/%3E%3C/svg%3E");
}
.custom-checkbox
  .custom-control-input:disabled:checked
  ~ .custom-control-label::before {
  background-color: rgba(0, 123, 255, 0.5);
}
.custom-checkbox
  .custom-control-input:disabled:indeterminate
  ~ .custom-control-label::before {
  background-color: rgba(0, 123, 255, 0.5);
}
.custom-radio .custom-control-label::before {
  border-radius: 50%;
}
.custom-radio .custom-control-input:checked ~ .custom-control-label::before {
  background-color: #007bff;
}
.custom-radio .custom-control-input:checked ~ .custom-control-label::after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E");
}
.custom-radio
  .custom-control-input:disabled:checked
  ~ .custom-control-label::before {
  background-color: rgba(0, 123, 255, 0.5);
}
.custom-select {
  display: inline-block;
  width: 100%;
  height: calc(2.25rem + 2px);
  padding: 0.375rem 1.75rem 0.375rem 0.75rem;
  line-height: 1.5;
  color: #495057;
  vertical-align: middle;
  background: #fff
    url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E")
    no-repeat right 0.75rem center;
  background-size: 8px 10px;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}
.custom-select:focus {
  border-color: #80bdff;
  outline: 0;
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075),
    0 0 5px rgba(128, 189, 255, 0.5);
}
.custom-select:focus::-ms-value {
  color: #495057;
  background-color: #fff;
}
.custom-select[multiple],
.custom-select[size]:not([size="1"]) {
  height: auto;
  padding-right: 0.75rem;
  background-image: none;
}
.custom-select:disabled {
  color: #6c757d;
  background-color: #e9ecef;
}
.custom-select::-ms-expand {
  opacity: 0;
}
.custom-select-sm {
  height: calc(1.8125rem + 2px);
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  font-size: 75%;
}
.custom-select-lg {
  height: calc(2.875rem + 2px);
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  font-size: 125%;
}
.custom-file {
  position: relative;
  display: inline-block;
  width: 100%;
  height: calc(2.25rem + 2px);
  margin-bottom: 0;
}
.custom-file-input {
  position: relative;
  z-index: 2;
  width: 100%;
  height: calc(2.25rem + 2px);
  margin: 0;
  opacity: 0;
}
.custom-file-input:focus ~ .custom-file-control {
  border-color: #80bdff;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
.custom-file-input:focus ~ .custom-file-control::before {
  border-color: #80bdff;
}
.custom-file-input:lang(en) ~ .custom-file-label::after {
  content: "Browse";
}
.custom-file-label {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  z-index: 1;
  height: calc(2.25rem + 2px);
  padding: 0.375rem 0.75rem;
  line-height: 1.5;
  color: #495057;
  background-color: #fff;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
}
.custom-file-label::after {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 3;
  display: block;
  height: calc(calc(2.25rem + 2px) - 1px * 2);
  padding: 0.375rem 0.75rem;
  line-height: 1.5;
  color: #495057;
  content: "Browse";
  background-color: #e9ecef;
  border-left: 1px solid #ced4da;
  border-radius: 0 0.25rem 0.25rem 0;
}
.nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;
}
.nav-link {
  display: block;
  padding: 0.5rem 1rem;
}
.nav-link:focus,
.nav-link:hover {
  text-decoration: none;
}
.nav-link.disabled {
  color: #6c757d;
}
.nav-tabs {
  border-bottom: 1px solid #dee2e6;
}
.nav-tabs .nav-item {
  margin-bottom: -1px;
}
.nav-tabs .nav-link {
  border: 1px solid transparent;
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
}
.nav-tabs .nav-link:focus,
.nav-tabs .nav-link:hover {
  border-color: #e9ecef #e9ecef #dee2e6;
}
.nav-tabs .nav-link.disabled {
  color: #6c757d;
  background-color: transparent;
  border-color: transparent;
}
.nav-tabs .nav-item.show .nav-link,
.nav-tabs .nav-link.active {
  color: #495057;
  background-color: #fff;
  border-color: #dee2e6 #dee2e6 #fff;
}
.nav-tabs .dropdown-menu {
  margin-top: -1px;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.nav-pills .nav-link {
  border-radius: 0.25rem;
}
.nav-pills .nav-link.active,
.nav-pills .show > .nav-link {
  color: #fff;
  background-color: #007bff;
}
.nav-fill .nav-item {
  -webkit-box-flex: 1;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  text-align: center;
}
.nav-justified .nav-item {
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  text-align: center;
}
.tab-content > .tab-pane {
  display: none;
}
.tab-content > .active {
  display: block;
}
.navbar {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0.5rem 1rem;
}
.navbar > .container,
.navbar > .container-fluid {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
}
.navbar-brand {
  display: inline-block;
  padding-top: 0.3125rem;
  padding-bottom: 0.3125rem;
  margin-right: 1rem;
  font-size: 1.25rem;
  line-height: inherit;
  white-space: nowrap;
}
.navbar-brand:focus,
.navbar-brand:hover {
  text-decoration: none;
}
.navbar-nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;
}
.navbar-nav .nav-link {
  padding-right: 0;
  padding-left: 0;
}
.navbar-nav .dropdown-menu {
  position: static;
  float: none;
}
.navbar-text {
  display: inline-block;
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}
.navbar-collapse {
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
  -webkit-box-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}
.navbar-toggler {
  padding: 0.25rem 0.75rem;
  font-size: 1.25rem;
  line-height: 1;
  background-color: transparent;
  border: 1px solid transparent;
  border-radius: 0.25rem;
}
.navbar-toggler:focus,
.navbar-toggler:hover {
  text-decoration: none;
}
.navbar-toggler:not(:disabled):not(.disabled) {
  cursor: pointer;
}
.navbar-toggler-icon {
  display: inline-block;
  width: 1.5em;
  height: 1.5em;
  vertical-align: middle;
  content: "";
  background: no-repeat center center;
  background-size: 100% 100%;
}
@media (max-width: 575.98px) {
  .navbar-expand-sm > .container,
  .navbar-expand-sm > .container-fluid {
    padding-right: 0;
    padding-left: 0;
  }
}
@media (min-width: 576px) {
  .navbar-expand-sm {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row nowrap;
    flex-flow: row nowrap;
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  }
  .navbar-expand-sm .navbar-nav {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
  }
  .navbar-expand-sm .navbar-nav .dropdown-menu {
    position: absolute;
  }
  .navbar-expand-sm .navbar-nav .dropdown-menu-right {
    right: 0;
    left: auto;
  }
  .navbar-expand-sm .navbar-nav .nav-link {
    padding-right: 0.5rem;
    padding-left: 0.5rem;
  }
  .navbar-expand-sm > .container,
  .navbar-expand-sm > .container-fluid {
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  }
  .navbar-expand-sm .navbar-collapse {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
    -ms-flex-preferred-size: auto;
    flex-basis: auto;
  }
  .navbar-expand-sm .navbar-toggler {
    display: none;
  }
  .navbar-expand-sm .dropup .dropdown-menu {
    top: auto;
    bottom: 100%;
  }
}
@media (max-width: 767.98px) {
  .navbar-expand-md > .container,
  .navbar-expand-md > .container-fluid {
    padding-right: 0;
    padding-left: 0;
  }
}
@media (min-width: 768px) {
  .navbar-expand-md {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row nowrap;
    flex-flow: row nowrap;
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  }
  .navbar-expand-md .navbar-nav {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
  }
  .navbar-expand-md .navbar-nav .dropdown-menu {
    position: absolute;
  }
  .navbar-expand-md .navbar-nav .dropdown-menu-right {
    right: 0;
    left: auto;
  }
  .navbar-expand-md .navbar-nav .nav-link {
    padding-right: 0.5rem;
    padding-left: 0.5rem;
  }
  .navbar-expand-md > .container,
  .navbar-expand-md > .container-fluid {
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  }
  .navbar-expand-md .navbar-collapse {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
    -ms-flex-preferred-size: auto;
    flex-basis: auto;
  }
  .navbar-expand-md .navbar-toggler {
    display: none;
  }
  .navbar-expand-md .dropup .dropdown-menu {
    top: auto;
    bottom: 100%;
  }
}
@media (max-width: 991.98px) {
  .navbar-expand-lg > .container,
  .navbar-expand-lg > .container-fluid {
    padding-right: 0;
    padding-left: 0;
  }
}
@media (min-width: 992px) {
  .navbar-expand-lg {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row nowrap;
    flex-flow: row nowrap;
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  }
  .navbar-expand-lg .navbar-nav {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
  }
  .navbar-expand-lg .navbar-nav .dropdown-menu {
    position: absolute;
  }
  .navbar-expand-lg .navbar-nav .dropdown-menu-right {
    right: 0;
    left: auto;
  }
  .navbar-expand-lg .navbar-nav .nav-link {
    padding-right: 0.5rem;
    padding-left: 0.5rem;
  }
  .navbar-expand-lg > .container,
  .navbar-expand-lg > .container-fluid {
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  }
  .navbar-expand-lg .navbar-collapse {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
    -ms-flex-preferred-size: auto;
    flex-basis: auto;
  }
  .navbar-expand-lg .navbar-toggler {
    display: none;
  }
  .navbar-expand-lg .dropup .dropdown-menu {
    top: auto;
    bottom: 100%;
  }
}
@media (max-width: 1199.98px) {
  .navbar-expand-xl > .container,
  .navbar-expand-xl > .container-fluid {
    padding-right: 0;
    padding-left: 0;
  }
}
@media (min-width: 1200px) {
  .navbar-expand-xl {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row nowrap;
    flex-flow: row nowrap;
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  }
  .navbar-expand-xl .navbar-nav {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
  }
  .navbar-expand-xl .navbar-nav .dropdown-menu {
    position: absolute;
  }
  .navbar-expand-xl .navbar-nav .dropdown-menu-right {
    right: 0;
    left: auto;
  }
  .navbar-expand-xl .navbar-nav .nav-link {
    padding-right: 0.5rem;
    padding-left: 0.5rem;
  }
  .navbar-expand-xl > .container,
  .navbar-expand-xl > .container-fluid {
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  }
  .navbar-expand-xl .navbar-collapse {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
    -ms-flex-preferred-size: auto;
    flex-basis: auto;
  }
  .navbar-expand-xl .navbar-toggler {
    display: none;
  }
  .navbar-expand-xl .dropup .dropdown-menu {
    top: auto;
    bottom: 100%;
  }
}
.navbar-expand {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-flow: row nowrap;
  flex-flow: row nowrap;
  -webkit-box-pack: start;
  -ms-flex-pack: start;
  justify-content: flex-start;
}
.navbar-expand > .container,
.navbar-expand > .container-fluid {
  padding-right: 0;
  padding-left: 0;
}
.navbar-expand .navbar-nav {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
}
.navbar-expand .navbar-nav .dropdown-menu {
  position: absolute;
}
.navbar-expand .navbar-nav .dropdown-menu-right {
  right: 0;
  left: auto;
}
.navbar-expand .navbar-nav .nav-link {
  padding-right: 0.5rem;
  padding-left: 0.5rem;
}
.navbar-expand > .container,
.navbar-expand > .container-fluid {
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
}
.navbar-expand .navbar-collapse {
  display: -webkit-box !important;
  display: -ms-flexbox !important;
  display: flex !important;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
}
.navbar-expand .navbar-toggler {
  display: none;
}
.navbar-expand .dropup .dropdown-menu {
  top: auto;
  bottom: 100%;
}
.navbar-light .navbar-brand {
  color: rgba(0, 0, 0, 0.9);
}
.navbar-light .navbar-brand:focus,
.navbar-light .navbar-brand:hover {
  color: rgba(0, 0, 0, 0.9);
}
.navbar-light .navbar-nav .nav-link {
  color: rgba(0, 0, 0, 0.5);
}
.navbar-light .navbar-nav .nav-link:focus,
.navbar-light .navbar-nav .nav-link:hover {
  color: rgba(0, 0, 0, 0.7);
}
.navbar-light .navbar-nav .nav-link.disabled {
  color: rgba(0, 0, 0, 0.3);
}
.navbar-light .navbar-nav .active > .nav-link,
.navbar-light .navbar-nav .nav-link.active,
.navbar-light .navbar-nav .nav-link.show,
.navbar-light .navbar-nav .show > .nav-link {
  color: rgba(0, 0, 0, 0.9);
}
.navbar-light .navbar-toggler {
  color: rgba(0, 0, 0, 0.5);
  border-color: rgba(0, 0, 0, 0.1);
}
.navbar-light .navbar-toggler-icon {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");
}
.navbar-light .navbar-text {
  color: rgba(0, 0, 0, 0.5);
}
.navbar-light .navbar-text a {
  color: rgba(0, 0, 0, 0.9);
}
.navbar-light .navbar-text a:focus,
.navbar-light .navbar-text a:hover {
  color: rgba(0, 0, 0, 0.9);
}
.navbar-dark .navbar-brand {
  color: #fff;
}
.navbar-dark .navbar-brand:focus,
.navbar-dark .navbar-brand:hover {
  color: #fff;
}
.navbar-dark .navbar-nav .nav-link {
  color: rgba(255, 255, 255, 0.5);
}
.navbar-dark .navbar-nav .nav-link:focus,
.navbar-dark .navbar-nav .nav-link:hover {
  color: rgba(255, 255, 255, 0.75);
}
.navbar-dark .navbar-nav .nav-link.disabled {
  color: rgba(255, 255, 255, 0.25);
}
.navbar-dark .navbar-nav .active > .nav-link,
.navbar-dark .navbar-nav .nav-link.active,
.navbar-dark .navbar-nav .nav-link.show,
.navbar-dark .navbar-nav .show > .nav-link {
  color: #fff;
}
.navbar-dark .navbar-toggler {
  color: rgba(255, 255, 255, 0.5);
  border-color: rgba(255, 255, 255, 0.1);
}
.navbar-dark .navbar-toggler-icon {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");
}
.navbar-dark .navbar-text {
  color: rgba(255, 255, 255, 0.5);
}
.navbar-dark .navbar-text a {
  color: #fff;
}
.navbar-dark .navbar-text a:focus,
.navbar-dark .navbar-text a:hover {
  color: #fff;
}
.card {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  min-width: 0;
  word-wrap: break-word;
  background-color: #fff;
  background-clip: border-box;
  border: 1px solid rgba(0, 0, 0, 0.125);
  border-radius: 0.25rem;
}
.card > hr {
  margin-right: 0;
  margin-left: 0;
}
.card > .list-group:first-child .list-group-item:first-child {
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
}
.card > .list-group:last-child .list-group-item:last-child {
  border-bottom-right-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}
.card-body {
  -webkit-box-flex: 1;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 1.25rem;
}
.card-title {
  margin-bottom: 0.75rem;
}
.card-subtitle {
  margin-top: -0.375rem;
  margin-bottom: 0;
}
.card-text:last-child {
  margin-bottom: 0;
}
.card-link:hover {
  text-decoration: none;
}
.card-link + .card-link {
  margin-left: 1.25rem;
}
.card-header {
  padding: 0.75rem 1.25rem;
  margin-bottom: 0;
  background-color: rgba(0, 0, 0, 0.03);
  border-bottom: 1px solid rgba(0, 0, 0, 0.125);
}
.card-header:first-child {
  border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0;
}
.card-header + .list-group .list-group-item:first-child {
  border-top: 0;
}
.card-footer {
  padding: 0.75rem 1.25rem;
  background-color: rgba(0, 0, 0, 0.03);
  border-top: 1px solid rgba(0, 0, 0, 0.125);
}
.card-footer:last-child {
  border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px);
}
.card-header-tabs {
  margin-right: -0.625rem;
  margin-bottom: -0.75rem;
  margin-left: -0.625rem;
  border-bottom: 0;
}
.card-header-pills {
  margin-right: -0.625rem;
  margin-left: -0.625rem;
}
.card-img-overlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 1.25rem;
}
.card-img {
  width: 100%;
  border-radius: calc(0.25rem - 1px);
}
.card-img-top {
  width: 100%;
  border-top-left-radius: calc(0.25rem - 1px);
  border-top-right-radius: calc(0.25rem - 1px);
}
.card-img-bottom {
  width: 100%;
  border-bottom-right-radius: calc(0.25rem - 1px);
  border-bottom-left-radius: calc(0.25rem - 1px);
}
.card-deck {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
}
.card-deck .card {
  margin-bottom: 15px;
}
@media (min-width: 576px) {
  .card-deck {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row wrap;
    flex-flow: row wrap;
    margin-right: -15px;
    margin-left: -15px;
  }
  .card-deck .card {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-flex: 1;
    -ms-flex: 1 0 0%;
    flex: 1 0 0%;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    margin-right: 15px;
    margin-bottom: 0;
    margin-left: 15px;
  }
}
.card-group {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
}
.card-group > .card {
  margin-bottom: 15px;
}
@media (min-width: 576px) {
  .card-group {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row wrap;
    flex-flow: row wrap;
  }
  .card-group > .card {
    -webkit-box-flex: 1;
    -ms-flex: 1 0 0%;
    flex: 1 0 0%;
    margin-bottom: 0;
  }
  .card-group > .card + .card {
    margin-left: 0;
    border-left: 0;
  }
  .card-group > .card:first-child {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  .card-group > .card:first-child .card-header,
  .card-group > .card:first-child .card-img-top {
    border-top-right-radius: 0;
  }
  .card-group > .card:first-child .card-footer,
  .card-group > .card:first-child .card-img-bottom {
    border-bottom-right-radius: 0;
  }
  .card-group > .card:last-child {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  .card-group > .card:last-child .card-header,
  .card-group > .card:last-child .card-img-top {
    border-top-left-radius: 0;
  }
  .card-group > .card:last-child .card-footer,
  .card-group > .card:last-child .card-img-bottom {
    border-bottom-left-radius: 0;
  }
  .card-group > .card:only-child {
    border-radius: 0.25rem;
  }
  .card-group > .card:only-child .card-header,
  .card-group > .card:only-child .card-img-top {
    border-top-left-radius: 0.25rem;
    border-top-right-radius: 0.25rem;
  }
  .card-group > .card:only-child .card-footer,
  .card-group > .card:only-child .card-img-bottom {
    border-bottom-right-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
  }
  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) {
    border-radius: 0;
  }
  .card-group
    > .card:not(:first-child):not(:last-child):not(:only-child)
    .card-footer,
  .card-group
    > .card:not(:first-child):not(:last-child):not(:only-child)
    .card-header,
  .card-group
    > .card:not(:first-child):not(:last-child):not(:only-child)
    .card-img-bottom,
  .card-group
    > .card:not(:first-child):not(:last-child):not(:only-child)
    .card-img-top {
    border-radius: 0;
  }
}
.card-columns .card {
  margin-bottom: 0.75rem;
}
@media (min-width: 576px) {
  .card-columns {
    -webkit-column-count: 3;
    -moz-column-count: 3;
    column-count: 3;
    -webkit-column-gap: 1.25rem;
    -moz-column-gap: 1.25rem;
    column-gap: 1.25rem;
  }
  .card-columns .card {
    display: inline-block;
    width: 100%;
  }
}
.breadcrumb {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 0.75rem 1rem;
  margin-bottom: 1rem;
  list-style: none;
  background-color: #e9ecef;
  border-radius: 0.25rem;
}
.breadcrumb-item + .breadcrumb-item::before {
  display: inline-block;
  padding-right: 0.5rem;
  padding-left: 0.5rem;
  color: #6c757d;
  content: "/";
}
.breadcrumb-item + .breadcrumb-item:hover::before {
  text-decoration: underline;
}
.breadcrumb-item + .breadcrumb-item:hover::before {
  text-decoration: none;
}
.breadcrumb-item.active {
  color: #6c757d;
}
.pagination {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding-left: 0;
  list-style: none;
  border-radius: 0.25rem;
}
.page-link {
  position: relative;
  display: block;
  padding: 0.5rem 0.75rem;
  margin-left: -1px;
  line-height: 1.25;
  color: #007bff;
  background-color: #fff;
  border: 1px solid #dee2e6;
}
.page-link:hover {
  color: #0056b3;
  text-decoration: none;
  background-color: #e9ecef;
  border-color: #dee2e6;
}
.page-link:focus {
  z-index: 2;
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
.page-link:not(:disabled):not(.disabled) {
  cursor: pointer;
}
.page-item:first-child .page-link {
  margin-left: 0;
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}
.page-item:last-child .page-link {
  border-top-right-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}
.page-item.active .page-link {
  z-index: 1;
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
.page-item.disabled .page-link {
  color: #6c757d;
  pointer-events: none;
  cursor: auto;
  background-color: #fff;
  border-color: #dee2e6;
}
.pagination-lg .page-link {
  padding: 0.75rem 1.5rem;
  font-size: 1.25rem;
  line-height: 1.5;
}
.pagination-lg .page-item:first-child .page-link {
  border-top-left-radius: 0.3rem;
  border-bottom-left-radius: 0.3rem;
}
.pagination-lg .page-item:last-child .page-link {
  border-top-right-radius: 0.3rem;
  border-bottom-right-radius: 0.3rem;
}
.pagination-sm .page-link {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
}
.pagination-sm .page-item:first-child .page-link {
  border-top-left-radius: 0.2rem;
  border-bottom-left-radius: 0.2rem;
}
.pagination-sm .page-item:last-child .page-link {
  border-top-right-radius: 0.2rem;
  border-bottom-right-radius: 0.2rem;
}
.badge {
  display: inline-block;
  padding: 0.25em 0.4em;
  font-size: 75%;
  font-weight: 700;
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: 0.25rem;
}
.badge:empty {
  display: none;
}
.btn .badge {
  position: relative;
  top: -1px;
}
.badge-pill {
  padding-right: 0.6em;
  padding-left: 0.6em;
  border-radius: 10rem;
}
.badge-primary {
  color: #fff;
  background-color: #007bff;
}
.badge-primary[href]:focus,
.badge-primary[href]:hover {
  color: #fff;
  text-decoration: none;
  background-color: #0062cc;
}
.badge-secondary {
  color: #fff;
  background-color: #6c757d;
}
.badge-secondary[href]:focus,
.badge-secondary[href]:hover {
  color: #fff;
  text-decoration: none;
  background-color: #545b62;
}
.badge-success {
  color: #fff;
  background-color: #28a745;
}
.badge-success[href]:focus,
.badge-success[href]:hover {
  color: #fff;
  text-decoration: none;
  background-color: #1e7e34;
}
.badge-info {
  color: #fff;
  background-color: #17a2b8;
}
.badge-info[href]:focus,
.badge-info[href]:hover {
  color: #fff;
  text-decoration: none;
  background-color: #117a8b;
}
.badge-warning {
  color: #212529;
  background-color: #ffc107;
}
.badge-warning[href]:focus,
.badge-warning[href]:hover {
  color: #212529;
  text-decoration: none;
  background-color: #d39e00;
}
.badge-danger {
  color: #fff;
  background-color: #dc3545;
}
.badge-danger[href]:focus,
.badge-danger[href]:hover {
  color: #fff;
  text-decoration: none;
  background-color: #bd2130;
}
.badge-light {
  color: #212529;
  background-color: #f8f9fa;
}
.badge-light[href]:focus,
.badge-light[href]:hover {
  color: #212529;
  text-decoration: none;
  background-color: #dae0e5;
}
.badge-dark {
  color: #fff;
  background-color: #343a40;
}
.badge-dark[href]:focus,
.badge-dark[href]:hover {
  color: #fff;
  text-decoration: none;
  background-color: #1d2124;
}
.jumbotron {
  padding: 2rem 1rem;
  margin-bottom: 2rem;
  background-color: #e9ecef;
  border-radius: 0.3rem;
}
@media (min-width: 576px) {
  .jumbotron {
    padding: 4rem 2rem;
  }
}
.jumbotron-fluid {
  padding-right: 0;
  padding-left: 0;
  border-radius: 0;
}
.alert {
  position: relative;
  padding: 0.75rem 1.25rem;
  margin-bottom: 1rem;
  border: 1px solid transparent;
  border-radius: 0.25rem;
}
.alert-heading {
  color: inherit;
}
.alert-link {
  font-weight: 700;
}
.alert-dismissible {
  padding-right: 4rem;
}
.alert-dismissible .close {
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.75rem 1.25rem;
  color: inherit;
}
.alert-primary {
  color: #004085;
  background-color: #cce5ff;
  border-color: #b8daff;
}
.alert-primary hr {
  border-top-color: #9fcdff;
}
.alert-primary .alert-link {
  color: #002752;
}
.alert-secondary {
  color: #383d41;
  background-color: #e2e3e5;
  border-color: #d6d8db;
}
.alert-secondary hr {
  border-top-color: #c8cbcf;
}
.alert-secondary .alert-link {
  color: #202326;
}
.alert-success {
  color: #155724;
  background-color: #d4edda;
  border-color: #c3e6cb;
}
.alert-success hr {
  border-top-color: #b1dfbb;
}
.alert-success .alert-link {
  color: #0b2e13;
}
.alert-info {
  color: #0c5460;
  background-color: #d1ecf1;
  border-color: #bee5eb;
}
.alert-info hr {
  border-top-color: #abdde5;
}
.alert-info .alert-link {
  color: #062c33;
}
.alert-warning {
  color: #856404;
  background-color: #fff3cd;
  border-color: #ffeeba;
}
.alert-warning hr {
  border-top-color: #ffe8a1;
}
.alert-warning .alert-link {
  color: #533f03;
}
.alert-danger {
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb;
}
.alert-danger hr {
  border-top-color: #f1b0b7;
}
.alert-danger .alert-link {
  color: #491217;
}
.alert-light {
  color: #818182;
  background-color: #fefefe;
  border-color: #fdfdfe;
}
.alert-light hr {
  border-top-color: #ececf6;
}
.alert-light .alert-link {
  color: #686868;
}
.alert-dark {
  color: #1b1e21;
  background-color: #d6d8d9;
  border-color: #c6c8ca;
}
.alert-dark hr {
  border-top-color: #b9bbbe;
}
.alert-dark .alert-link {
  color: #040505;
}
@-webkit-keyframes progress-bar-stripes {
  from {
    background-position: 1rem 0;
  }
  to {
    background-position: 0 0;
  }
}
@keyframes progress-bar-stripes {
  from {
    background-position: 1rem 0;
  }
  to {
    background-position: 0 0;
  }
}
.progress {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  height: 1rem;
  overflow: hidden;
  font-size: 0.75rem;
  background-color: #e9ecef;
  border-radius: 0.25rem;
}
.progress-bar {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  color: #fff;
  text-align: center;
  background-color: #007bff;
  transition: width 0.6s ease;
}
.progress-bar-striped {
  background-image: linear-gradient(
    45deg,
    rgba(255, 255, 255, 0.15) 25%,
    transparent 25%,
    transparent 50%,
    rgba(255, 255, 255, 0.15) 50%,
    rgba(255, 255, 255, 0.15) 75%,
    transparent 75%,
    transparent
  );
  background-size: 1rem 1rem;
}
.progress-bar-animated {
  -webkit-animation: progress-bar-stripes 1s linear infinite;
  animation: progress-bar-stripes 1s linear infinite;
}
.media {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: start;
  -ms-flex-align: start;
  align-items: flex-start;
}
.media-body {
  -webkit-box-flex: 1;
  -ms-flex: 1;
  flex: 1;
}
.list-group {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-left: 0;
  margin-bottom: 0;
}
.list-group-item-action {
  width: 100%;
  color: #495057;
  text-align: inherit;
}
.list-group-item-action:focus,
.list-group-item-action:hover {
  color: #495057;
  text-decoration: none;
  background-color: #f8f9fa;
}
.list-group-item-action:active {
  color: #212529;
  background-color: #e9ecef;
}
.list-group-item {
  position: relative;
  display: block;
  padding: 0.75rem 1.25rem;
  margin-bottom: -1px;
  background-color: #fff;
  border: 1px solid rgba(0, 0, 0, 0.125);
}
.list-group-item:first-child {
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
}
.list-group-item:last-child {
  margin-bottom: 0;
  border-bottom-right-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}
.list-group-item:focus,
.list-group-item:hover {
  z-index: 1;
  text-decoration: none;
}
.list-group-item.disabled,
.list-group-item:disabled {
  color: #6c757d;
  background-color: #fff;
}
.list-group-item.active {
  z-index: 2;
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
.list-group-flush .list-group-item {
  border-right: 0;
  border-left: 0;
  border-radius: 0;
}
.list-group-flush:first-child .list-group-item:first-child {
  border-top: 0;
}
.list-group-flush:last-child .list-group-item:last-child {
  border-bottom: 0;
}
.list-group-item-primary {
  color: #004085;
  background-color: #b8daff;
}
.list-group-item-primary.list-group-item-action:focus,
.list-group-item-primary.list-group-item-action:hover {
  color: #004085;
  background-color: #9fcdff;
}
.list-group-item-primary.list-group-item-action.active {
  color: #fff;
  background-color: #004085;
  border-color: #004085;
}
.list-group-item-secondary {
  color: #383d41;
  background-color: #d6d8db;
}
.list-group-item-secondary.list-group-item-action:focus,
.list-group-item-secondary.list-group-item-action:hover {
  color: #383d41;
  background-color: #c8cbcf;
}
.list-group-item-secondary.list-group-item-action.active {
  color: #fff;
  background-color: #383d41;
  border-color: #383d41;
}
.list-group-item-success {
  color: #155724;
  background-color: #c3e6cb;
}
.list-group-item-success.list-group-item-action:focus,
.list-group-item-success.list-group-item-action:hover {
  color: #155724;
  background-color: #b1dfbb;
}
.list-group-item-success.list-group-item-action.active {
  color: #fff;
  background-color: #155724;
  border-color: #155724;
}
.list-group-item-info {
  color: #0c5460;
  background-color: #bee5eb;
}
.list-group-item-info.list-group-item-action:focus,
.list-group-item-info.list-group-item-action:hover {
  color: #0c5460;
  background-color: #abdde5;
}
.list-group-item-info.list-group-item-action.active {
  color: #fff;
  background-color: #0c5460;
  border-color: #0c5460;
}
.list-group-item-warning {
  color: #856404;
  background-color: #ffeeba;
}
.list-group-item-warning.list-group-item-action:focus,
.list-group-item-warning.list-group-item-action:hover {
  color: #856404;
  background-color: #ffe8a1;
}
.list-group-item-warning.list-group-item-action.active {
  color: #fff;
  background-color: #856404;
  border-color: #856404;
}
.list-group-item-danger {
  color: #721c24;
  background-color: #f5c6cb;
}
.list-group-item-danger.list-group-item-action:focus,
.list-group-item-danger.list-group-item-action:hover {
  color: #721c24;
  background-color: #f1b0b7;
}
.list-group-item-danger.list-group-item-action.active {
  color: #fff;
  background-color: #721c24;
  border-color: #721c24;
}
.list-group-item-light {
  color: #818182;
  background-color: #fdfdfe;
}
.list-group-item-light.list-group-item-action:focus,
.list-group-item-light.list-group-item-action:hover {
  color: #818182;
  background-color: #ececf6;
}
.list-group-item-light.list-group-item-action.active {
  color: #fff;
  background-color: #818182;
  border-color: #818182;
}
.list-group-item-dark {
  color: #1b1e21;
  background-color: #c6c8ca;
}
.list-group-item-dark.list-group-item-action:focus,
.list-group-item-dark.list-group-item-action:hover {
  color: #1b1e21;
  background-color: #b9bbbe;
}
.list-group-item-dark.list-group-item-action.active {
  color: #fff;
  background-color: #1b1e21;
  border-color: #1b1e21;
}
.close {
  float: right;
  font-size: 1.5rem;
  font-weight: 700;
  line-height: 1;
  color: #000;
  text-shadow: 0 1px 0 #fff;
  opacity: 0.5;
}
.close:focus,
.close:hover {
  color: #000;
  text-decoration: none;
  opacity: 0.75;
}
.close:not(:disabled):not(.disabled) {
  cursor: pointer;
}
button.close {
  padding: 0;
  background-color: transparent;
  border: 0;
  -webkit-appearance: none;
}
.modal-open {
  overflow: hidden;
}
.modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1050;
  display: none;
  overflow: hidden;
  outline: 0;
}
.modal-open .modal {
  overflow-x: hidden;
  overflow-y: auto;
}
.modal-dialog {
  position: relative;
  width: auto;
  margin: 0.5rem;
  pointer-events: none;
}
.modal.fade .modal-dialog {
  transition: -webkit-transform 0.3s ease-out;
  transition: transform 0.3s ease-out;
  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;
  -webkit-transform: translate(0, -25%);
  transform: translate(0, -25%);
}
.modal.show .modal-dialog {
  -webkit-transform: translate(0, 0);
  transform: translate(0, 0);
}
.modal-dialog-centered {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: calc(100% - (0.5rem * 2));
}
.modal-content {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  pointer-events: auto;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: 0.3rem;
  outline: 0;
}
.modal-backdrop {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1040;
  background-color: #000;
}
.modal-backdrop.fade {
  opacity: 0;
}
.modal-backdrop.show {
  opacity: 0.5;
}
.modal-header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: start;
  -ms-flex-align: start;
  align-items: flex-start;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 1rem;
  border-bottom: 1px solid #e9ecef;
  border-top-left-radius: 0.3rem;
  border-top-right-radius: 0.3rem;
}
.modal-header .close {
  padding: 1rem;
  margin: -1rem -1rem -1rem auto;
}
.modal-title {
  margin-bottom: 0;
  line-height: 1.5;
}
.modal-body {
  position: relative;
  -webkit-box-flex: 1;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  padding: 1rem;
}
.modal-footer {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  padding: 1rem;
  border-top: 1px solid #e9ecef;
}
.modal-footer > :not(:first-child) {
  margin-left: 0.25rem;
}
.modal-footer > :not(:last-child) {
  margin-right: 0.25rem;
}
.modal-scrollbar-measure {
  position: absolute;
  top: -9999px;
  width: 50px;
  height: 50px;
  overflow: scroll;
}
@media (min-width: 576px) {
  .modal-dialog {
    max-width: 500px;
    margin: 1.75rem auto;
  }
  .modal-dialog-centered {
    min-height: calc(100% - (1.75rem * 2));
  }
  .modal-sm {
    max-width: 300px;
  }
}
@media (min-width: 992px) {
  .modal-lg {
    max-width: 800px;
  }
}
.tooltip {
  position: absolute;
  z-index: 1070;
  display: block;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
    "Segoe UI Symbol";
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
  font-size: 0.875rem;
  word-wrap: break-word;
  opacity: 0;
}
.tooltip.show {
  opacity: 0.9;
}
.tooltip .arrow {
  position: absolute;
  display: block;
  width: 0.8rem;
  height: 0.4rem;
}
.tooltip .arrow::before {
  position: absolute;
  content: "";
  border-color: transparent;
  border-style: solid;
}
.bs-tooltip-auto[x-placement^="top"],
.bs-tooltip-top {
  padding: 0.4rem 0;
}
.bs-tooltip-auto[x-placement^="top"] .arrow,
.bs-tooltip-top .arrow {
  bottom: 0;
}
.bs-tooltip-auto[x-placement^="top"] .arrow::before,
.bs-tooltip-top .arrow::before {
  top: 0;
  border-width: 0.4rem 0.4rem 0;
  border-top-color: #000;
}
.bs-tooltip-auto[x-placement^="right"],
.bs-tooltip-right {
  padding: 0 0.4rem;
}
.bs-tooltip-auto[x-placement^="right"] .arrow,
.bs-tooltip-right .arrow {
  left: 0;
  width: 0.4rem;
  height: 0.8rem;
}
.bs-tooltip-auto[x-placement^="right"] .arrow::before,
.bs-tooltip-right .arrow::before {
  right: 0;
  border-width: 0.4rem 0.4rem 0.4rem 0;
  border-right-color: #000;
}
.bs-tooltip-auto[x-placement^="bottom"],
.bs-tooltip-bottom {
  padding: 0.4rem 0;
}
.bs-tooltip-auto[x-placement^="bottom"] .arrow,
.bs-tooltip-bottom .arrow {
  top: 0;
}
.bs-tooltip-auto[x-placement^="bottom"] .arrow::before,
.bs-tooltip-bottom .arrow::before {
  bottom: 0;
  border-width: 0 0.4rem 0.4rem;
  border-bottom-color: #000;
}
.bs-tooltip-auto[x-placement^="left"],
.bs-tooltip-left {
  padding: 0 0.4rem;
}
.bs-tooltip-auto[x-placement^="left"] .arrow,
.bs-tooltip-left .arrow {
  right: 0;
  width: 0.4rem;
  height: 0.8rem;
}
.bs-tooltip-auto[x-placement^="left"] .arrow::before,
.bs-tooltip-left .arrow::before {
  left: 0;
  border-width: 0.4rem 0 0.4rem 0.4rem;
  border-left-color: #000;
}
.tooltip-inner {
  max-width: 200px;
  padding: 0.25rem 0.5rem;
  color: #fff;
  text-align: center;
  background-color: #000;
  border-radius: 0.25rem;
}
.popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1060;
  display: block;
  max-width: 276px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
    "Segoe UI Symbol";
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
  font-size: 0.875rem;
  word-wrap: break-word;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: 0.3rem;
}
.popover .arrow {
  position: absolute;
  display: block;
  width: 1rem;
  height: 0.5rem;
  margin: 0 0.3rem;
}
.popover .arrow::after,
.popover .arrow::before {
  position: absolute;
  display: block;
  content: "";
  border-color: transparent;
  border-style: solid;
}
.bs-popover-auto[x-placement^="top"],
.bs-popover-top {
  margin-bottom: 0.5rem;
}
.bs-popover-auto[x-placement^="top"] .arrow,
.bs-popover-top .arrow {
  bottom: calc((0.5rem + 1px) * -1);
}
.bs-popover-auto[x-placement^="top"] .arrow::after,
.bs-popover-auto[x-placement^="top"] .arrow::before,
.bs-popover-top .arrow::after,
.bs-popover-top .arrow::before {
  border-width: 0.5rem 0.5rem 0;
}
.bs-popover-auto[x-placement^="top"] .arrow::before,
.bs-popover-top .arrow::before {
  bottom: 0;
  border-top-color: rgba(0, 0, 0, 0.25);
}
.bs-popover-auto[x-placement^="top"] .arrow::after,
.bs-popover-top .arrow::after {
  bottom: 1px;
  border-top-color: #fff;
}
.bs-popover-auto[x-placement^="right"],
.bs-popover-right {
  margin-left: 0.5rem;
}
.bs-popover-auto[x-placement^="right"] .arrow,
.bs-popover-right .arrow {
  left: calc((0.5rem + 1px) * -1);
  width: 0.5rem;
  height: 1rem;
  margin: 0.3rem 0;
}
.bs-popover-auto[x-placement^="right"] .arrow::after,
.bs-popover-auto[x-placement^="right"] .arrow::before,
.bs-popover-right .arrow::after,
.bs-popover-right .arrow::before {
  border-width: 0.5rem 0.5rem 0.5rem 0;
}
.bs-popover-auto[x-placement^="right"] .arrow::before,
.bs-popover-right .arrow::before {
  left: 0;
  border-right-color: rgba(0, 0, 0, 0.25);
}
.bs-popover-auto[x-placement^="right"] .arrow::after,
.bs-popover-right .arrow::after {
  left: 1px;
  border-right-color: #fff;
}
.bs-popover-auto[x-placement^="bottom"],
.bs-popover-bottom {
  margin-top: 0.5rem;
}
.bs-popover-auto[x-placement^="bottom"] .arrow,
.bs-popover-bottom .arrow {
  top: calc((0.5rem + 1px) * -1);
}
.bs-popover-auto[x-placement^="bottom"] .arrow::after,
.bs-popover-auto[x-placement^="bottom"] .arrow::before,
.bs-popover-bottom .arrow::after,
.bs-popover-bottom .arrow::before {
  border-width: 0 0.5rem 0.5rem 0.5rem;
}
.bs-popover-auto[x-placement^="bottom"] .arrow::before,
.bs-popover-bottom .arrow::before {
  top: 0;
  border-bottom-color: rgba(0, 0, 0, 0.25);
}
.bs-popover-auto[x-placement^="bottom"] .arrow::after,
.bs-popover-bottom .arrow::after {
  top: 1px;
  border-bottom-color: #fff;
}
.bs-popover-auto[x-placement^="bottom"] .popover-header::before,
.bs-popover-bottom .popover-header::before {
  position: absolute;
  top: 0;
  left: 50%;
  display: block;
  width: 1rem;
  margin-left: -0.5rem;
  content: "";
  border-bottom: 1px solid #f7f7f7;
}
.bs-popover-auto[x-placement^="left"],
.bs-popover-left {
  margin-right: 0.5rem;
}
.bs-popover-auto[x-placement^="left"] .arrow,
.bs-popover-left .arrow {
  right: calc((0.5rem + 1px) * -1);
  width: 0.5rem;
  height: 1rem;
  margin: 0.3rem 0;
}
.bs-popover-auto[x-placement^="left"] .arrow::after,
.bs-popover-auto[x-placement^="left"] .arrow::before,
.bs-popover-left .arrow::after,
.bs-popover-left .arrow::before {
  border-width: 0.5rem 0 0.5rem 0.5rem;
}
.bs-popover-auto[x-placement^="left"] .arrow::before,
.bs-popover-left .arrow::before {
  right: 0;
  border-left-color: rgba(0, 0, 0, 0.25);
}
.bs-popover-auto[x-placement^="left"] .arrow::after,
.bs-popover-left .arrow::after {
  right: 1px;
  border-left-color: #fff;
}
.popover-header {
  padding: 0.5rem 0.75rem;
  margin-bottom: 0;
  font-size: 1rem;
  color: inherit;
  background-color: #f7f7f7;
  border-bottom: 1px solid #ebebeb;
  border-top-left-radius: calc(0.3rem - 1px);
  border-top-right-radius: calc(0.3rem - 1px);
}
.popover-header:empty {
  display: none;
}
.popover-body {
  padding: 0.5rem 0.75rem;
  color: #212529;
}
.carousel {
  position: relative;
}
.carousel-inner {
  position: relative;
  width: 100%;
  overflow: hidden;
}
.carousel-item {
  position: relative;
  display: none;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  transition: -webkit-transform 0.6s ease;
  transition: transform 0.6s ease;
  transition: transform 0.6s ease, -webkit-transform 0.6s ease;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -webkit-perspective: 1000px;
  perspective: 1000px;
}
.carousel-item-next,
.carousel-item-prev,
.carousel-item.active {
  display: block;
}
.carousel-item-next,
.carousel-item-prev {
  position: absolute;
  top: 0;
}
.carousel-item-next.carousel-item-left,
.carousel-item-prev.carousel-item-right {
  -webkit-transform: translateX(0);
  transform: translateX(0);
}
@supports (
  (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)
) {
  .carousel-item-next.carousel-item-left,
  .carousel-item-prev.carousel-item-right {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.active.carousel-item-right,
.carousel-item-next {
  -webkit-transform: translateX(100%);
  transform: translateX(100%);
}
@supports (
  (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)
) {
  .active.carousel-item-right,
  .carousel-item-next {
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}
.active.carousel-item-left,
.carousel-item-prev {
  -webkit-transform: translateX(-100%);
  transform: translateX(-100%);
}
@supports (
  (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)
) {
  .active.carousel-item-left,
  .carousel-item-prev {
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}
.carousel-control-next,
.carousel-control-prev {
  position: absolute;
  top: 0;
  bottom: 0;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 15%;
  color: #fff;
  text-align: center;
  opacity: 0.5;
}
.carousel-control-next:focus,
.carousel-control-next:hover,
.carousel-control-prev:focus,
.carousel-control-prev:hover {
  color: #fff;
  text-decoration: none;
  outline: 0;
  opacity: 0.9;
}
.carousel-control-prev {
  left: 0;
}
.carousel-control-next {
  right: 0;
}
.carousel-control-next-icon,
.carousel-control-prev-icon {
  display: inline-block;
  width: 20px;
  height: 20px;
  background: transparent no-repeat center center;
  background-size: 100% 100%;
}
.carousel-control-prev-icon {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E");
}
.carousel-control-next-icon {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E");
}
.carousel-indicators {
  position: absolute;
  right: 0;
  bottom: 10px;
  left: 0;
  z-index: 15;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding-left: 0;
  margin-right: 15%;
  margin-left: 15%;
  list-style: none;
}
.carousel-indicators li {
  position: relative;
  -webkit-box-flex: 0;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  width: 30px;
  height: 3px;
  margin-right: 3px;
  margin-left: 3px;
  text-indent: -999px;
  background-color: rgba(255, 255, 255, 0.5);
}
.carousel-indicators li::before {
  position: absolute;
  top: -10px;
  left: 0;
  display: inline-block;
  width: 100%;
  height: 10px;
  content: "";
}
.carousel-indicators li::after {
  position: absolute;
  bottom: -10px;
  left: 0;
  display: inline-block;
  width: 100%;
  height: 10px;
  content: "";
}
.carousel-indicators .active {
  background-color: #fff;
}
.carousel-caption {
  position: absolute;
  right: 15%;
  bottom: 20px;
  left: 15%;
  z-index: 10;
  padding-top: 20px;
  padding-bottom: 20px;
  color: #fff;
  text-align: center;
}
.align-baseline {
  vertical-align: baseline !important;
}
.align-top {
  vertical-align: top !important;
}
.align-middle {
  vertical-align: middle !important;
}
.align-bottom {
  vertical-align: bottom !important;
}
.align-text-bottom {
  vertical-align: text-bottom !important;
}
.align-text-top {
  vertical-align: text-top !important;
}
.bg-primary {
  background-color: #007bff !important;
}
a.bg-primary:focus,
a.bg-primary:hover,
button.bg-primary:focus,
button.bg-primary:hover {
  background-color: #0062cc !important;
}
.bg-secondary {
  background-color: #6c757d !important;
}
a.bg-secondary:focus,
a.bg-secondary:hover,
button.bg-secondary:focus,
button.bg-secondary:hover {
  background-color: #545b62 !important;
}
.bg-success {
  background-color: #28a745 !important;
}
a.bg-success:focus,
a.bg-success:hover,
button.bg-success:focus,
button.bg-success:hover {
  background-color: #1e7e34 !important;
}
.bg-info {
  background-color: #17a2b8 !important;
}
a.bg-info:focus,
a.bg-info:hover,
button.bg-info:focus,
button.bg-info:hover {
  background-color: #117a8b !important;
}
.bg-warning {
  background-color: #ffc107 !important;
}
a.bg-warning:focus,
a.bg-warning:hover,
button.bg-warning:focus,
button.bg-warning:hover {
  background-color: #d39e00 !important;
}
.bg-danger {
  background-color: #dc3545 !important;
}
a.bg-danger:focus,
a.bg-danger:hover,
button.bg-danger:focus,
button.bg-danger:hover {
  background-color: #bd2130 !important;
}
.bg-light {
  background-color: #f8f9fa !important;
}
a.bg-light:focus,
a.bg-light:hover,
button.bg-light:focus,
button.bg-light:hover {
  background-color: #dae0e5 !important;
}
.bg-dark {
  background-color: #343a40 !important;
}
a.bg-dark:focus,
a.bg-dark:hover,
button.bg-dark:focus,
button.bg-dark:hover {
  background-color: #1d2124 !important;
}
.bg-white {
  background-color: #fff !important;
}
.bg-transparent {
  background-color: transparent !important;
}
.border {
  border: 1px solid #dee2e6 !important;
}
.border-top {
  border-top: 1px solid #dee2e6 !important;
}
.border-right {
  border-right: 1px solid #dee2e6 !important;
}
.border-bottom {
  border-bottom: 1px solid #dee2e6 !important;
}
.border-left {
  border-left: 1px solid #dee2e6 !important;
}
.border-0 {
  border: 0 !important;
}
.border-top-0 {
  border-top: 0 !important;
}
.border-right-0 {
  border-right: 0 !important;
}
.border-bottom-0 {
  border-bottom: 0 !important;
}
.border-left-0 {
  border-left: 0 !important;
}
.border-primary {
  border-color: #007bff !important;
}
.border-secondary {
  border-color: #6c757d !important;
}
.border-success {
  border-color: #28a745 !important;
}
.border-info {
  border-color: #17a2b8 !important;
}
.border-warning {
  border-color: #ffc107 !important;
}
.border-danger {
  border-color: #dc3545 !important;
}
.border-light {
  border-color: #f8f9fa !important;
}
.border-dark {
  border-color: #343a40 !important;
}
.border-white {
  border-color: #fff !important;
}
.rounded {
  border-radius: 0.25rem !important;
}
.rounded-top {
  border-top-left-radius: 0.25rem !important;
  border-top-right-radius: 0.25rem !important;
}
.rounded-right {
  border-top-right-radius: 0.25rem !important;
  border-bottom-right-radius: 0.25rem !important;
}
.rounded-bottom {
  border-bottom-right-radius: 0.25rem !important;
  border-bottom-left-radius: 0.25rem !important;
}
.rounded-left {
  border-top-left-radius: 0.25rem !important;
  border-bottom-left-radius: 0.25rem !important;
}
.rounded-circle {
  border-radius: 50% !important;
}
.rounded-0 {
  border-radius: 0 !important;
}
.clearfix::after {
  display: block;
  clear: both;
  content: "";
}
.d-none {
  display: none !important;
}
.d-inline {
  display: inline !important;
}
.d-inline-block {
  display: inline-block !important;
}
.d-block {
  display: block !important;
}
.d-table {
  display: table !important;
}
.d-table-row {
  display: table-row !important;
}
.d-table-cell {
  display: table-cell !important;
}
.d-flex {
  display: -webkit-box !important;
  display: -ms-flexbox !important;
  display: flex !important;
}
.d-inline-flex {
  display: -webkit-inline-box !important;
  display: -ms-inline-flexbox !important;
  display: inline-flex !important;
}
@media (min-width: 576px) {
  .d-sm-none {
    display: none !important;
  }
  .d-sm-inline {
    display: inline !important;
  }
  .d-sm-inline-block {
    display: inline-block !important;
  }
  .d-sm-block {
    display: block !important;
  }
  .d-sm-table {
    display: table !important;
  }
  .d-sm-table-row {
    display: table-row !important;
  }
  .d-sm-table-cell {
    display: table-cell !important;
  }
  .d-sm-flex {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
  }
  .d-sm-inline-flex {
    display: -webkit-inline-box !important;
    display: -ms-inline-flexbox !important;
    display: inline-flex !important;
  }
}
@media (min-width: 768px) {
  .d-md-none {
    display: none !important;
  }
  .d-md-inline {
    display: inline !important;
  }
  .d-md-inline-block {
    display: inline-block !important;
  }
  .d-md-block {
    display: block !important;
  }
  .d-md-table {
    display: table !important;
  }
  .d-md-table-row {
    display: table-row !important;
  }
  .d-md-table-cell {
    display: table-cell !important;
  }
  .d-md-flex {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
  }
  .d-md-inline-flex {
    display: -webkit-inline-box !important;
    display: -ms-inline-flexbox !important;
    display: inline-flex !important;
  }
}
@media (min-width: 992px) {
  .d-lg-none {
    display: none !important;
  }
  .d-lg-inline {
    display: inline !important;
  }
  .d-lg-inline-block {
    display: inline-block !important;
  }
  .d-lg-block {
    display: block !important;
  }
  .d-lg-table {
    display: table !important;
  }
  .d-lg-table-row {
    display: table-row !important;
  }
  .d-lg-table-cell {
    display: table-cell !important;
  }
  .d-lg-flex {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
  }
  .d-lg-inline-flex {
    display: -webkit-inline-box !important;
    display: -ms-inline-flexbox !important;
    display: inline-flex !important;
  }
}
@media (min-width: 1200px) {
  .d-xl-none {
    display: none !important;
  }
  .d-xl-inline {
    display: inline !important;
  }
  .d-xl-inline-block {
    display: inline-block !important;
  }
  .d-xl-block {
    display: block !important;
  }
  .d-xl-table {
    display: table !important;
  }
  .d-xl-table-row {
    display: table-row !important;
  }
  .d-xl-table-cell {
    display: table-cell !important;
  }
  .d-xl-flex {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
  }
  .d-xl-inline-flex {
    display: -webkit-inline-box !important;
    display: -ms-inline-flexbox !important;
    display: inline-flex !important;
  }
}
@media print {
  .d-print-none {
    display: none !important;
  }
  .d-print-inline {
    display: inline !important;
  }
  .d-print-inline-block {
    display: inline-block !important;
  }
  .d-print-block {
    display: block !important;
  }
  .d-print-table {
    display: table !important;
  }
  .d-print-table-row {
    display: table-row !important;
  }
  .d-print-table-cell {
    display: table-cell !important;
  }
  .d-print-flex {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
  }
  .d-print-inline-flex {
    display: -webkit-inline-box !important;
    display: -ms-inline-flexbox !important;
    display: inline-flex !important;
  }
}
.embed-responsive {
  position: relative;
  display: block;
  width: 100%;
  padding: 0;
  overflow: hidden;
}
.embed-responsive::before {
  display: block;
  content: "";
}
.embed-responsive .embed-responsive-item,
.embed-responsive embed,
.embed-responsive iframe,
.embed-responsive object,
.embed-responsive video {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 0;
}
.embed-responsive-21by9::before {
  padding-top: 42.857143%;
}
.embed-responsive-16by9::before {
  padding-top: 56.25%;
}
.embed-responsive-4by3::before {
  padding-top: 75%;
}
.embed-responsive-1by1::before {
  padding-top: 100%;
}
.flex-row {
  -webkit-box-orient: horizontal !important;
  -webkit-box-direction: normal !important;
  -ms-flex-direction: row !important;
  flex-direction: row !important;
}
.flex-column {
  -webkit-box-orient: vertical !important;
  -webkit-box-direction: normal !important;
  -ms-flex-direction: column !important;
  flex-direction: column !important;
}
.flex-row-reverse {
  -webkit-box-orient: horizontal !important;
  -webkit-box-direction: reverse !important;
  -ms-flex-direction: row-reverse !important;
  flex-direction: row-reverse !important;
}
.flex-column-reverse {
  -webkit-box-orient: vertical !important;
  -webkit-box-direction: reverse !important;
  -ms-flex-direction: column-reverse !important;
  flex-direction: column-reverse !important;
}
.flex-wrap {
  -ms-flex-wrap: wrap !important;
  flex-wrap: wrap !important;
}
.flex-nowrap {
  -ms-flex-wrap: nowrap !important;
  flex-wrap: nowrap !important;
}
.flex-wrap-reverse {
  -ms-flex-wrap: wrap-reverse !important;
  flex-wrap: wrap-reverse !important;
}
.justify-content-start {
  -webkit-box-pack: start !important;
  -ms-flex-pack: start !important;
  justify-content: flex-start !important;
}
.justify-content-end {
  -webkit-box-pack: end !important;
  -ms-flex-pack: end !important;
  justify-content: flex-end !important;
}
.justify-content-center {
  -webkit-box-pack: center !important;
  -ms-flex-pack: center !important;
  justify-content: center !important;
}
.justify-content-between {
  -webkit-box-pack: justify !important;
  -ms-flex-pack: justify !important;
  justify-content: space-between !important;
}
.justify-content-around {
  -ms-flex-pack: distribute !important;
  justify-content: space-around !important;
}
.align-items-start {
  -webkit-box-align: start !important;
  -ms-flex-align: start !important;
  align-items: flex-start !important;
}
.align-items-end {
  -webkit-box-align: end !important;
  -ms-flex-align: end !important;
  align-items: flex-end !important;
}
.align-items-center {
  -webkit-box-align: center !important;
  -ms-flex-align: center !important;
  align-items: center !important;
}
.align-items-baseline {
  -webkit-box-align: baseline !important;
  -ms-flex-align: baseline !important;
  align-items: baseline !important;
}
.align-items-stretch {
  -webkit-box-align: stretch !important;
  -ms-flex-align: stretch !important;
  align-items: stretch !important;
}
.align-content-start {
  -ms-flex-line-pack: start !important;
  align-content: flex-start !important;
}
.align-content-end {
  -ms-flex-line-pack: end !important;
  align-content: flex-end !important;
}
.align-content-center {
  -ms-flex-line-pack: center !important;
  align-content: center !important;
}
.align-content-between {
  -ms-flex-line-pack: justify !important;
  align-content: space-between !important;
}
.align-content-around {
  -ms-flex-line-pack: distribute !important;
  align-content: space-around !important;
}
.align-content-stretch {
  -ms-flex-line-pack: stretch !important;
  align-content: stretch !important;
}
.align-self-auto {
  -ms-flex-item-align: auto !important;
  align-self: auto !important;
}
.align-self-start {
  -ms-flex-item-align: start !important;
  align-self: flex-start !important;
}
.align-self-end {
  -ms-flex-item-align: end !important;
  align-self: flex-end !important;
}
.align-self-center {
  -ms-flex-item-align: center !important;
  align-self: center !important;
}
.align-self-baseline {
  -ms-flex-item-align: baseline !important;
  align-self: baseline !important;
}
.align-self-stretch {
  -ms-flex-item-align: stretch !important;
  align-self: stretch !important;
}
@media (min-width: 576px) {
  .flex-sm-row {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: row !important;
    flex-direction: row !important;
  }
  .flex-sm-column {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: column !important;
    flex-direction: column !important;
  }
  .flex-sm-row-reverse {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: row-reverse !important;
    flex-direction: row-reverse !important;
  }
  .flex-sm-column-reverse {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: column-reverse !important;
    flex-direction: column-reverse !important;
  }
  .flex-sm-wrap {
    -ms-flex-wrap: wrap !important;
    flex-wrap: wrap !important;
  }
  .flex-sm-nowrap {
    -ms-flex-wrap: nowrap !important;
    flex-wrap: nowrap !important;
  }
  .flex-sm-wrap-reverse {
    -ms-flex-wrap: wrap-reverse !important;
    flex-wrap: wrap-reverse !important;
  }
  .justify-content-sm-start {
    -webkit-box-pack: start !important;
    -ms-flex-pack: start !important;
    justify-content: flex-start !important;
  }
  .justify-content-sm-end {
    -webkit-box-pack: end !important;
    -ms-flex-pack: end !important;
    justify-content: flex-end !important;
  }
  .justify-content-sm-center {
    -webkit-box-pack: center !important;
    -ms-flex-pack: center !important;
    justify-content: center !important;
  }
  .justify-content-sm-between {
    -webkit-box-pack: justify !important;
    -ms-flex-pack: justify !important;
    justify-content: space-between !important;
  }
  .justify-content-sm-around {
    -ms-flex-pack: distribute !important;
    justify-content: space-around !important;
  }
  .align-items-sm-start {
    -webkit-box-align: start !important;
    -ms-flex-align: start !important;
    align-items: flex-start !important;
  }
  .align-items-sm-end {
    -webkit-box-align: end !important;
    -ms-flex-align: end !important;
    align-items: flex-end !important;
  }
  .align-items-sm-center {
    -webkit-box-align: center !important;
    -ms-flex-align: center !important;
    align-items: center !important;
  }
  .align-items-sm-baseline {
    -webkit-box-align: baseline !important;
    -ms-flex-align: baseline !important;
    align-items: baseline !important;
  }
  .align-items-sm-stretch {
    -webkit-box-align: stretch !important;
    -ms-flex-align: stretch !important;
    align-items: stretch !important;
  }
  .align-content-sm-start {
    -ms-flex-line-pack: start !important;
    align-content: flex-start !important;
  }
  .align-content-sm-end {
    -ms-flex-line-pack: end !important;
    align-content: flex-end !important;
  }
  .align-content-sm-center {
    -ms-flex-line-pack: center !important;
    align-content: center !important;
  }
  .align-content-sm-between {
    -ms-flex-line-pack: justify !important;
    align-content: space-between !important;
  }
  .align-content-sm-around {
    -ms-flex-line-pack: distribute !important;
    align-content: space-around !important;
  }
  .align-content-sm-stretch {
    -ms-flex-line-pack: stretch !important;
    align-content: stretch !important;
  }
  .align-self-sm-auto {
    -ms-flex-item-align: auto !important;
    align-self: auto !important;
  }
  .align-self-sm-start {
    -ms-flex-item-align: start !important;
    align-self: flex-start !important;
  }
  .align-self-sm-end {
    -ms-flex-item-align: end !important;
    align-self: flex-end !important;
  }
  .align-self-sm-center {
    -ms-flex-item-align: center !important;
    align-self: center !important;
  }
  .align-self-sm-baseline {
    -ms-flex-item-align: baseline !important;
    align-self: baseline !important;
  }
  .align-self-sm-stretch {
    -ms-flex-item-align: stretch !important;
    align-self: stretch !important;
  }
}
@media (min-width: 768px) {
  .flex-md-row {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: row !important;
    flex-direction: row !important;
  }
  .flex-md-column {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: column !important;
    flex-direction: column !important;
  }
  .flex-md-row-reverse {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: row-reverse !important;
    flex-direction: row-reverse !important;
  }
  .flex-md-column-reverse {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: column-reverse !important;
    flex-direction: column-reverse !important;
  }
  .flex-md-wrap {
    -ms-flex-wrap: wrap !important;
    flex-wrap: wrap !important;
  }
  .flex-md-nowrap {
    -ms-flex-wrap: nowrap !important;
    flex-wrap: nowrap !important;
  }
  .flex-md-wrap-reverse {
    -ms-flex-wrap: wrap-reverse !important;
    flex-wrap: wrap-reverse !important;
  }
  .justify-content-md-start {
    -webkit-box-pack: start !important;
    -ms-flex-pack: start !important;
    justify-content: flex-start !important;
  }
  .justify-content-md-end {
    -webkit-box-pack: end !important;
    -ms-flex-pack: end !important;
    justify-content: flex-end !important;
  }
  .justify-content-md-center {
    -webkit-box-pack: center !important;
    -ms-flex-pack: center !important;
    justify-content: center !important;
  }
  .justify-content-md-between {
    -webkit-box-pack: justify !important;
    -ms-flex-pack: justify !important;
    justify-content: space-between !important;
  }
  .justify-content-md-around {
    -ms-flex-pack: distribute !important;
    justify-content: space-around !important;
  }
  .align-items-md-start {
    -webkit-box-align: start !important;
    -ms-flex-align: start !important;
    align-items: flex-start !important;
  }
  .align-items-md-end {
    -webkit-box-align: end !important;
    -ms-flex-align: end !important;
    align-items: flex-end !important;
  }
  .align-items-md-center {
    -webkit-box-align: center !important;
    -ms-flex-align: center !important;
    align-items: center !important;
  }
  .align-items-md-baseline {
    -webkit-box-align: baseline !important;
    -ms-flex-align: baseline !important;
    align-items: baseline !important;
  }
  .align-items-md-stretch {
    -webkit-box-align: stretch !important;
    -ms-flex-align: stretch !important;
    align-items: stretch !important;
  }
  .align-content-md-start {
    -ms-flex-line-pack: start !important;
    align-content: flex-start !important;
  }
  .align-content-md-end {
    -ms-flex-line-pack: end !important;
    align-content: flex-end !important;
  }
  .align-content-md-center {
    -ms-flex-line-pack: center !important;
    align-content: center !important;
  }
  .align-content-md-between {
    -ms-flex-line-pack: justify !important;
    align-content: space-between !important;
  }
  .align-content-md-around {
    -ms-flex-line-pack: distribute !important;
    align-content: space-around !important;
  }
  .align-content-md-stretch {
    -ms-flex-line-pack: stretch !important;
    align-content: stretch !important;
  }
  .align-self-md-auto {
    -ms-flex-item-align: auto !important;
    align-self: auto !important;
  }
  .align-self-md-start {
    -ms-flex-item-align: start !important;
    align-self: flex-start !important;
  }
  .align-self-md-end {
    -ms-flex-item-align: end !important;
    align-self: flex-end !important;
  }
  .align-self-md-center {
    -ms-flex-item-align: center !important;
    align-self: center !important;
  }
  .align-self-md-baseline {
    -ms-flex-item-align: baseline !important;
    align-self: baseline !important;
  }
  .align-self-md-stretch {
    -ms-flex-item-align: stretch !important;
    align-self: stretch !important;
  }
}
@media (min-width: 992px) {
  .flex-lg-row {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: row !important;
    flex-direction: row !important;
  }
  .flex-lg-column {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: column !important;
    flex-direction: column !important;
  }
  .flex-lg-row-reverse {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: row-reverse !important;
    flex-direction: row-reverse !important;
  }
  .flex-lg-column-reverse {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: column-reverse !important;
    flex-direction: column-reverse !important;
  }
  .flex-lg-wrap {
    -ms-flex-wrap: wrap !important;
    flex-wrap: wrap !important;
  }
  .flex-lg-nowrap {
    -ms-flex-wrap: nowrap !important;
    flex-wrap: nowrap !important;
  }
  .flex-lg-wrap-reverse {
    -ms-flex-wrap: wrap-reverse !important;
    flex-wrap: wrap-reverse !important;
  }
  .justify-content-lg-start {
    -webkit-box-pack: start !important;
    -ms-flex-pack: start !important;
    justify-content: flex-start !important;
  }
  .justify-content-lg-end {
    -webkit-box-pack: end !important;
    -ms-flex-pack: end !important;
    justify-content: flex-end !important;
  }
  .justify-content-lg-center {
    -webkit-box-pack: center !important;
    -ms-flex-pack: center !important;
    justify-content: center !important;
  }
  .justify-content-lg-between {
    -webkit-box-pack: justify !important;
    -ms-flex-pack: justify !important;
    justify-content: space-between !important;
  }
  .justify-content-lg-around {
    -ms-flex-pack: distribute !important;
    justify-content: space-around !important;
  }
  .align-items-lg-start {
    -webkit-box-align: start !important;
    -ms-flex-align: start !important;
    align-items: flex-start !important;
  }
  .align-items-lg-end {
    -webkit-box-align: end !important;
    -ms-flex-align: end !important;
    align-items: flex-end !important;
  }
  .align-items-lg-center {
    -webkit-box-align: center !important;
    -ms-flex-align: center !important;
    align-items: center !important;
  }
  .align-items-lg-baseline {
    -webkit-box-align: baseline !important;
    -ms-flex-align: baseline !important;
    align-items: baseline !important;
  }
  .align-items-lg-stretch {
    -webkit-box-align: stretch !important;
    -ms-flex-align: stretch !important;
    align-items: stretch !important;
  }
  .align-content-lg-start {
    -ms-flex-line-pack: start !important;
    align-content: flex-start !important;
  }
  .align-content-lg-end {
    -ms-flex-line-pack: end !important;
    align-content: flex-end !important;
  }
  .align-content-lg-center {
    -ms-flex-line-pack: center !important;
    align-content: center !important;
  }
  .align-content-lg-between {
    -ms-flex-line-pack: justify !important;
    align-content: space-between !important;
  }
  .align-content-lg-around {
    -ms-flex-line-pack: distribute !important;
    align-content: space-around !important;
  }
  .align-content-lg-stretch {
    -ms-flex-line-pack: stretch !important;
    align-content: stretch !important;
  }
  .align-self-lg-auto {
    -ms-flex-item-align: auto !important;
    align-self: auto !important;
  }
  .align-self-lg-start {
    -ms-flex-item-align: start !important;
    align-self: flex-start !important;
  }
  .align-self-lg-end {
    -ms-flex-item-align: end !important;
    align-self: flex-end !important;
  }
  .align-self-lg-center {
    -ms-flex-item-align: center !important;
    align-self: center !important;
  }
  .align-self-lg-baseline {
    -ms-flex-item-align: baseline !important;
    align-self: baseline !important;
  }
  .align-self-lg-stretch {
    -ms-flex-item-align: stretch !important;
    align-self: stretch !important;
  }
}
@media (min-width: 1200px) {
  .flex-xl-row {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: row !important;
    flex-direction: row !important;
  }
  .flex-xl-column {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
    -ms-flex-direction: column !important;
    flex-direction: column !important;
  }
  .flex-xl-row-reverse {
    -webkit-box-orient: horizontal !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: row-reverse !important;
    flex-direction: row-reverse !important;
  }
  .flex-xl-column-reverse {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: reverse !important;
    -ms-flex-direction: column-reverse !important;
    flex-direction: column-reverse !important;
  }
  .flex-xl-wrap {
    -ms-flex-wrap: wrap !important;
    flex-wrap: wrap !important;
  }
  .flex-xl-nowrap {
    -ms-flex-wrap: nowrap !important;
    flex-wrap: nowrap !important;
  }
  .flex-xl-wrap-reverse {
    -ms-flex-wrap: wrap-reverse !important;
    flex-wrap: wrap-reverse !important;
  }
  .justify-content-xl-start {
    -webkit-box-pack: start !important;
    -ms-flex-pack: start !important;
    justify-content: flex-start !important;
  }
  .justify-content-xl-end {
    -webkit-box-pack: end !important;
    -ms-flex-pack: end !important;
    justify-content: flex-end !important;
  }
  .justify-content-xl-center {
    -webkit-box-pack: center !important;
    -ms-flex-pack: center !important;
    justify-content: center !important;
  }
  .justify-content-xl-between {
    -webkit-box-pack: justify !important;
    -ms-flex-pack: justify !important;
    justify-content: space-between !important;
  }
  .justify-content-xl-around {
    -ms-flex-pack: distribute !important;
    justify-content: space-around !important;
  }
  .align-items-xl-start {
    -webkit-box-align: start !important;
    -ms-flex-align: start !important;
    align-items: flex-start !important;
  }
  .align-items-xl-end {
    -webkit-box-align: end !important;
    -ms-flex-align: end !important;
    align-items: flex-end !important;
  }
  .align-items-xl-center {
    -webkit-box-align: center !important;
    -ms-flex-align: center !important;
    align-items: center !important;
  }
  .align-items-xl-baseline {
    -webkit-box-align: baseline !important;
    -ms-flex-align: baseline !important;
    align-items: baseline !important;
  }
  .align-items-xl-stretch {
    -webkit-box-align: stretch !important;
    -ms-flex-align: stretch !important;
    align-items: stretch !important;
  }
  .align-content-xl-start {
    -ms-flex-line-pack: start !important;
    align-content: flex-start !important;
  }
  .align-content-xl-end {
    -ms-flex-line-pack: end !important;
    align-content: flex-end !important;
  }
  .align-content-xl-center {
    -ms-flex-line-pack: center !important;
    align-content: center !important;
  }
  .align-content-xl-between {
    -ms-flex-line-pack: justify !important;
    align-content: space-between !important;
  }
  .align-content-xl-around {
    -ms-flex-line-pack: distribute !important;
    align-content: space-around !important;
  }
  .align-content-xl-stretch {
    -ms-flex-line-pack: stretch !important;
    align-content: stretch !important;
  }
  .align-self-xl-auto {
    -ms-flex-item-align: auto !important;
    align-self: auto !important;
  }
  .align-self-xl-start {
    -ms-flex-item-align: start !important;
    align-self: flex-start !important;
  }
  .align-self-xl-end {
    -ms-flex-item-align: end !important;
    align-self: flex-end !important;
  }
  .align-self-xl-center {
    -ms-flex-item-align: center !important;
    align-self: center !important;
  }
  .align-self-xl-baseline {
    -ms-flex-item-align: baseline !important;
    align-self: baseline !important;
  }
  .align-self-xl-stretch {
    -ms-flex-item-align: stretch !important;
    align-self: stretch !important;
  }
}
.float-left {
  float: left !important;
}
.float-right {
  float: right !important;
}
.float-none {
  float: none !important;
}
@media (min-width: 576px) {
  .float-sm-left {
    float: left !important;
  }
  .float-sm-right {
    float: right !important;
  }
  .float-sm-none {
    float: none !important;
  }
}
@media (min-width: 768px) {
  .float-md-left {
    float: left !important;
  }
  .float-md-right {
    float: right !important;
  }
  .float-md-none {
    float: none !important;
  }
}
@media (min-width: 992px) {
  .float-lg-left {
    float: left !important;
  }
  .float-lg-right {
    float: right !important;
  }
  .float-lg-none {
    float: none !important;
  }
}
@media (min-width: 1200px) {
  .float-xl-left {
    float: left !important;
  }
  .float-xl-right {
    float: right !important;
  }
  .float-xl-none {
    float: none !important;
  }
}
.position-static {
  position: static !important;
}
.position-relative {
  position: relative !important;
}
.position-absolute {
  position: absolute !important;
}
.position-fixed {
  position: fixed !important;
}
.position-sticky {
  position: -webkit-sticky !important;
  position: sticky !important;
}
.fixed-top {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: 1030;
}
.fixed-bottom {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1030;
}
@supports ((position: -webkit-sticky) or (position: sticky)) {
  .sticky-top {
    position: -webkit-sticky;
    position: sticky;
    top: 0;
    z-index: 1020;
  }
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  border: 0;
}
.sr-only-focusable:active,
.sr-only-focusable:focus {
  position: static;
  width: auto;
  height: auto;
  overflow: visible;
  clip: auto;
  white-space: normal;
  -webkit-clip-path: none;
  clip-path: none;
}
.w-25 {
  width: 25% !important;
}
.w-50 {
  width: 50% !important;
}
.w-75 {
  width: 75% !important;
}
.w-100 {
  width: 100% !important;
}
.h-25 {
  height: 25% !important;
}
.h-50 {
  height: 50% !important;
}
.h-75 {
  height: 75% !important;
}
.h-100 {
  height: 100% !important;
}
.mw-100 {
  max-width: 100% !important;
}
.mh-100 {
  max-height: 100% !important;
}
.m-0 {
  margin: 0 !important;
}
.mt-0,
.my-0 {
  margin-top: 0 !important;
}
.mr-0,
.mx-0 {
  margin-right: 0 !important;
}
.mb-0,
.my-0 {
  margin-bottom: 0 !important;
}
.ml-0,
.mx-0 {
  margin-left: 0 !important;
}
.m-1 {
  margin: 0.25rem !important;
}
.mt-1,
.my-1 {
  margin-top: 0.25rem !important;
}
.mr-1,
.mx-1 {
  margin-right: 0.25rem !important;
}
.mb-1,
.my-1 {
  margin-bottom: 0.25rem !important;
}
.ml-1,
.mx-1 {
  margin-left: 0.25rem !important;
}
.m-2 {
  margin: 0.5rem !important;
}
.mt-2,
.my-2 {
  margin-top: 0.5rem !important;
}
.mr-2,
.mx-2 {
  margin-right: 0.5rem !important;
}
.mb-2,
.my-2 {
  margin-bottom: 0.5rem !important;
}
.ml-2,
.mx-2 {
  margin-left: 0.5rem !important;
}
.m-3 {
  margin: 1rem !important;
}
.mt-3,
.my-3 {
  margin-top: 1rem !important;
}
.mr-3,
.mx-3 {
  margin-right: 1rem !important;
}
.mb-3,
.my-3 {
  margin-bottom: 1rem !important;
}
.ml-3,
.mx-3 {
  margin-left: 1rem !important;
}
.m-4 {
  margin: 1.5rem !important;
}
.mt-4,
.my-4 {
  margin-top: 1.5rem !important;
}
.mr-4,
.mx-4 {
  margin-right: 1.5rem !important;
}
.mb-4,
.my-4 {
  margin-bottom: 1.5rem !important;
}
.ml-4,
.mx-4 {
  margin-left: 1.5rem !important;
}
.m-5 {
  margin: 3rem !important;
}
.mt-5,
.my-5 {
  margin-top: 3rem !important;
}
.mr-5,
.mx-5 {
  margin-right: 3rem !important;
}
.mb-5,
.my-5 {
  margin-bottom: 3rem !important;
}
.ml-5,
.mx-5 {
  margin-left: 3rem !important;
}
.p-0 {
  padding: 0 !important;
}
.pt-0,
.py-0 {
  padding-top: 0 !important;
}
.pr-0,
.px-0 {
  padding-right: 0 !important;
}
.pb-0,
.py-0 {
  padding-bottom: 0 !important;
}
.pl-0,
.px-0 {
  padding-left: 0 !important;
}
.p-1 {
  padding: 0.25rem !important;
}
.pt-1,
.py-1 {
  padding-top: 0.25rem !important;
}
.pr-1,
.px-1 {
  padding-right: 0.25rem !important;
}
.pb-1,
.py-1 {
  padding-bottom: 0.25rem !important;
}
.pl-1,
.px-1 {
  padding-left: 0.25rem !important;
}
.p-2 {
  padding: 0.5rem !important;
}
.pt-2,
.py-2 {
  padding-top: 0.5rem !important;
}
.pr-2,
.px-2 {
  padding-right: 0.5rem !important;
}
.pb-2,
.py-2 {
  padding-bottom: 0.5rem !important;
}
.pl-2,
.px-2 {
  padding-left: 0.5rem !important;
}
.p-3 {
  padding: 1rem !important;
}
.pt-3,
.py-3 {
  padding-top: 1rem !important;
}
.pr-3,
.px-3 {
  padding-right: 1rem !important;
}
.pb-3,
.py-3 {
  padding-bottom: 1rem !important;
}
.pl-3,
.px-3 {
  padding-left: 1rem !important;
}
.p-4 {
  padding: 1.5rem !important;
}
.pt-4,
.py-4 {
  padding-top: 1.5rem !important;
}
.pr-4,
.px-4 {
  padding-right: 1.5rem !important;
}
.pb-4,
.py-4 {
  padding-bottom: 1.5rem !important;
}
.pl-4,
.px-4 {
  padding-left: 1.5rem !important;
}
.p-5 {
  padding: 3rem !important;
}
.pt-5,
.py-5 {
  padding-top: 3rem !important;
}
.pr-5,
.px-5 {
  padding-right: 3rem !important;
}
.pb-5,
.py-5 {
  padding-bottom: 3rem !important;
}
.pl-5,
.px-5 {
  padding-left: 3rem !important;
}
.m-auto {
  margin: auto !important;
}
.mt-auto,
.my-auto {
  margin-top: auto !important;
}
.mr-auto,
.mx-auto {
  margin-right: auto !important;
}
.mb-auto,
.my-auto {
  margin-bottom: auto !important;
}
.ml-auto,
.mx-auto {
  margin-left: auto !important;
}
@media (min-width: 576px) {
  .m-sm-0 {
    margin: 0 !important;
  }
  .mt-sm-0,
  .my-sm-0 {
    margin-top: 0 !important;
  }
  .mr-sm-0,
  .mx-sm-0 {
    margin-right: 0 !important;
  }
  .mb-sm-0,
  .my-sm-0 {
    margin-bottom: 0 !important;
  }
  .ml-sm-0,
  .mx-sm-0 {
    margin-left: 0 !important;
  }
  .m-sm-1 {
    margin: 0.25rem !important;
  }
  .mt-sm-1,
  .my-sm-1 {
    margin-top: 0.25rem !important;
  }
  .mr-sm-1,
  .mx-sm-1 {
    margin-right: 0.25rem !important;
  }
  .mb-sm-1,
  .my-sm-1 {
    margin-bottom: 0.25rem !important;
  }
  .ml-sm-1,
  .mx-sm-1 {
    margin-left: 0.25rem !important;
  }
  .m-sm-2 {
    margin: 0.5rem !important;
  }
  .mt-sm-2,
  .my-sm-2 {
    margin-top: 0.5rem !important;
  }
  .mr-sm-2,
  .mx-sm-2 {
    margin-right: 0.5rem !important;
  }
  .mb-sm-2,
  .my-sm-2 {
    margin-bottom: 0.5rem !important;
  }
  .ml-sm-2,
  .mx-sm-2 {
    margin-left: 0.5rem !important;
  }
  .m-sm-3 {
    margin: 1rem !important;
  }
  .mt-sm-3,
  .my-sm-3 {
    margin-top: 1rem !important;
  }
  .mr-sm-3,
  .mx-sm-3 {
    margin-right: 1rem !important;
  }
  .mb-sm-3,
  .my-sm-3 {
    margin-bottom: 1rem !important;
  }
  .ml-sm-3,
  .mx-sm-3 {
    margin-left: 1rem !important;
  }
  .m-sm-4 {
    margin: 1.5rem !important;
  }
  .mt-sm-4,
  .my-sm-4 {
    margin-top: 1.5rem !important;
  }
  .mr-sm-4,
  .mx-sm-4 {
    margin-right: 1.5rem !important;
  }
  .mb-sm-4,
  .my-sm-4 {
    margin-bottom: 1.5rem !important;
  }
  .ml-sm-4,
  .mx-sm-4 {
    margin-left: 1.5rem !important;
  }
  .m-sm-5 {
    margin: 3rem !important;
  }
  .mt-sm-5,
  .my-sm-5 {
    margin-top: 3rem !important;
  }
  .mr-sm-5,
  .mx-sm-5 {
    margin-right: 3rem !important;
  }
  .mb-sm-5,
  .my-sm-5 {
    margin-bottom: 3rem !important;
  }
  .ml-sm-5,
  .mx-sm-5 {
    margin-left: 3rem !important;
  }
  .p-sm-0 {
    padding: 0 !important;
  }
  .pt-sm-0,
  .py-sm-0 {
    padding-top: 0 !important;
  }
  .pr-sm-0,
  .px-sm-0 {
    padding-right: 0 !important;
  }
  .pb-sm-0,
  .py-sm-0 {
    padding-bottom: 0 !important;
  }
  .pl-sm-0,
  .px-sm-0 {
    padding-left: 0 !important;
  }
  .p-sm-1 {
    padding: 0.25rem !important;
  }
  .pt-sm-1,
  .py-sm-1 {
    padding-top: 0.25rem !important;
  }
  .pr-sm-1,
  .px-sm-1 {
    padding-right: 0.25rem !important;
  }
  .pb-sm-1,
  .py-sm-1 {
    padding-bottom: 0.25rem !important;
  }
  .pl-sm-1,
  .px-sm-1 {
    padding-left: 0.25rem !important;
  }
  .p-sm-2 {
    padding: 0.5rem !important;
  }
  .pt-sm-2,
  .py-sm-2 {
    padding-top: 0.5rem !important;
  }
  .pr-sm-2,
  .px-sm-2 {
    padding-right: 0.5rem !important;
  }
  .pb-sm-2,
  .py-sm-2 {
    padding-bottom: 0.5rem !important;
  }
  .pl-sm-2,
  .px-sm-2 {
    padding-left: 0.5rem !important;
  }
  .p-sm-3 {
    padding: 1rem !important;
  }
  .pt-sm-3,
  .py-sm-3 {
    padding-top: 1rem !important;
  }
  .pr-sm-3,
  .px-sm-3 {
    padding-right: 1rem !important;
  }
  .pb-sm-3,
  .py-sm-3 {
    padding-bottom: 1rem !important;
  }
  .pl-sm-3,
  .px-sm-3 {
    padding-left: 1rem !important;
  }
  .p-sm-4 {
    padding: 1.5rem !important;
  }
  .pt-sm-4,
  .py-sm-4 {
    padding-top: 1.5rem !important;
  }
  .pr-sm-4,
  .px-sm-4 {
    padding-right: 1.5rem !important;
  }
  .pb-sm-4,
  .py-sm-4 {
    padding-bottom: 1.5rem !important;
  }
  .pl-sm-4,
  .px-sm-4 {
    padding-left: 1.5rem !important;
  }
  .p-sm-5 {
    padding: 3rem !important;
  }
  .pt-sm-5,
  .py-sm-5 {
    padding-top: 3rem !important;
  }
  .pr-sm-5,
  .px-sm-5 {
    padding-right: 3rem !important;
  }
  .pb-sm-5,
  .py-sm-5 {
    padding-bottom: 3rem !important;
  }
  .pl-sm-5,
  .px-sm-5 {
    padding-left: 3rem !important;
  }
  .m-sm-auto {
    margin: auto !important;
  }
  .mt-sm-auto,
  .my-sm-auto {
    margin-top: auto !important;
  }
  .mr-sm-auto,
  .mx-sm-auto {
    margin-right: auto !important;
  }
  .mb-sm-auto,
  .my-sm-auto {
    margin-bottom: auto !important;
  }
  .ml-sm-auto,
  .mx-sm-auto {
    margin-left: auto !important;
  }
}
@media (min-width: 768px) {
  .m-md-0 {
    margin: 0 !important;
  }
  .mt-md-0,
  .my-md-0 {
    margin-top: 0 !important;
  }
  .mr-md-0,
  .mx-md-0 {
    margin-right: 0 !important;
  }
  .mb-md-0,
  .my-md-0 {
    margin-bottom: 0 !important;
  }
  .ml-md-0,
  .mx-md-0 {
    margin-left: 0 !important;
  }
  .m-md-1 {
    margin: 0.25rem !important;
  }
  .mt-md-1,
  .my-md-1 {
    margin-top: 0.25rem !important;
  }
  .mr-md-1,
  .mx-md-1 {
    margin-right: 0.25rem !important;
  }
  .mb-md-1,
  .my-md-1 {
    margin-bottom: 0.25rem !important;
  }
  .ml-md-1,
  .mx-md-1 {
    margin-left: 0.25rem !important;
  }
  .m-md-2 {
    margin: 0.5rem !important;
  }
  .mt-md-2,
  .my-md-2 {
    margin-top: 0.5rem !important;
  }
  .mr-md-2,
  .mx-md-2 {
    margin-right: 0.5rem !important;
  }
  .mb-md-2,
  .my-md-2 {
    margin-bottom: 0.5rem !important;
  }
  .ml-md-2,
  .mx-md-2 {
    margin-left: 0.5rem !important;
  }
  .m-md-3 {
    margin: 1rem !important;
  }
  .mt-md-3,
  .my-md-3 {
    margin-top: 1rem !important;
  }
  .mr-md-3,
  .mx-md-3 {
    margin-right: 1rem !important;
  }
  .mb-md-3,
  .my-md-3 {
    margin-bottom: 1rem !important;
  }
  .ml-md-3,
  .mx-md-3 {
    margin-left: 1rem !important;
  }
  .m-md-4 {
    margin: 1.5rem !important;
  }
  .mt-md-4,
  .my-md-4 {
    margin-top: 1.5rem !important;
  }
  .mr-md-4,
  .mx-md-4 {
    margin-right: 1.5rem !important;
  }
  .mb-md-4,
  .my-md-4 {
    margin-bottom: 1.5rem !important;
  }
  .ml-md-4,
  .mx-md-4 {
    margin-left: 1.5rem !important;
  }
  .m-md-5 {
    margin: 3rem !important;
  }
  .mt-md-5,
  .my-md-5 {
    margin-top: 3rem !important;
  }
  .mr-md-5,
  .mx-md-5 {
    margin-right: 3rem !important;
  }
  .mb-md-5,
  .my-md-5 {
    margin-bottom: 3rem !important;
  }
  .ml-md-5,
  .mx-md-5 {
    margin-left: 3rem !important;
  }
  .p-md-0 {
    padding: 0 !important;
  }
  .pt-md-0,
  .py-md-0 {
    padding-top: 0 !important;
  }
  .pr-md-0,
  .px-md-0 {
    padding-right: 0 !important;
  }
  .pb-md-0,
  .py-md-0 {
    padding-bottom: 0 !important;
  }
  .pl-md-0,
  .px-md-0 {
    padding-left: 0 !important;
  }
  .p-md-1 {
    padding: 0.25rem !important;
  }
  .pt-md-1,
  .py-md-1 {
    padding-top: 0.25rem !important;
  }
  .pr-md-1,
  .px-md-1 {
    padding-right: 0.25rem !important;
  }
  .pb-md-1,
  .py-md-1 {
    padding-bottom: 0.25rem !important;
  }
  .pl-md-1,
  .px-md-1 {
    padding-left: 0.25rem !important;
  }
  .p-md-2 {
    padding: 0.5rem !important;
  }
  .pt-md-2,
  .py-md-2 {
    padding-top: 0.5rem !important;
  }
  .pr-md-2,
  .px-md-2 {
    padding-right: 0.5rem !important;
  }
  .pb-md-2,
  .py-md-2 {
    padding-bottom: 0.5rem !important;
  }
  .pl-md-2,
  .px-md-2 {
    padding-left: 0.5rem !important;
  }
  .p-md-3 {
    padding: 1rem !important;
  }
  .pt-md-3,
  .py-md-3 {
    padding-top: 1rem !important;
  }
  .pr-md-3,
  .px-md-3 {
    padding-right: 1rem !important;
  }
  .pb-md-3,
  .py-md-3 {
    padding-bottom: 1rem !important;
  }
  .pl-md-3,
  .px-md-3 {
    padding-left: 1rem !important;
  }
  .p-md-4 {
    padding: 1.5rem !important;
  }
  .pt-md-4,
  .py-md-4 {
    padding-top: 1.5rem !important;
  }
  .pr-md-4,
  .px-md-4 {
    padding-right: 1.5rem !important;
  }
  .pb-md-4,
  .py-md-4 {
    padding-bottom: 1.5rem !important;
  }
  .pl-md-4,
  .px-md-4 {
    padding-left: 1.5rem !important;
  }
  .p-md-5 {
    padding: 3rem !important;
  }
  .pt-md-5,
  .py-md-5 {
    padding-top: 3rem !important;
  }
  .pr-md-5,
  .px-md-5 {
    padding-right: 3rem !important;
  }
  .pb-md-5,
  .py-md-5 {
    padding-bottom: 3rem !important;
  }
  .pl-md-5,
  .px-md-5 {
    padding-left: 3rem !important;
  }
  .m-md-auto {
    margin: auto !important;
  }
  .mt-md-auto,
  .my-md-auto {
    margin-top: auto !important;
  }
  .mr-md-auto,
  .mx-md-auto {
    margin-right: auto !important;
  }
  .mb-md-auto,
  .my-md-auto {
    margin-bottom: auto !important;
  }
  .ml-md-auto,
  .mx-md-auto {
    margin-left: auto !important;
  }
}
@media (min-width: 992px) {
  .m-lg-0 {
    margin: 0 !important;
  }
  .mt-lg-0,
  .my-lg-0 {
    margin-top: 0 !important;
  }
  .mr-lg-0,
  .mx-lg-0 {
    margin-right: 0 !important;
  }
  .mb-lg-0,
  .my-lg-0 {
    margin-bottom: 0 !important;
  }
  .ml-lg-0,
  .mx-lg-0 {
    margin-left: 0 !important;
  }
  .m-lg-1 {
    margin: 0.25rem !important;
  }
  .mt-lg-1,
  .my-lg-1 {
    margin-top: 0.25rem !important;
  }
  .mr-lg-1,
  .mx-lg-1 {
    margin-right: 0.25rem !important;
  }
  .mb-lg-1,
  .my-lg-1 {
    margin-bottom: 0.25rem !important;
  }
  .ml-lg-1,
  .mx-lg-1 {
    margin-left: 0.25rem !important;
  }
  .m-lg-2 {
    margin: 0.5rem !important;
  }
  .mt-lg-2,
  .my-lg-2 {
    margin-top: 0.5rem !important;
  }
  .mr-lg-2,
  .mx-lg-2 {
    margin-right: 0.5rem !important;
  }
  .mb-lg-2,
  .my-lg-2 {
    margin-bottom: 0.5rem !important;
  }
  .ml-lg-2,
  .mx-lg-2 {
    margin-left: 0.5rem !important;
  }
  .m-lg-3 {
    margin: 1rem !important;
  }
  .mt-lg-3,
  .my-lg-3 {
    margin-top: 1rem !important;
  }
  .mr-lg-3,
  .mx-lg-3 {
    margin-right: 1rem !important;
  }
  .mb-lg-3,
  .my-lg-3 {
    margin-bottom: 1rem !important;
  }
  .ml-lg-3,
  .mx-lg-3 {
    margin-left: 1rem !important;
  }
  .m-lg-4 {
    margin: 1.5rem !important;
  }
  .mt-lg-4,
  .my-lg-4 {
    margin-top: 1.5rem !important;
  }
  .mr-lg-4,
  .mx-lg-4 {
    margin-right: 1.5rem !important;
  }
  .mb-lg-4,
  .my-lg-4 {
    margin-bottom: 1.5rem !important;
  }
  .ml-lg-4,
  .mx-lg-4 {
    margin-left: 1.5rem !important;
  }
  .m-lg-5 {
    margin: 3rem !important;
  }
  .mt-lg-5,
  .my-lg-5 {
    margin-top: 3rem !important;
  }
  .mr-lg-5,
  .mx-lg-5 {
    margin-right: 3rem !important;
  }
  .mb-lg-5,
  .my-lg-5 {
    margin-bottom: 3rem !important;
  }
  .ml-lg-5,
  .mx-lg-5 {
    margin-left: 3rem !important;
  }
  .p-lg-0 {
    padding: 0 !important;
  }
  .pt-lg-0,
  .py-lg-0 {
    padding-top: 0 !important;
  }
  .pr-lg-0,
  .px-lg-0 {
    padding-right: 0 !important;
  }
  .pb-lg-0,
  .py-lg-0 {
    padding-bottom: 0 !important;
  }
  .pl-lg-0,
  .px-lg-0 {
    padding-left: 0 !important;
  }
  .p-lg-1 {
    padding: 0.25rem !important;
  }
  .pt-lg-1,
  .py-lg-1 {
    padding-top: 0.25rem !important;
  }
  .pr-lg-1,
  .px-lg-1 {
    padding-right: 0.25rem !important;
  }
  .pb-lg-1,
  .py-lg-1 {
    padding-bottom: 0.25rem !important;
  }
  .pl-lg-1,
  .px-lg-1 {
    padding-left: 0.25rem !important;
  }
  .p-lg-2 {
    padding: 0.5rem !important;
  }
  .pt-lg-2,
  .py-lg-2 {
    padding-top: 0.5rem !important;
  }
  .pr-lg-2,
  .px-lg-2 {
    padding-right: 0.5rem !important;
  }
  .pb-lg-2,
  .py-lg-2 {
    padding-bottom: 0.5rem !important;
  }
  .pl-lg-2,
  .px-lg-2 {
    padding-left: 0.5rem !important;
  }
  .p-lg-3 {
    padding: 1rem !important;
  }
  .pt-lg-3,
  .py-lg-3 {
    padding-top: 1rem !important;
  }
  .pr-lg-3,
  .px-lg-3 {
    padding-right: 1rem !important;
  }
  .pb-lg-3,
  .py-lg-3 {
    padding-bottom: 1rem !important;
  }
  .pl-lg-3,
  .px-lg-3 {
    padding-left: 1rem !important;
  }
  .p-lg-4 {
    padding: 1.5rem !important;
  }
  .pt-lg-4,
  .py-lg-4 {
    padding-top: 1.5rem !important;
  }
  .pr-lg-4,
  .px-lg-4 {
    padding-right: 1.5rem !important;
  }
  .pb-lg-4,
  .py-lg-4 {
    padding-bottom: 1.5rem !important;
  }
  .pl-lg-4,
  .px-lg-4 {
    padding-left: 1.5rem !important;
  }
  .p-lg-5 {
    padding: 3rem !important;
  }
  .pt-lg-5,
  .py-lg-5 {
    padding-top: 3rem !important;
  }
  .pr-lg-5,
  .px-lg-5 {
    padding-right: 3rem !important;
  }
  .pb-lg-5,
  .py-lg-5 {
    padding-bottom: 3rem !important;
  }
  .pl-lg-5,
  .px-lg-5 {
    padding-left: 3rem !important;
  }
  .m-lg-auto {
    margin: auto !important;
  }
  .mt-lg-auto,
  .my-lg-auto {
    margin-top: auto !important;
  }
  .mr-lg-auto,
  .mx-lg-auto {
    margin-right: auto !important;
  }
  .mb-lg-auto,
  .my-lg-auto {
    margin-bottom: auto !important;
  }
  .ml-lg-auto,
  .mx-lg-auto {
    margin-left: auto !important;
  }
}
@media (min-width: 1200px) {
  .m-xl-0 {
    margin: 0 !important;
  }
  .mt-xl-0,
  .my-xl-0 {
    margin-top: 0 !important;
  }
  .mr-xl-0,
  .mx-xl-0 {
    margin-right: 0 !important;
  }
  .mb-xl-0,
  .my-xl-0 {
    margin-bottom: 0 !important;
  }
  .ml-xl-0,
  .mx-xl-0 {
    margin-left: 0 !important;
  }
  .m-xl-1 {
    margin: 0.25rem !important;
  }
  .mt-xl-1,
  .my-xl-1 {
    margin-top: 0.25rem !important;
  }
  .mr-xl-1,
  .mx-xl-1 {
    margin-right: 0.25rem !important;
  }
  .mb-xl-1,
  .my-xl-1 {
    margin-bottom: 0.25rem !important;
  }
  .ml-xl-1,
  .mx-xl-1 {
    margin-left: 0.25rem !important;
  }
  .m-xl-2 {
    margin: 0.5rem !important;
  }
  .mt-xl-2,
  .my-xl-2 {
    margin-top: 0.5rem !important;
  }
  .mr-xl-2,
  .mx-xl-2 {
    margin-right: 0.5rem !important;
  }
  .mb-xl-2,
  .my-xl-2 {
    margin-bottom: 0.5rem !important;
  }
  .ml-xl-2,
  .mx-xl-2 {
    margin-left: 0.5rem !important;
  }
  .m-xl-3 {
    margin: 1rem !important;
  }
  .mt-xl-3,
  .my-xl-3 {
    margin-top: 1rem !important;
  }
  .mr-xl-3,
  .mx-xl-3 {
    margin-right: 1rem !important;
  }
  .mb-xl-3,
  .my-xl-3 {
    margin-bottom: 1rem !important;
  }
  .ml-xl-3,
  .mx-xl-3 {
    margin-left: 1rem !important;
  }
  .m-xl-4 {
    margin: 1.5rem !important;
  }
  .mt-xl-4,
  .my-xl-4 {
    margin-top: 1.5rem !important;
  }
  .mr-xl-4,
  .mx-xl-4 {
    margin-right: 1.5rem !important;
  }
  .mb-xl-4,
  .my-xl-4 {
    margin-bottom: 1.5rem !important;
  }
  .ml-xl-4,
  .mx-xl-4 {
    margin-left: 1.5rem !important;
  }
  .m-xl-5 {
    margin: 3rem !important;
  }
  .mt-xl-5,
  .my-xl-5 {
    margin-top: 3rem !important;
  }
  .mr-xl-5,
  .mx-xl-5 {
    margin-right: 3rem !important;
  }
  .mb-xl-5,
  .my-xl-5 {
    margin-bottom: 3rem !important;
  }
  .ml-xl-5,
  .mx-xl-5 {
    margin-left: 3rem !important;
  }
  .p-xl-0 {
    padding: 0 !important;
  }
  .pt-xl-0,
  .py-xl-0 {
    padding-top: 0 !important;
  }
  .pr-xl-0,
  .px-xl-0 {
    padding-right: 0 !important;
  }
  .pb-xl-0,
  .py-xl-0 {
    padding-bottom: 0 !important;
  }
  .pl-xl-0,
  .px-xl-0 {
    padding-left: 0 !important;
  }
  .p-xl-1 {
    padding: 0.25rem !important;
  }
  .pt-xl-1,
  .py-xl-1 {
    padding-top: 0.25rem !important;
  }
  .pr-xl-1,
  .px-xl-1 {
    padding-right: 0.25rem !important;
  }
  .pb-xl-1,
  .py-xl-1 {
    padding-bottom: 0.25rem !important;
  }
  .pl-xl-1,
  .px-xl-1 {
    padding-left: 0.25rem !important;
  }
  .p-xl-2 {
    padding: 0.5rem !important;
  }
  .pt-xl-2,
  .py-xl-2 {
    padding-top: 0.5rem !important;
  }
  .pr-xl-2,
  .px-xl-2 {
    padding-right: 0.5rem !important;
  }
  .pb-xl-2,
  .py-xl-2 {
    padding-bottom: 0.5rem !important;
  }
  .pl-xl-2,
  .px-xl-2 {
    padding-left: 0.5rem !important;
  }
  .p-xl-3 {
    padding: 1rem !important;
  }
  .pt-xl-3,
  .py-xl-3 {
    padding-top: 1rem !important;
  }
  .pr-xl-3,
  .px-xl-3 {
    padding-right: 1rem !important;
  }
  .pb-xl-3,
  .py-xl-3 {
    padding-bottom: 1rem !important;
  }
  .pl-xl-3,
  .px-xl-3 {
    padding-left: 1rem !important;
  }
  .p-xl-4 {
    padding: 1.5rem !important;
  }
  .pt-xl-4,
  .py-xl-4 {
    padding-top: 1.5rem !important;
  }
  .pr-xl-4,
  .px-xl-4 {
    padding-right: 1.5rem !important;
  }
  .pb-xl-4,
  .py-xl-4 {
    padding-bottom: 1.5rem !important;
  }
  .pl-xl-4,
  .px-xl-4 {
    padding-left: 1.5rem !important;
  }
  .p-xl-5 {
    padding: 3rem !important;
  }
  .pt-xl-5,
  .py-xl-5 {
    padding-top: 3rem !important;
  }
  .pr-xl-5,
  .px-xl-5 {
    padding-right: 3rem !important;
  }
  .pb-xl-5,
  .py-xl-5 {
    padding-bottom: 3rem !important;
  }
  .pl-xl-5,
  .px-xl-5 {
    padding-left: 3rem !important;
  }
  .m-xl-auto {
    margin: auto !important;
  }
  .mt-xl-auto,
  .my-xl-auto {
    margin-top: auto !important;
  }
  .mr-xl-auto,
  .mx-xl-auto {
    margin-right: auto !important;
  }
  .mb-xl-auto,
  .my-xl-auto {
    margin-bottom: auto !important;
  }
  .ml-xl-auto,
  .mx-xl-auto {
    margin-left: auto !important;
  }
}
.text-justify {
  text-align: justify !important;
}
.text-nowrap {
  white-space: nowrap !important;
}
.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.text-left {
  text-align: left !important;
}
.text-right {
  text-align: right !important;
}
.text-center {
  text-align: center !important;
}
@media (min-width: 576px) {
  .text-sm-left {
    text-align: left !important;
  }
  .text-sm-right {
    text-align: right !important;
  }
  .text-sm-center {
    text-align: center !important;
  }
}
@media (min-width: 768px) {
  .text-md-left {
    text-align: left !important;
  }
  .text-md-right {
    text-align: right !important;
  }
  .text-md-center {
    text-align: center !important;
  }
}
@media (min-width: 992px) {
  .text-lg-left {
    text-align: left !important;
  }
  .text-lg-right {
    text-align: right !important;
  }
  .text-lg-center {
    text-align: center !important;
  }
}
@media (min-width: 1200px) {
  .text-xl-left {
    text-align: left !important;
  }
  .text-xl-right {
    text-align: right !important;
  }
  .text-xl-center {
    text-align: center !important;
  }
}
.text-lowercase {
  text-transform: lowercase !important;
}
.text-uppercase {
  text-transform: uppercase !important;
}
.text-capitalize {
  text-transform: capitalize !important;
}
.font-weight-light {
  font-weight: 300 !important;
}
.font-weight-normal {
  font-weight: 400 !important;
}
.font-weight-bold {
  font-weight: 700 !important;
}
.font-italic {
  font-style: italic !important;
}
.text-white {
  color: #fff !important;
}
.text-primary {
  color: #007bff !important;
}
a.text-primary:focus,
a.text-primary:hover {
  color: #0062cc !important;
}
.text-secondary {
  color: #6c757d !important;
}
a.text-secondary:focus,
a.text-secondary:hover {
  color: #545b62 !important;
}
.text-success {
  color: #28a745 !important;
}
a.text-success:focus,
a.text-success:hover {
  color: #1e7e34 !important;
}
.text-info {
  color: #17a2b8 !important;
}
a.text-info:focus,
a.text-info:hover {
  color: #117a8b !important;
}
.text-warning {
  color: #ffc107 !important;
}
a.text-warning:focus,
a.text-warning:hover {
  color: #d39e00 !important;
}
.text-danger {
  color: #dc3545 !important;
}
a.text-danger:focus,
a.text-danger:hover {
  color: #bd2130 !important;
}
.text-light {
  color: #f8f9fa !important;
}
a.text-light:focus,
a.text-light:hover {
  color: #dae0e5 !important;
}
.text-dark {
  color: #343a40 !important;
}
a.text-dark:focus,
a.text-dark:hover {
  color: #1d2124 !important;
}
.text-muted {
  color: #6c757d !important;
}
.text-hide {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}
.visible {
  visibility: visible !important;
}
.invisible {
  visibility: hidden !important;
}
@media print {
  *,
  ::after,
  ::before {
    text-shadow: none !important;
    box-shadow: none !important;
  }
  a:not(.btn) {
    text-decoration: underline;
  }
  abbr[title]::after {
    content: " (" attr(title) ")";
  }
  pre {
    white-space: pre-wrap !important;
  }
  blockquote,
  pre {
    border: 1px solid #999;
    page-break-inside: avoid;
  }
  thead {
    display: table-header-group;
  }
  img,
  tr {
    page-break-inside: avoid;
  }
  h2,
  h3,
  p {
    orphans: 3;
    widows: 3;
  }
  h2,
  h3 {
    page-break-after: avoid;
  }
  @page {
    size: a3;
  }
  body {
    min-width: 992px !important;
  }
  .container {
    min-width: 992px !important;
  }
  .navbar {
    display: none;
  }
  .badge {
    border: 1px solid #000;
  }
  .table {
    border-collapse: collapse !important;
  }
  .table td,
  .table th {
    background-color: #fff !important;
  }
  .table-bordered td,
  .table-bordered th {
    border: 1px solid #ddd !important;
  }
}
/*# sourceMappingURL=bootstrap.min.css.map */
.correlation_matrix {
  width: 100%;
  /* position: absolute; /1* needed for on-top stacking of divs *1/ */
}

/* .correlation_matrix_cell { */
/*   border: 1px solid black; */
/*   background-color: white; */
/*   width: 100%; */
/*   font-size: 40%; */
/* } */

.correlation_matrix_cell_lower_left {
  width: 100%;
  /* border: 1px solid #222222; */
}
.correlation_matrix_cell_upper_right {
  width: 100%;
  border: 1px solid black;
}
.correlation_matrix_cell_diagonal {
  width: 100%;
  /* border: 1px solid black; */
  /* border-left: 2px solid black; */
  /* border-bottom: 2px solid black; */
}

.correlation_matrix_cell_lower_left p {
  font-size: 80%;
  margin: 0px;
  padding: 0px;
  width: 100%;
  /* align vertically & horizontally */
  display: inline-block;
  vertical-align: middle;
  text-align: center;
}

/* .correlation_matrix_cell:after { */
/*   content: ""; */
/*   display: block; */
/*   padding-bottom: 80%; */
/* } */

.correlation_matrix_cell_lower_left:after {
  content: "";
  display: block;
  padding-bottom: 100%;
}

.correlation_matrix_cell_diagonal:after {
  content: "";
  display: block;
  padding-bottom: 100%;
}

.correlation_matrix_cell_upper_right:after {
  content: "";
  display: block;
  padding-bottom: 100%;
}

/* ----------------------------- */

/* .dropdown { */
/*   position: relative; */
/*   display: inline-block; */
/* } */

/* .dropdown-content { */
/*   display: none; */
/*   position: absolute; */
/*   background-color: #f9f9f9; */
/*   min-width: 160px; */
/*   box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2); */
/*   padding: 12px 16px; */
/*   z-index: 1; */
/* } */

/* .dropdown:hover .dropdown-content { */
/*   display: block; */
/* } */

/*  ------- */

/* .correlation_matrix_info_text { */
/*   position: absolute; */
/* } */
#content {
  width: 90%;
  /* margin-right: auto; /1* center *1/ */
  /* margin-left: auto; /1* center *1/ */
  /* padding-top: 30px; */
  /* height: 90vh; */
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}
.section {
  /* height: 600px; */
  border-radius: 2.5vh;
}

#left_colum {
  /* height: 90vh; */
  height: 100%;
}

#right_colum {
  /* height: 90vh; */
  height: 100%;
  /* */
}

#section_ts_plot {
  height: 100%;
}

#section_navbar {
  /* height: 100%; */
}

#navbar2_ul {
  height: 77vh;
  overflow: scroll;
}

#canvas_time_series_plot {
  height: 100%;
}

#section_time_series_options {
  height: 20%;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.ts_option {
  /* display: grid; */
  /* grid-template-columns: repeat(3, 1fr); */

  text-align: center;
  margin: 10px;
  border: 1px solid gray;
  border-radius: 5px;
}

.ts_suboption {
  border: 1px solid gray;
}
.button_menu {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  width: 95%;
  margin-top: 2.5%;
  margin-bottom: 2.5%;
  margin-left: 2.5%;
  margin-right: 2.5%;
}

.button_menu_table {
  width: 100%;
  padding-top: 20px;
}

.button_menu_table td {
  text-align: center;
  padding-top: 10px;
}

/* TODO: rename to button-holder or sth? */
button {
  border: 3px solid black;
  border-radius: 10000px;
  background-color: black;

  font-family: Arial, Helvetica, sans-serif; /* ? */
  font-size: 16px;
  color: white;

  width: 90%;
  height: 2em; /* center text vertically */

  margin-top: 5px;
  margin-bottom: 5px;
  margin-right: auto;
  margin-left: auto;
  padding: 0px;
  outline: none;
}

.button_toggle {
  background-color: black;
  border: 3px solid black;
  border-radius: 10000px;
  width: 30px;
  height: 30px;
  color: white;
  /* height: 2em; /1* center text vertically *1/ */
}

/* #nr_of_bodies_textfield { */
/*   border: 0px; */
/*   border-radius: 10000px; */
/*   background-color: black; */
/*   text-align: center; */
/*   padding: 0px; */

/*   font-family: Arial, Helvetica, sans-serif; /1* ? *1/ */
/*   font-size: 16px; */
/*   color: white; */

/*   width: 90%; */
/*   height: 2em; */
/*   margin-top: 5px; */
/*   margin-bottom: 5px; */
/*   margin-right: auto; */
/*   margin-left: auto; */
/* } */

.latex {
  text-align: left;
  padding: 5%;
}
/* NAVGRID SECTION ====================================== */

/* navgrid section title */
.navgrid_section_title {
  width: 100%;
  text-align: center;
  font-weight: 690;
}

#section_navgrid {
  width: 100%;
  /* margin-bottom: 30px; /1* if changed: also change for .section *1/ */
  /* border: 2px solid #555555; */
  /* border-radius: 20px; /1* if changed: also change for #canvas/#section? *1/ */
  /* background-color: #111111; */
}

/* NAVGRID ====================================== */

#navgrid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  margin-bottom: 45px;
  margin-top: 15px;
}
@media only screen and (max-width: 1201px) {
  #navgrid {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media only screen and (max-width: 751px) {
  #navgrid {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* NAVGRID CELL ====================================== */

/* navgrid cell */
.navgrid_cell {
  /* border: 0px; */
  /* width: 100%; */
  /* height: 100%; */
  /* background-color: #222222; */
  /* outline: none; */
  /* position: relative; */
  /* padding: 0px; */
  text-decoration: none;
  /* margin-top: 15px; */
  color: #dddddd;
}

.navgrid_cell_title {
  text-align: center;
  margin: 0px;
  padding: 0px;
  font-size: 14px;

  /* font-variant: normal; */
}

/* NAVGRID THUMBNAIL ====================================== */

.navgrid_thumbnail-inactive {
  width: 86%; /* make square (with :after) */
  border: 2px solid #555555;
  border-radius: 30px;
  box-shadow: inset 0px 0px 0px 0px black;
  box-sizing: border-box;

  /* center */
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-top: 7%; /* left & right done autom. through align */
  margin-bottom: 7%;

  /* grayscale */
  filter: grayscale(100%);
  -webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */
}

.navgrid_thumbnail {
  width: 86%; /* make square (with :after) */
  border: 2px solid #555555;
  border-radius: 30px;
  box-shadow: inset 0px 0px 0px 0px black;
  box-sizing: border-box;

  /* center */
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-top: 7%; /* left & right done autom. through align */
  margin-bottom: 7%;

  outline: none;

  /* transition (with :hover) */
  transition: border 0.35s, filter 0.35s, transform 0.35s ease-in-out;
  /* grayscale */
  filter: grayscale(100%);
  -webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */
}
@media only screen and (max-width: 551px) {
  .navgrid_thumbnail {
    filter: grayscale(0%);
  }
}
.navgrid_thumbnail:after {
  content: "";
  display: block;
  padding-bottom: 100%;
}
.navgrid_thumbnail:hover {
  border: 2px solid #555555;
  transform: scale(1.1);
  -webkit-filter: grayscale(0%); /* Safari 6.0 - 9.0 */
  filter: grayscale(0%);
  cursor: pointer;
}
#content {
  width: 100%;
  padding-left: 0px;
  padding-right: 0px;
}

.multi-button {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  border: 1px solid var(--main-border-color);
  border-radius: 30px;
  width: 100%;
  overflow: hidden;
}
.sub-button {
  border: 0px;
  border-radius: 0px;
  height: 100%; /* works, but why? */
  border-right: 1px solid var(--main-border-color);
  background-color: black;
}
/* .sub-button_active { */
/*   background-color: var(--main-bg-color); */
/* } */
.sub-button:active {
  background-color: green;
}

button {
  color: white;
  /*   /1* border: 0px; *1/ */
  /*   border: var(--main-border); */
  /*   border-radius: 10000px; */
  /*   background-color: var(--main-section-color); */

  /*   font-family: var(--main-font-family); /1* ? *1/ */
  /*   font-size: 16px; */
  /*   color: white; */

  /*   /1* width: 90%; *1/ */
  /*   height: 2em; /1* center text vertically *1/ */

  /*   /1* margin-top: 5px; *1/ */
  /*   margin-bottom: 5px; */
  /*   /1* margin-right: auto; *1/ */
  /*   /1* margin-left: auto; *1/ */
  /*   padding: 0px; */
  /*   outline: none; */
}

/* TODO remove ay  */
#page-columns {
  width: 90%;
  margin-left: 5%;
  margin-right: 5%;
}
#page-column-left {
  width: 100%;
  margin: 0;
}
#page-column-right {
  width: 100%;
  margin: 0;
  padding-top: 24px; /* TODO */
}
@media only screen and (min-width: 1201px) {
  #page-columns {
    /* display: flex; */
    /* column-count: 2; */
    /* column-width: 20%; */
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
  #page-column-left {
    width: 92.5%;
    margin-left: 5%;
    margin-right: 2.5%;
  }
  #page-column-right {
    width: 92.5%;
    margin-left: 2.5%;
    margin-right: 5%;
  }
  #ay-right-thingy {
    margin-top: 24px; /* must be same as .navgrid_section.height */
    padding: 15px;
    /* height: 200px; */
  }
}
button {
  outline: none;
}
button:active {
  background-color: blue;
}
#button-menu_main {
  padding: 10px;
  /* height: 100px; /1* TODO *1/ */
}
/* ====================================================== */
/* BUTTON MENU */
/* ====================================================== */
.button_menu {
  /* width: 100%; */

  /* --main-bg-color: #111111; */
  /* --main-section-color: #222222; */
  /* --main-border-color: #555555; */
  /* --main-text-color: #dddddd; */
  /* --main-font-family: Arial, Helvetica, sans-serif; */
  /* --main-border: 2px solid var(--main-border-color); */

  /* display: grid; */
  /* grid-template-columns: repeat(5, 1fr); */

  /* border: 1px solid green; */
  /* text-align: center; */

  /* margin: 0px; */
  /* margin-top: 2.5%; */
  /* margin-bottom: 2.5%; */
  /* margin-left: 2.5%; */
  /* margin-right: 2.5%; */
}
.bm {
}
.bm_options {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}
/* ====================================================== */
/* BUTTON */
/* ====================================================== */
.bm_button {
  background-color: black;
  border: 1px solid var(--main-border-color);
  border-radius: 15px;
  margin: 3px;
  padding: 3px;
  padding-left: 10px;
  padding-right: 10px;
}
/* ====================================================== */
/* MULTIBUTTON */
/* ====================================================== */
.bm_multibutton {
  /* width: 100%; */
  background-color: black;

  overflow: hidden; /* bc. of round edges */
  border: 1px solid var(--main-border-color);
  border-radius: 15px;

  margin-top: 10px;
  margin-bottom: 10px;

  display: grid;
  /* grid-template-columns: repeat(3, 1fr); */
}
.bm_multibutton_title {
  /* margin-top: 25px; */
  /* margin-bottom: 10px; */
  text-align: center;
  padding-left: 10px;
}
.bm_multibutton_button {
  background-color: black;
  border: none;
  /* border: 1px solid var(--main-border-color); */
  /* border-radius: 15px; */
  /* text-align: center; */
  box-sizing: none;
  border-left: 1px solid var(--main-border-color);
  padding: 5px;
}
/* ====================================================== */
/* BUTTON */
/* ====================================================== */
.bm_info_textfield {
  margin: 10px;
}
/* ====================================================== */
/* OPTION */
/* ====================================================== */
.bm_option_title {
  /* margin-top: 25px; */
  /* margin-bottom: 10px; */
  text-align: center;
  padding-left: 10px;
}
.bm_option {
  /* background-color: black; */
  /* border: 1px solid var(--main-border-color); */
  /* border-radius: 15px; */
  /* /1* margin: 10px; *1/ */
  /* display: grid; */
  /* /1* width: 100%; *1/ */
  /* grid-template-columns: repeat(3, 1fr); */
  /* padding: auto; */
  /* margin: auto; */
  margin-top: 10px;
  margin-bottom: 10px;
  /* display: grid; */
  /* grid-template-columns: repeat(2, 2fr); */
  /* overflow: hidden; */
}
.bm_option_button {
  background-color: black;
  border: none;
  /* border: 1px solid var(--main-border-color); */
  /* border-radius: 15px; */
  /* text-align: center; */
  box-sizing: none;
  border-left: 1px solid var(--main-border-color);
  padding: 5px;
  /* margin: auto; */
}
/* DROPDOWN */
.dropdown-container {
}
.dropdown {
  position: relative;
  display: inline-block;

  padding: 10px;
  background-color: black;
  border: 1px solid var(--main-border-color);
  border-radius: 30px;
}
.dropdown-content {
  display: none;

  position: absolute;
  /* z-index: 1; */

  /* border: 1px solid var(--main-border-color); */
  margin-top: 0px;
  /* min-width: 160px; */
  /* box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2); */
  /* height: 3em; */
  /* padding: 0px 0px; */
  text-align: center;
  width: 100%;
}
.dropdown:hover .dropdown-content {
  /* display: block; */
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  z-index: 2;
  /* position: relative; */
}
.dropdown-item {
  background-color: black;
  border: 1px solid var(--main-border-color);
  border-radius: 0px;
  margin: 0;
  padding: 5px 7px;
  width: 100%;
}
.dropdown-item:active {
  background-color: green;
}
import init, { Client } from "../../static/pkg/mxyz_client.js";

console.log("TODO: move simulation stuff here?");

// let sim_id = document.getElementById("simulation.js").getAttribute("sim_id");

// (async () => {
//   await init();

//   // initialization
//   let simulation = Simulation.new(sim_id);
//   simulation.init();

//   // event listeners for options
//   var options = document.getElementsByTagName("select");
//   for (let idx = 0; idx < options.length; idx++) {
//     let option = options[idx];
//     option.addEventListener("change", () => {
//       simulation.handle_option_event(option.id);
//     });
//   }

//   // event listeners for buttons
//   var buttons = document.getElementsByTagName("button");
//   for (let idx = 0; idx < buttons.length; idx++) {
//     let button = buttons[idx];
//     button.addEventListener("click", () => {
//       simulation.handle_button_event(button.id);
//     });
//   }

//   // event listeners for sliders
//   var inputs = document.getElementsByTagName("input");
//   for (let idx = 0; idx < inputs.length; idx++) {
//     let slider = inputs[idx];
//     if (slider.getAttribute("type") != "range") continue;
//     slider.addEventListener("change", () => {
//       simulation.handle_slider_event(slider.id);
//     });
//   }

//   // step loop
//   const loop = () => {
//     simulation.step();
//     simulation.render();
//     requestAnimationFrame(loop);
//   };
//   loop();
// })();
import init, { Simulation } from "../../static/pkg/mxyz_client.js";

let sim_id = document.getElementById("simulation.js").getAttribute("sim_id");

(async () => {
  await init();

  // initialization
  let simulation = Simulation.new(sim_id);
  simulation.init();

  // TODO move this definition to rust?
  let NR_OF_ITERATIONS_PER_RENDER = 5;
  let bm = document.getElementById("button-menu_main");
  let slider = document.createElement("input");
  slider.type = "range";
  slider.id = "slider_set-iterations-per-render";
  slider.min = 0;
  slider.max = 100;
  slider.value = 1; // if changed: also in sim/mod.rs AND/OR sim/config.rs
  bm.appendChild(slider);
  slider.style = "width: 100%";

  // event listeners for options
  var options = document.getElementsByTagName("select");
  for (let idx = 0; idx < options.length; idx++) {
    let option = options[idx];
    option.addEventListener("change", () => {
      simulation.handle_option_event(option.id);
    });
  }

  // event listeners for buttons
  var buttons = document.getElementsByTagName("button");
  for (let idx = 0; idx < buttons.length; idx++) {
    let button = buttons[idx];
    button.addEventListener("click", () => {
      simulation.handle_button_event(button.id);
    });
  }

  // event listeners for sliders
  var inputs = document.getElementsByTagName("input");
  for (let idx = 0; idx < inputs.length; idx++) {
    let slider = inputs[idx];
    if (slider.getAttribute("type") != "range") continue;
    slider.addEventListener("change", () => {
      simulation.handle_slider_event(slider.id);
    });
  }

  // let last_date = Date.now();
  const loop = () => {
    let date_1 = Date.now();
    simulation.render();
    let date_2 = Date.now();
    let fps_renderer = 1000 / (date_2 - date_1);

    let date_3 = Date.now();
    simulation.step(); // TODO move render into sim.step() ?
    let date_4 = Date.now();
    let fps_engine = 1000 / (date_4 - date_3);

    let textfield_fps_e = document.getElementById("textfield_fps_engine");
    textfield_fps_e.innerHTML = "fps_e: " + Math.round(fps_engine);
    let textfield_fps_r = document.getElementById("textfield_fps_renderer");
    textfield_fps_r.innerHTML = "fps_r: " + Math.round(fps_renderer);

    // let dt = (date_2 - date_1) / 1000;
    // let fps = 1 / dt;
    // console.log(fps);

    // setTimeout(function () {
    requestAnimationFrame(loop);
    // }, 500);
  };
  loop();
})();

<html>
    <head>

        {% block head %}            
            <meta charset="utf-8">
            <title> mader.xyz </title>
            <link rel="icon" href="/static/img/favicon.ico" type="image/png"/>
            <link rel="stylesheet" href="/static/css/base.css" type="text/css">
        {% endblock head %}            

    </head>
    <body>
    
        <div id="header">
            {% block header %}            
                <a href="/" id="header_home"> mader.xyz </a>
            {% endblock header %}            
        </div>
    
        <div id="content">
            {% block content %}

            {% endblock content %}
        </div>
    
    </body>
</html>


{% extends "base" %}


{% block head %}

    {{ super() }}
    <link rel="stylesheet" type="text/css" href="/static/css/index.css">

{% endblock head %}

{% block title %}
    Index
{% endblock title %}

{% block content %}
    {{ super() }}

    {% include "index/navgrid" %}

    <!-- react
                <div id="react-root"></div>
                <script src="static/js/react_frontend/dist/index.js"></script>
    -->

{% endblock content %}


{% for section in navgrid.sections %}

    <div class="navgrid_section_title">
        {{ section.title }}
    </div>

    <div id="section_navgrid">
        <div id="navgrid">
            {% for item in section.items %}
                <a href="./simulations/{{ section.section_id }}/{{ item.item_id }}" 
                  class="navgrid_cell"
                > 
                    <img 
                        {% if item.item_id == "3body-fig8" %}
                            class="navgrid_thumbnail" 
                        {% elif item.item_id == "nbody-flowers" %}
                            class="navgrid_thumbnail" 
                        {% elif item.item_id == "2body-kepler" %}
                            class="navgrid_thumbnail-inactive" 
                        {% else %}
                            class="navgrid_thumbnail" 
                        {% endif %}
                         src="{{ item.path_to_thumbnail }}" 
                         alt="{{ item.item_id }}"
                    /> 
                    <div class="navgrid_cell_title">
                        {{ item.title }}
                    </div>
                </a>
            {% endfor %}
        </div>
    </div>

{% endfor %}


{% extends "base" %}


{% block head %}
    {{ super() }}

    <link rel="stylesheet" href="/static/css/simulation/base.css" type="text/css">
    <link rel="stylesheet" href="/static/css/simulation/button_menu.css" type="text/css">

{% endblock head %}

{% block content %}
    {{ super() }}

    <!-- ====== SIMULATION SCRIPT ========================= -->
    <script 
        type="module" 
        id="simulation.js"
        src="../../static/js/simulation.js"
        sim_id="{{ sim_id }}"
    ></script>

    <!-- ====== COLUMN VIEW (big screen only) ============= -->

    <div id="page-columns">
        <div id="page-column-left">

            <!-- ====== PAGE TITLE ======================== -->
            <div class="section_title"> {{ title }} </div>

            <!-- ====== CANVAS ============================ -->
            <div class="canvas_holder">
                <canvas id="canvas_main" width="900px"> </canvas>
                <script> 
                    let cnv = document.getElementById("canvas_main");
                    cnv.height = cnv.width;  // TODO make changeable: width=900px & height=width
                </script>
            </div>

            <!-- ====== MAIN BUTTON MENU ================== -->
            <div id="button-menu_main" class="section"> </div>

        </div>
        <div id="page-column-right">

            <!-- ====== BUTTON MENUs ====================== -->
            <div id="button-menus"> </div>

        </div>
    </div>

{% endblock content %}


[package]
    name = "mxyz-utils"
    version = "0.1.0"
    authors = ["Vincent C. Mader <vincent@mader.xyz>"]
    edition = "2018"

[dependencies]
    console_error_panic_hook = { version = "0.1.6", optional = true }
    wasm-bindgen = {version = "^0.2", features = ["nightly"]}
    js-sys = "0.3.51"
    gloo = "0.2.0"

[dependencies.web-sys]
    version = "0.3.55"
    features = [
        'console',
        'Document',
        'Element',
        'HtmlElement',
        'HtmlButtonElement',
        'Node',
        'Window',
        'CanvasRenderingContext2d',
        'CssStyleDeclaration',
        'EventTarget',
        'HtmlOptionElement',
        'HtmlCanvasElement',
        'HtmlParagraphElement',
        'EventListener',
        'MouseEvent',
    ]

[features]
    default = ["console_error_panic_hook"]


use wasm_bindgen::JsCast;
use wasm_bindgen::JsValue;

use crate::dom::document;


pub fn canvas(canvas_id: &str) -> web_sys::HtmlCanvasElement {
    document()
        .get_element_by_id(canvas_id)
        .unwrap()
        .dyn_into::<web_sys::HtmlCanvasElement>()
        .map_err(|_| ())
        .unwrap()
}

pub fn ctx(canvas: &web_sys::HtmlCanvasElement) -> web_sys::CanvasRenderingContext2d {
    canvas
        .get_context("2d")
        .unwrap()
        .unwrap()
        .dyn_into::<web_sys::CanvasRenderingContext2d>()
        .unwrap()
}

pub struct Canvas {
    pub context: web_sys::CanvasRenderingContext2d,
    pub dimensions: (f64, f64),
    scale: f64,
    pub zoom: f64,
}
impl Canvas {
    pub fn new(canvas_id: &str) -> Self {
        let element = canvas(canvas_id);
        let context = ctx(&element);
        let scale   = 1.;
        let canvas_width  = scale * f64::from(element.width());
        let canvas_height = scale * f64::from(element.height());
        let dimensions = (canvas_width, canvas_height);
        // let zoom = match centered { true => 0.5, _ => 1.}; // TODO make changeable
        let zoom = 0.5;
        Canvas {
            // element, 
            context, dimensions, scale, zoom,
        }
    }
    pub fn clear(&mut self) {
        let w = self.dimensions.0;
        let h = self.dimensions.1;
        self.context.clear_rect(0., 0., w, h);
    }
    pub fn set_font(&mut self, font: &str) {
        self.context.set_font(&font);
    }
    pub fn fill_text(&mut self, text: &str, x: f64, y: f64) {
        self.context.fill_text(&text, x, y).unwrap();
    }
    pub fn reset_line_width(&mut self) {
        self.context.set_line_width(1.);
    }
    pub fn set_line_width(&mut self, width: f64) {
        self.context.set_line_width(width);
    }
    pub fn set_stroke_style(&mut self, color: &str) {
        self.context.set_stroke_style(&JsValue::from_str(&color));
    }
    pub fn set_fill_style(&mut self, color: &str) {
        self.context.set_fill_style(&JsValue::from_str(&color));
    }
    pub fn rescale_vec(&self, vec: (f64, f64)) -> (f64, f64) {
        // re-scale to canvas dimensions [px]   // TODO include scale
        let mut vec = vec;
        vec.0 *= self.zoom * self.dimensions.0 / self.scale;
        vec.1 *= self.zoom * self.dimensions.1 / self.scale;
        // center
        vec.0 += 0.5*self.dimensions.0;
        vec.1 += 0.5*self.dimensions.1;
        vec
    }
    pub fn rescale_dist(&self, dist: f64) -> f64 {
        dist * self.dimensions.1 * self.zoom / self.scale  // only works for square
    }
    pub fn draw_line(
        &mut self, 
        mut from: (f64, f64), 
        mut to:   (f64, f64),
    ) {
        from = self.rescale_vec(from);
        to   = self.rescale_vec(to);
        // draw
        self.context.begin_path();
        self.context.move_to(from.0, from.1);
        self.context.line_to(to.0, to.1);
        self.context.stroke();
    }
    pub fn draw_triangle(
        &mut self, 
        mut first:  (f64, f64), 
        mut second: (f64, f64),
        mut third:  (f64, f64),
    ) {
        first = self.rescale_vec(first);
        second = self.rescale_vec(second);
        third = self.rescale_vec(third);
        // draw
        self.context.begin_path();
        self.context.move_to( first.0, first.1);
        self.context.line_to(second.0, second.1);
        self.context.line_to( third.0, third.1);
        self.context.stroke();
        self.context.fill()
    }
    pub fn draw_circle(
        &mut self, 
        center: (f64, f64), 
        radius:  f64,
        fill:    bool
    ) {
        const TAU: f64 = 2.0 * std::f64::consts::PI;

        let center = self.rescale_vec(center);
        let radius = self.rescale_dist(radius);

        // draw
        self.context.begin_path();
        self.context.arc(center.0, center.1, radius, 0.0, TAU).unwrap();
        self.context.stroke();
        if fill {
            self.context.fill();
        }
    }
    pub fn fill_rect(
        &mut self, 
        center: (f64, f64), 
        width: f64,
        height: f64,
    ) {
        let center = self.rescale_vec(center);
        let width = self.rescale_dist(width);
        let height = self.rescale_dist(height);
        // draw
        self.context.begin_path();
        self.context.fill_rect(
            center.0, center.1, width, height
        )
    }
}


pub fn log(x: &str) {
    let array = js_sys::Array::new();
    array.push(&x.into());
    web_sys::console::log(&array);
}


pub mod canvas;
pub mod console;





use wasm_bindgen::JsCast;
use gloo::{events::EventListener};


pub fn window() -> web_sys::Window {
    web_sys::window()
        .expect("no global `window` exists")
}

pub fn document() -> web_sys::Document {
    window()
        .document()
        .expect("should have a document on window")
}

pub fn body() -> web_sys::HtmlElement {
    document()
        .body()
        .expect("document expect to have have a body")
}





// pub fn request_animation_frame(f: &Closure<dyn FnMut()>) {
//     window()
//         .request_animation_frame(f.as_ref().unchecked_ref())
//         .expect("should register 'requestAnimationFrame' OK");
// }


// pub fn body() -> web_sys::HtmlElement {
//     document()
//         .body()
//         .expect("document should have a body")
// }









pub fn eventlistener_new_p_mousedown()
{
    let window = web_sys::window().expect("global window does not exists");    
    let document = window.document().expect("expecting a document on window");
    let body = document.body().expect("document expect to have have a body");

    let paragraph = document.create_element("p").unwrap()
    .dyn_into::<web_sys::HtmlParagraphElement>()
    .map_err(|_| ())
    .unwrap();
    paragraph.set_align("center");
    paragraph.set_inner_html("<br />Click within this boundary to test the mousedown event. <br />Check the results in your web console.<br /><br />");
    paragraph.style()
        .set_property("border", "solid")
        .map_err(|_| ())
        .unwrap();

    let on_down = EventListener::new(&paragraph, "mousedown", move |_event| {
        web_sys::console::log_1(&"Paragraph mousedown".into());
    });
    on_down.forget();
    body.append_child(&paragraph).unwrap();

}
pub fn eventlistener_new_p_mousemove()
{
    let window = web_sys::window().expect("global window does not exists");    
    let document = window.document().expect("expecting a document on window");
    let body = document.body().expect("document expect to have have a body");

    let paragraph = document.create_element("p").unwrap()
    .dyn_into::<web_sys::HtmlParagraphElement>()
    .map_err(|_| ())
    .unwrap();

    paragraph.set_align("center");
    paragraph.set_inner_html("<br />Move within this boundary to test the mousemove event. <br />Check the results in your web console.<br /><br />");

    paragraph.style()
        .set_property("border", "solid")
        .map_err(|_| ())
        .unwrap();

    let on_move = EventListener::new(&paragraph, "mousemove", move |_event| {
        web_sys::console::log_1(&"Paragrapah mousemove".into());
    });
    on_move.forget();
    body.append_child(&paragraph).unwrap();

}

pub fn eventlistener_new_p_mouseup()
{
    let window = web_sys::window().expect("global window does not exists");    
    let document = window.document().expect("expecting a document on window");
    let body = document.body().expect("document expect to have have a body");

    let paragraph = document.create_element("p").unwrap()
    .dyn_into::<web_sys::HtmlParagraphElement>()
    .map_err(|_| ())
    .unwrap();

    paragraph.set_align("center");
    paragraph.set_inner_html("<br />Move within this boundary to test the mouseup event. <br />Check the results in your web console.<br /><br />");

    paragraph.style()
        .set_property("border", "solid")
        .map_err(|_| ())
        .unwrap();

    let on_up = EventListener::new(&paragraph, "mouseup", move |_event| {
        web_sys::console::log_1(&"Paragrapah mouseup".into());
    });
    on_up.forget();
    body.append_child(&paragraph).unwrap();
}






pub fn set_panic_hook() {
    // When the `console_error_panic_hook` feature is enabled, 
    // we can call the `set_panic_hook` function at least 
    // once during initialization, and then we will get 
    // better error messages if our code ever panics.
    //
    // For more details see
    // https://github.com/rustwasm/console_error_panic_hook#readme
    #[cfg(feature = "console_error_panic_hook")]
    console_error_panic_hook::set_once();
}


use wasm_bindgen::prelude::*;

#[wasm_bindgen]
extern {
    pub fn alert(s: &str);
}

pub fn add_button_to_menu <F> (
    text: &str,
    // callback: &mut Box<F() -> ()>,
    // callback: Fn() -> (),
    // simulation: &'static mut Simulation,
    // callback: &'static mut F,
    callback: &'static mut Box<F>,
    // callback: FnMut (),
    // callback: fn(&mut Simulation),
) 
where F: FnMut () 
{
    let document = document();
    let section = document.get_element_by_id("button_menu-0").unwrap();
	
	let button = document.create_element("button").unwrap()
		.dyn_into::<web_sys::HtmlButtonElement>().unwrap();
    // button.set_id("button");
	button.set_text_content(Some(text));
	
	// let paragraph = document.create_element("p").unwrap()
	// 	.dyn_into::<web_sys::HtmlParagraphElement>().unwrap();                    
    // section.append_child(&paragraph).unwrap();

    // use js_sys::Function;
    // fn f() {}
    // let f = || {}
    // let f = Function::from(f);
    // let optionn = Option::from(&f);
    // button.set_onclick(optionn);

	let on_click = EventListener::new(
        &button, "click", 
        move |_event| {
		    // web_sys::console::log_2(
                // &"Hello World Gloo :%s".into(),
				// &"WebAssemblyMan".into()
            // );
		    // paragraph.set_text_content(Some("Gloo: Hello World"));
            // let a = (*callback);
            callback();
	    }
    );
	on_click.forget();     
	section.append_child(&button).unwrap();
}	


pub fn set_inner_html(id: &str, inner: &str) {
    let document = document();
    document.get_element_by_id(id)
        .unwrap()
        .set_inner_html(inner);
}

use std::fs;

pub fn load_file(path_to_file: &str) -> String {
    fs::read_to_string(path_to_file)
        .expect("ERROR: Something went wrong while reading the file")
}


pub mod dom;
pub mod file_io;


pub fn type_of<T>(_: &T) -> &'static str{
    std::any::type_name::<T>()
}

#!/bin/sh


# clear terminal
# -----------------------------------------------------------------------------

    clear


# get path to project root
# -----------------------------------------------------------------------------

    cd "$(dirname $0)"
    PATH_TO_SCRIPTS=$(pwd)
    PATH_TO_PROJECT="$(cd $PATH_TO_SCRIPTS/.. && echo $(pwd))"


# build client (to web-assembly)
# -----------------------------------------------------------------------------

    cd "$PATH_TO_PROJECT/mxyz-client"
    if [ "$1" = "--release" ]; then
        cargo build --target wasm32-unknown-unknown --release
    else
        cargo build --target wasm32-unknown-unknown 
    fi


# create js-executable from wasm
# -----------------------------------------------------------------------------

    PATH_TO_OUT_PKG="$PATH_TO_PROJECT/mxyz-server/static/pkg"
    PATH_TO_WASM="$PATH_TO_PROJECT/target/wasm32-unknown-unknown/debug/mxyz_client.wasm"
    wasm-bindgen --target web --out-dir "$PATH_TO_OUT_PKG" "$PATH_TO_WASM"

#!/bin/sh


# get path to project root
# -----------------------------------------------------------------------------

    cd "$(dirname $0)"
    PATH_TO_SCRIPTS=$(pwd)
    PATH_TO_PROJECT="$(cd $PATH_TO_SCRIPTS/.. && echo $(pwd))"


# build client
# -----------------------------------------------------------------------------

    cd "$PATH_TO_SCRIPTS"
    if [ "$1" = "--release" ]; then
        ./build --release
    else
        ./build
    fi


# build & run server
# -----------------------------------------------------------------------------

    cd "$PATH_TO_PROJECT/mxyz-init"
    if [ "$1" = "--release" ]; then
        cargo run --release
    else
        cargo run
    fi

rust update nightly
#!/usr/bin/env python3

import os
import pathlib


pwd = pathlib.Path(__file__).parent.resolve()
proj_root = f"{pwd}/../.."


def check_dir(path, code):

    files = os.listdir(path)
    for item in sorted(files):

        if item in ['out', 'target', '.git', 'pkg', 'Cargo.lock', 'fuse.txt']:
            continue
        if item.endswith('.png') or item.endswith('.jpg') or item.endswith('.ico'):
            continue
        print(item)

        new_path = os.path.join(path, item)
        if os.path.isdir(new_path):
            code = check_dir(new_path, code)

        else:
            with open(new_path, 'r') as fp:
                code += ''.join(fp.readlines())

    return code


code = check_dir(proj_root, "")
# print(f"\nnr. of lines: {code}")
path_to_fuse = os.path.join(proj_root, 'scripts/stats/fuse.txt')
with open(path_to_fuse, 'w') as fp:
    fp.write(code)

#!/usr/bin/env python3

import os
import pathlib


# pwd = pathlib.Path(__file__).parent.resolve()
# proj_root = f"{pwd}/../.."
PATH_TO_PROJECT = pathlib.Path(__file__).parent.resolve()
proj_root = f"{PATH_TO_PROJECT}/../.."


def check_dir(path, length):

    files = os.listdir(path)
    for item in sorted(files):

        if item in ['out', 'target', '.git', 'pkg', 'Cargo.lock']:
            continue
        if item.endswith('.png') or item.endswith('.jpg') or item.endswith('.ico'):
            continue
        print(item)

        new_path = os.path.join(path, item)
        if os.path.isdir(new_path):
            length = check_dir(new_path, length)

        else:
            with open(new_path, 'rb') as fp:
                content = fp.readlines()
                length += len(content)

    return length


length = check_dir(proj_root, 0)
print(f"\nnr. of lines: {length}")

- render config init
- compute w/o render
- game of life
- force field -> engine
